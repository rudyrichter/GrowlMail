/*
 *     Generated by class-dump 3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.
 */

#import "MailCoreFramework.dump"

#pragma mark Named Structures

struct internal_state;

struct z_stream_s {
    char *next_in;
    unsigned int avail_in;
    unsigned long long total_in;
    char *next_out;
    unsigned int avail_out;
    unsigned long long total_out;
    char *msg;
    struct internal_state *state;
    void *zalloc;
    void *zfree;
    void *opaque;
    int data_type;
    unsigned long long adler;
    unsigned long long reserved;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
    char _field3;
    char _field4;
} CDStruct_c53ccb4e;

typedef struct {
    unsigned int :1;
    unsigned int :1;
    unsigned int :8;
    unsigned int :8;
    unsigned int :8;
    unsigned int :1;
    unsigned int :2;
    unsigned int :1;
    unsigned int :2;
} CDStruct_76a5ddda;

typedef struct {
    unsigned int reserved:27;
    unsigned int isPartial:1;
    unsigned int partsHaveBeenCached:1;
    unsigned int hasTemporaryUid:1;
    unsigned int isHTML:1;
    unsigned int isRich:1;
} CDStruct_07ba05d6;

typedef struct {
    int version;
    int count;
    int timeStamp;
    float tocHeight;
    unsigned int sortOrder;
    unsigned int sortedAscending;
    int unused1;
    int unused2;
} CDStruct_c4d47a41;

typedef struct {
    long long _field1;
    unsigned long long _field2;
} CDStruct_1dee9796;

typedef struct {
    unsigned short _field1[64];
    struct __CFString *_field2;
    unsigned short *_field3;
    char *_field4;
    struct {
        long long _field1;
        long long _field2;
    } _field5;
    long long _field6;
    long long _field7;
} CDStruct_f9502b4c;

#pragma mark -

/*
 * File: /System/Library/PrivateFrameworks/Mail.framework/Versions/A/Mail
 * UUID: 175F57EC-4C11-33A9-B72E-7E5AD84C5CDD
 * Arch: x86_64
 *       Current version: 1812.0.0, Compatibility version: 1.0.0
 *       Source version: 1812.0.0.0.0
 *       Minimum Mac OS X version: 10.9.0
 *       SDK version: 10.9.0
 *
 *       Objective-C Garbage Collection: Unsupported
 */
@class MCAuthScheme;

@protocol IMAPOfflineCache <NSObject>
- (void)saveChanges;
- (void)setGmailLabels:(id)arg1 andClearGmailLabels:(id)arg2 forUids:(id)arg3 forMailbox:(id)arg4;
- (void)setFlags:(id)arg1 andClearFlags:(id)arg2 forUids:(id)arg3 forMailbox:(id)arg4;
@end

@protocol MCAccount <NSObject>
+ (void)saveAccountInfoToDefaults;
+ (id)accountTypeString;
@property(readonly) NSString *subscriptionURLLabel;
@property(readonly) NSURL *subscriptionURL;
@property BOOL usesSSL;
@property(readonly) BOOL requiresAuthentication;
@property(readonly) NSString *googleClientToken;
@property(readonly) NSString *appleAuthenticationToken;
@property(readonly) NSString *applePersonID;
@property(copy) NSString *password;
@property(copy) NSString *username;
@property(retain) MCAuthScheme *preferredAuthScheme;
@property long long securityLayerType;
@property(readonly) NSArray *standardSSLPorts;
@property(readonly) NSArray *standardPorts;
@property long long portNumber;
@property(copy) NSString *hostname;
@property BOOL configureDynamically;
@property(readonly) NSString *saslProfileName;
@property(copy) NSString *displayName;
@property(readonly) NSString *accountTypeString;
- (BOOL)canAuthenticateWithScheme:(id)arg1 connection:(id)arg2;
- (id)authSchemesForConnection:(id)arg1;
- (id)authenticatedConnection;
- (id)newConnectedConnectionDiscoveringBestSettings:(BOOL)arg1 withConnectTimeout:(double)arg2 readWriteTimeout:(double)arg3;
- (void)respondToHostBecomingReachable;
- (BOOL)connectAndAuthenticate:(id)arg1;
- (BOOL)shouldRetryConnectionWithoutCertificateCheckingAfterError:(id)arg1 host:(id)arg2 didPromptUser:(char *)arg3;
- (void)setSessionPassword:(id)arg1;
- (id)sessionPassword;
- (void)setTLSIdentity:(struct OpaqueSecIdentityRef *)arg1;
- (struct OpaqueSecIdentityRef *)copyTLSIdentity;

@optional
@property(copy) NSString *externalHostname;
- (void)setShouldUseAuthentication:(BOOL)arg1;
- (BOOL)shouldUseAuthentication;
@end

@protocol MCMailAccount <MCAccount>
- (void)incrementTotalCountOfMessagesReceived:(unsigned long long)arg1;
- (void)incrementCountOfNewUnreadMessagesReceivedInInbox:(unsigned long long)arg1;
- (void)newUnreadMessagesHaveBeenReceivedInInbox;
- (id)remoteTaskQueue;
@end

@protocol MCRemoteStoreAccount <MCMailAccount>
- (void)presentOverQuotaAlert;
- (void)setCachePolicy:(long long)arg1 permanently:(BOOL)arg2;
- (long long)cachePolicy;
@end

@protocol ABImageClient <NSObject>
- (void)consumeImageData:(id)arg1 forTag:(long long)arg2;
@end

@protocol EWSExchangeServiceBindingDelegate <NSObject>
- (void)exchangeServiceBinding:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (void)exchangeServiceBinding:(id)arg1 didCancelAuthenticationChallenge:(id)arg2;

@optional
- (BOOL)exchangeServiceBinding:(id)arg1 canAuthenticateAgainstProtectionSpace:(id)arg2;
- (void)exchangeServiceBinding:(id)arg1 didReceiveCertificateError:(id)arg2;
- (void)exchangeServiceBinding:(id)arg1 didFailWithError:(id)arg2;
- (void)exchangeServiceBinding:(id)arg1 didFinishWithResponse:(id)arg2;
@end

@protocol IMAPAccount <MCRemoteStoreAccount>
@property unsigned int readBufferSize;
@property(readonly) id <IMAPOfflineCache> offlineCache;
@property(copy) NSDictionary *serverID;
@property long long gmailCapabilitiesSupport;
@property BOOL useIDLEIfAvailable;
@property BOOL recoveringFromConnectionLoss;
- (void)recoverFromConnectionLoss;
- (BOOL)shouldMoveDeletedMessagesToTrash;
- (void)backgroundFetchCompletedCount:(unsigned long long)arg1;
- (void)sendAccountNeedsCheckingNotification;
- (BOOL)allowsPartialDownloads;
- (id)quotaRootForName:(id)arg1 createIfNeeded:(BOOL)arg2;
- (BOOL)handleResponseCodeFromResponse:(id)arg1;
- (id)IMAPMailboxForMailboxName:(id)arg1 createIfNeeded:(BOOL)arg2;
- (void)setServerPathPrefix:(id)arg1 permanently:(BOOL)arg2;
- (id)serverPathPrefix;

@optional
- (void)detectAllMailWithGateway:(id)arg1;
- (id)gmailLabelWithName:(id)arg1;
- (id)additionalHeaderFields;
- (void)filterMailboxList:(id)arg1 forMailbox:(id)arg2 options:(long long)arg3;
@end

@protocol IMAPMailboxDelegate <NSObject>
- (void)updateComputedHighestModificationSequence:(unsigned long long)arg1 forMailbox:(id)arg2;
- (unsigned long long)computedHighestModificationSequenceForMailbox:(id)arg1;
- (void)updateAllegedHighestModificationSequence:(unsigned long long)arg1 forMailbox:(id)arg2;
- (unsigned long long)allegedHighestModificationSequenceForMailbox:(id)arg1;
- (void)updateSelectedGatewayFromMailbox:(id)arg1;
- (void)processResponsesFromMailbox:(id)arg1;
- (void)updateUidValidityFromMailbox:(id)arg1;
- (void)updateCountFromMailbox:(id)arg1 fromIDLE:(BOOL)arg2;
@end

@protocol IMAPMessage <NSObject>
- (id)mailboxName;
- (id)dateReceived;
- (id)subject;
- (unsigned long long)messageSize;
- (CDStruct_07ba05d6)remoteFlags;
- (void)setHasTemporaryUid:(BOOL)arg1;
- (BOOL)hasTemporaryUid;
- (void)setPartsHaveBeenCached:(BOOL)arg1;
- (BOOL)partsHaveBeenCached;
- (void)setIsPartial:(BOOL)arg1;
- (BOOL)isPartial;
- (id)messageID;
- (void)setUid:(unsigned int)arg1;
- (unsigned int)uid;
@end

@protocol MCMessageDataSource <MCActivityTarget, NSCopying>
@property(readonly) BOOL isReadOnly;
- (id)uniquedString:(id)arg1;
- (void)flushAllCaches;
- (void)invalidateMessage:(id)arg1;
- (void)sendResponseType:(BOOL)arg1 forMeetingMessage:(id)arg2;
- (id)routeMessages:(id)arg1;
- (void)doCompact;
- (BOOL)canCompact;
- (id)undeleteMessages:(id)arg1 movedToStore:(id)arg2 newMessageIDs:(id)arg3;
- (void)undeleteMessages:(id)arg1;
- (void)deleteMessages:(id)arg1 moveToTrash:(BOOL)arg2;
- (void)saveSnippetsForMessages:(id)arg1;
- (id)snippetsForMessages:(id)arg1;
- (BOOL)supportsSnippets;
- (void)setNumberOfAttachments:(unsigned int)arg1 isSigned:(BOOL)arg2 isEncrypted:(BOOL)arg3 forMessage:(id)arg4;
- (id)attachmentsDirectoryForMessage:(id)arg1;
- (void)setColor:(id)arg1 highlightTextOnly:(BOOL)arg2 forMessages:(id)arg3;
- (id)async_setJunkMailLevel:(long long)arg1 forMessages:(id)arg2 trainJunkMailDatabase:(BOOL)arg3 userRecorded:(BOOL)arg4;
- (id)async_setJunkMailLevel:(long long)arg1 forMessages:(id)arg2 trainJunkMailDatabase:(BOOL)arg3;
- (id)async_setJunkMailLevel:(long long)arg1 forMessages:(id)arg2;
- (void)messageFlagsDidChange:(id)arg1 flags:(id)arg2;
- (id)async_setFlagWithKey:(id)arg1 state:(BOOL)arg2 forMessages:(id)arg3;
- (id)async_setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)dataForMimePart:(id)arg1;
- (BOOL)hasCachedDataForMimePart:(id)arg1;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2;
- (id)fullBodyDataForMessage:(id)arg1;
- (id)bodyDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 allowPartial:(BOOL)arg3;
- (id)bodyForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 updateFlags:(BOOL)arg3 allowPartial:(BOOL)arg4;
- (id)bodyForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 updateFlags:(BOOL)arg3;
- (id)bodyForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)headerDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 allowPartial:(BOOL)arg3;
- (id)headerDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)headerDataForMessage:(id)arg1;
- (id)headersForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)headersForMessage:(id)arg1;
- (id)messageForMessageID:(id)arg1;
- (id)mailbox;
- (id)account;

@optional
- (id)async_setGmailLabelsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)async_deleteMessages:(id)arg1 moveToTrash:(BOOL)arg2;
@end

@protocol IMAPMessageDataSource <MCMessageDataSource>
@property(readonly) BOOL persistentIDType;
- (void)syncEngineDidSynchronizeMessageList;
- (void)removeAllLocalMessages;
- (void)setUidValidityStatus:(unsigned int)arg1;
- (void)setComputedHighestModificationSequence:(unsigned long long)arg1;
- (void)setAllegedHighestModificationSequence:(unsigned long long)arg1;
- (unsigned long long)allegedHighestModificationSequence;
- (void)setUidNextStatus:(unsigned int)arg1;
- (unsigned int)uidNextStatus;
- (unsigned int)maximumRemoteID;
- (void)syncEngineDidFinish;
- (void)syncEngineDidStart;
- (id)newDictionaryForLocalFlags:(unsigned int)arg1 serverFlags:(unsigned int)arg2 existingDictionary:(id)arg3;
- (id)async_setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2 updatingServer:(BOOL)arg3;
- (BOOL)messageHasBeenDeleted:(id)arg1;
- (void)compactMessagesFromSyncEngine:(id)arg1;
- (id)messagesBeingAdded;
- (BOOL)messagesAreBeingAdded;
- (void)addMessages:(id)arg1;
- (id)downloadCache;
- (id)fetchPipeline;
- (BOOL)hasValidCacheFileForMessage:(id)arg1;
- (BOOL)hasCacheFileForMessage:(id)arg1 part:(id)arg2 directoryContents:(id)arg3;
- (BOOL)hasCacheFileForMessage:(id)arg1 directoryContents:(id)arg2;
- (id)cacheDirectoryContents;
- (id)copyOfAllMessagesWithSubjects;
- (id)getDetailsForMessagesWithRemoteIDs:(id)arg1;
- (unsigned long long)totalCountOfMessages;
- (BOOL)isInbox;
- (id)mailboxName;
- (id)account;

@optional
- (id)async_setGmailLabelsFromDictionary:(id)arg1 forMessages:(id)arg2 updatingServer:(BOOL)arg3;
- (id)recentFlagChangesForManagedObjectID:(id)arg1;
- (id)messagesWithManagedObjectIDs:(id)arg1;
- (id)messageWithDefaultLoadOptionsAndManagedObjectID:(id)arg1;
- (id)recentFlagChangesForRowID:(id)arg1;
- (id)messagesWithRowIDs:(id)arg1;
- (id)messageWithDefaultLoadOptionsAndRowID:(long long)arg1;
@end


@protocol IMAPPersistedMessage <MCChanging>
@property(readonly) BOOL persistentIDType;
- (void)appendData:(id)arg1 part:(id)arg2;
- (void)setData:(id)arg1 isPartial:(BOOL)arg2;
- (void)setRemoteID:(id)arg1;
- (id)remoteID;

@optional
- (id)managedObjectID;
- (long long)libraryID;
@end

@protocol MCAccountSetupValidatorDelegate
- (id)delegateApplicationName;
- (BOOL)validatorShouldPromptForInsecurePassword:(id)arg1;
- (void)validatorDidFinish:(id)arg1;
- (void)validatorDidFail:(id)arg1;
- (void)validator:(id)arg1 didChangeState:(long long)arg2;
@end

@protocol MCActivityTarget <NSObject>

@optional
- (BOOL)isSmartMailbox;
- (id)displayName;
@end

@protocol MCCIDURLProtocolDataProvider <NSObject>
@property(readonly) NSString *mimeType;
@property(readonly) NSData *data;
@property(readonly) NSURL *cidURL;

@optional
@property(readonly) long long fileSize;
@end

@protocol MCChanging <NSObject>
- (BOOL)endChanging:(BOOL)arg1 immediately:(BOOL)arg2;
- (void)beginChanging;
@end

@protocol MCGmailLabel <NSObject>
- (BOOL)isGmailImportantLabel;
- (id)labelName;
@end


@protocol MCMailbox <NSCopying, NSObject>
- (unsigned long long)unseenCount;
- (BOOL)unseenCountIsKnown;
- (id)URLString;
- (void)setUserInfoObject:(id)arg1 forKey:(id)arg2;
- (id)userInfoObjectForKey:(id)arg1;
- (void)setUserInfoBool:(BOOL)arg1 forKey:(id)arg2;
- (BOOL)userInfoBoolForKey:(id)arg1;
- (id)extendedDisplayName;
- (id)displayName;
@end


@protocol MCMessageSortingInterface <NSObject>
- (unsigned int)uidForSort;
- (id)mailbox;
- (double)dateSentAsTimeIntervalSince1970;
- (double)dateReceivedAsTimeIntervalSince1970;
- (id)to;
- (id)subjectAndPrefixLength:(unsigned long long *)arg1;
- (id)subject;
- (unsigned long long)numberOfAttachments;
- (unsigned long long)messageSize;
- (id)senderDisplayName;
- (unsigned int)messageFlags;
- (double)dateLastViewedAsTimeIntervalSince1970;
- (int)colorForSort;
@end

@protocol MCPersistentIDFetching <NSObject>
+ (id)fetchedMessageWithRowID:(long long)arg1;
- (long long)libraryID;
@end

@protocol MFEWSErrorHandler <NSObject>
- (void)handleEWSError:(id)arg1;
@end

@protocol MFLibraryInterface <NSObject>
+ (id)urlForMailboxID:(long long)arg1;
+ (long long)mailboxIDForMailbox:(id)arg1;
@end

@protocol MFMessageConsumer <NSObject>
@property(readonly) BOOL shouldCancel;
- (void)finishedSendingMessages;
- (void)newMessagesAvailable:(id)arg1 conversationsMembersByConversationID:(id)arg2 options:(id)arg3;

@optional
- (id)libraryNotificationMessages;
- (id)libraryNotificationObject;
- (void)newMessagesAvailable:(id)arg1 conversationMembers:(id)arg2;
- (void)searchPhaseComplete;
@end

@protocol MFMessageDelivererDelegate <NSObject>
- (void)messageDeliveryDidFinish:(id)arg1;

@optional
- (void)messageDeliveryWillBegin:(id)arg1;
@end

@protocol MFPOPConnectionDelegate <NSObject>
- (BOOL)connectionShouldPrefetchMessages;
- (void)connection:(id)arg1 didRetrieveData:(id)arg2 forMessageNumber:(unsigned long long)arg3;
- (long long)connection:(id)arg1 willRetrieveMessageNumber:(unsigned long long)arg2 header:(id)arg3 size:(unsigned long long)arg4;
- (void)connection:(id)arg1 receivedNumberOfBytes:(unsigned long long)arg2;
@end

@protocol MFRouterStore <NSObject>
- (void)cancel;
- (void)messagesWereRouted:(id)arg1;
- (void)messagesWillBeRouted:(id)arg1;
@end

@protocol MFUIMailbox <NSObject>
@property int type;
- (BOOL)isDescendantOfMailboxWithType:(int)arg1;
- (BOOL)isPlaceholder;
- (id)accountURLString;
- (id)account;
- (BOOL)isSmartMailbox;
- (BOOL)isStore;
- (id)children;
- (BOOL)hasChildren;
- (unsigned long long)numberOfChildren;
- (unsigned long long)displayCount;
- (BOOL)isContainer;
- (id)extendedDisplayName;
- (id)displayName;
- (id)persistentIdentifier;
@end

@protocol MailMigratorService
- (void)migrateAppleScriptFiles;
- (void)migrateMailDownloadsFiles;
- (void)fixMailDownloadsMigrationKey;
@end

@protocol NSCacheDelegate <NSObject>

@optional
- (void)cache:(id)arg1 willEvictObject:(id)arg2;
@end

@protocol NSCoding
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSFileManagerDelegate <NSObject>

@optional
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 removingItemAtURL:(id)arg3;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 removingItemAtPath:(id)arg3;
- (BOOL)fileManager:(id)arg1 shouldRemoveItemAtURL:(id)arg2;
- (BOOL)fileManager:(id)arg1 shouldRemoveItemAtPath:(id)arg2;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 linkingItemAtURL:(id)arg3 toURL:(id)arg4;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 linkingItemAtPath:(id)arg3 toPath:(id)arg4;
- (BOOL)fileManager:(id)arg1 shouldLinkItemAtURL:(id)arg2 toURL:(id)arg3;
- (BOOL)fileManager:(id)arg1 shouldLinkItemAtPath:(id)arg2 toPath:(id)arg3;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 movingItemAtURL:(id)arg3 toURL:(id)arg4;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 movingItemAtPath:(id)arg3 toPath:(id)arg4;
- (BOOL)fileManager:(id)arg1 shouldMoveItemAtURL:(id)arg2 toURL:(id)arg3;
- (BOOL)fileManager:(id)arg1 shouldMoveItemAtPath:(id)arg2 toPath:(id)arg3;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 copyingItemAtURL:(id)arg3 toURL:(id)arg4;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 copyingItemAtPath:(id)arg3 toPath:(id)arg4;
- (BOOL)fileManager:(id)arg1 shouldCopyItemAtURL:(id)arg2 toURL:(id)arg3;
- (BOOL)fileManager:(id)arg1 shouldCopyItemAtPath:(id)arg2 toPath:(id)arg3;
@end

@protocol NSFilePresenter <NSObject>
@property(readonly) NSOperationQueue *presentedItemOperationQueue;
@property(readonly) NSURL *presentedItemURL;

@optional
@property(readonly) NSURL *primaryPresentedItemURL;
- (void)presentedSubitemAtURL:(id)arg1 didResolveConflictVersion:(id)arg2;
- (void)presentedSubitemAtURL:(id)arg1 didLoseVersion:(id)arg2;
- (void)presentedSubitemAtURL:(id)arg1 didGainVersion:(id)arg2;
- (void)presentedSubitemDidChangeAtURL:(id)arg1;
- (void)presentedSubitemAtURL:(id)arg1 didMoveToURL:(id)arg2;
- (void)presentedSubitemDidAppearAtURL:(id)arg1;
- (void)accommodatePresentedSubitemDeletionAtURL:(id)arg1 completionHandler:(id)arg2;
- (void)presentedItemDidResolveConflictVersion:(id)arg1;
- (void)presentedItemDidLoseVersion:(id)arg1;
- (void)presentedItemDidGainVersion:(id)arg1;
- (void)presentedItemDidChange;
- (void)presentedItemDidMoveToURL:(id)arg1;
- (void)accommodatePresentedItemDeletionWithCompletionHandler:(id)arg1;
- (void)savePresentedItemChangesWithCompletionHandler:(id)arg1;
- (void)relinquishPresentedItemToWriter:(id)arg1;
- (void)relinquishPresentedItemToReader:(id)arg1;
@end

@protocol NSKeyedUnarchiverDelegate <NSObject>

@optional
- (void)unarchiverDidFinish:(id)arg1;
- (void)unarchiverWillFinish:(id)arg1;
- (void)unarchiver:(id)arg1 willReplaceObject:(id)arg2 withObject:(id)arg3;
- (id)unarchiver:(id)arg1 didDecodeObject:(id)arg2;
- (Class)unarchiver:(id)arg1 cannotDecodeObjectOfClassName:(id)arg2 originalClasses:(id)arg3;
@end

@protocol NSLocking
- (void)unlock;
- (void)lock;
@end

@protocol NSObject
- (id)description;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(id)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (struct _NSZone *)zone;
- (id)self;
- (Class)class;
- (Class)superclass;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;

@optional
- (id)debugDescription;
@end

@protocol NSPortDelegate <NSObject>

@optional
- (void)handlePortMessage:(id)arg1;
@end

@interface _MFAppleScriptHeaderRecord : NSObject
{
    NSString *_name;
    id _content;
    MCMessage *_message;
}

- (id)objectSpecifier;
- (void)setMessage:(id)arg1;
- (id)message;
- (void)setContent:(id)arg1;
- (id)content;
- (void)setName:(id)arg1;
- (id)name;
- (void)dealloc;

@end

@interface MFAccount : NSObject <MCAccount>
{
    NSString *_brandName;
    id _brandIcon;
    id _supportURL;
    NSString *_supportURLLabel;
    unsigned int _isOffline:1;
    unsigned int _willingToGoOnline:1;
    unsigned int _autosynchronizingEnabled:1;
    unsigned int _isActive:2;
    NSMutableDictionary *_info;
    NSString *_providerIdentifier;
    struct OpaqueSecIdentityRef *_tlsIdentity;
    NSMutableSet *_connections;
    unsigned int _promptedToTrustSSLCertificates:1;
    BOOL _configureDynamically;
}

+ (Class)classForProtocol:(id)arg1;
+ (id)keyPathsForValuesAffectingPreferredAuthScheme;
+ (BOOL)defaultsToSSL;
+ (id)keyPathsForValuesAffectingOfflineDisplayName;
+ (BOOL)allObjectsInArrayAreOffline:(id)arg1;
+ (id)genericAccountLargeImage;
+ (id)accountTypeString;
+ (void)saveAccountInfoToDefaults;
+ (BOOL)_shouldAnnounceChangesFromAccountInfo:(id)arg1 toAccountInfo:(id)arg2;
+ (void)saveAccounts:(id)arg1 usingStorageKey:(id)arg2 forceWriteToMail:(BOOL)arg3;
+ (void)saveAccounts:(id)arg1 usingStorageKey:(id)arg2;
+ (id)readAccountsUsingStorageKey:(id)arg1;
+ (id)readAccountsUsingStorageKey:(id)arg1 forceReadFromMail:(BOOL)arg2;
+ (id)v2AccountsPlistName;
+ (BOOL)haveAccountsBeenConfigured;
+ (id)typeStringForAccountClass:(Class)arg1;
+ (Class)accountClassForTypeString:(id)arg1;
+ (void)initialize;
@property BOOL configureDynamically; // @synthesize configureDynamically=_configureDynamically;
@property(readonly) void *keychainProtocol;
- (void)respondToHostBecomingReachable;
- (id)authSchemesForConnection:(id)arg1;
- (BOOL)canAuthenticateWithScheme:(id)arg1 connection:(id)arg2;
- (void)removeAccountInfoObjectForKey:(id)arg1;
- (void)setAccountInfoObject:(id)arg1 forKey:(id)arg2;
@property(readonly) BOOL isValid;
@property(nonatomic) BOOL promptToTrustSSLCertificates;
@property(readonly) NSImage *brandIcon;
- (id)iaSettingsIncludingPassword:(BOOL)arg1;
@property(readonly) NSString *brandName;
- (void)setProviderIdentifier:(id)arg1;
@property(readonly) NSString *providerIdentifier;
@property(readonly) NSString *accountTypeString;
@property(readonly) NSString *subscriptionURLLabel;
@property(readonly) NSURL *subscriptionURL;
@property(readonly) NSString *supportURLLabel;
@property(readonly) NSURL *supportURL;
- (id)_ispDomain;
- (id)nameForMailbox:(id)arg1;
@property(readonly) NSString *uniqueId;
@property(copy) NSString *ISPAccountID;
- (BOOL)connectAndAuthenticate:(id)arg1;
- (BOOL)shouldRetryConnectionWithoutCertificateCheckingAfterError:(id)arg1 host:(id)arg2 didPromptUser:(char *)arg3;
- (id)authenticatedConnection;
- (id)newConnectedConnectionDiscoveringBestSettings:(BOOL)arg1 withConnectTimeout:(double)arg2 readWriteTimeout:(double)arg3;
@property(readonly) BOOL requiresAuthentication;
@property(readonly) NSString *saslProfileName;
@property(retain) MCAuthScheme *preferredAuthScheme;
- (void)accountInfoDidChange;
@property(copy) NSString *domain;
@property long long securityLayerType;
- (void)_setUsesSSL:(BOOL)arg1 accountInfoKey:(id)arg2;
- (BOOL)_usesSSLWithAccountInfoKey:(id)arg1;
@property BOOL usesSSL;
- (void)validateConnections;
- (void)releaseAllConnections;
@property(readonly) long long defaultSecurePortNumber;
@property(readonly) long long defaultPortNumber;
@property(readonly) NSArray *standardSSLPorts;
@property(readonly) NSArray *standardPorts;
@property long long portNumber;
- (void)setTLSIdentity:(struct OpaqueSecIdentityRef *)arg1;
- (struct OpaqueSecIdentityRef *)copyTLSIdentity;
@property(readonly) NSString *googleClientToken;
@property(readonly) NSString *appleAuthenticationToken;
@property(readonly) NSString *applePersonID;
- (void)promptUserForPasswordWithCompletion:(id)arg1;
- (id)promptUserForPassword;
- (void)setSessionPassword:(id)arg1;
- (id)sessionPassword;
- (void)setPermanentPassword:(id)arg1;
- (id)permanentPassword;
@property(copy) NSString *password;
- (void)_setHostname:(id)arg1 accountInfoKey:(id)arg2;
- (id)_hostnameWithAccountInfoKey:(id)arg1;
@property(copy) NSString *hostname;
@property(copy) NSString *username;
@property(readonly) NSString *offlineDisplayName;
@property(copy) NSString *displayName;
@property(copy) NSString *storedDisplayName;
@property BOOL isWillingToGoOnline;
@property BOOL isOffline;
@property(readonly) BOOL canGoOffline;
@property BOOL isInactivatedInsteadOfBeingDeleted;
@property BOOL isActive;
- (void)setAutosynchronizingEnabled:(BOOL)arg1;
@property(readonly) NSMutableDictionary *defaultsDictionary;
- (void)_queueAccountInfoDidChange;
- (void)setInfo:(id)arg1;
- (id)info;
- (void)_setAccountInfo:(id)arg1;
@property(copy) NSDictionary *accountInfo;
- (void)dealloc;
- (id)init;
- (id)initWithAccountInfo:(id)arg1;
@property(readonly) NSString *iaServiceType;
- (void)setCustomAuthentication:(unsigned int)arg1;
- (unsigned int)customAuthentication;
- (id)accountName;
- (void)setAccountName:(id)arg1;
- (id)loginName;
- (void)setLoginName:(id)arg1;
- (id)serverName;
- (void)setServerName:(id)arg1;
- (id)accountPassword;
- (void)setAccountPassword:(id)arg1;
- (unsigned int)accountType;

// Remaining properties
@property(copy) NSString *externalHostname;

@end

@interface MFAccountStatus : NSObject <MCActivityTarget>
{
    NSMutableDictionary *_states;
    NSMutableDictionary *_stateDetails;
    struct __CFNetDiagnostic *_netDiagnostics;
    NSMapTable *_clients;
    NSMutableSet *_allRegisteredAccounts;
    unsigned long long _allRegisteredTypes;
    NSMutableArray *_accountRefreshQueue;
    NSTimer *_refreshTimer;
    BOOL _isRefreshingInternet;
}

+ (id)sharedStatus;
- (void)_accountStatusUpdatedWithInfo:(id)arg1;
- (void)_refreshAccountStatus:(id)arg1;
- (void)_refreshInternetStatus;
- (void)_refreshAccounts:(id)arg1 andInternet:(BOOL)arg2 clearingStatus:(BOOL)arg3;
- (void)refreshStatusForClient:(id)arg1 forceRefresh:(BOOL)arg2;
- (void)refreshAndClearStatus:(BOOL)arg1;
- (void)_accountInfoChanged:(id)arg1;
- (void)_networkChanged:(id)arg1;
- (void)_timedRefresh:(id)arg1;
- (void)_setStatusDetails:(id)arg1 forAccount:(id)arg2;
- (id)accountStatusDetails:(id)arg1;
- (void)_setStatus:(long long)arg1 forAccount:(id)arg2;
- (long long)knownAccountStatus:(id)arg1;
- (long long)accountStatus:(id)arg1;
- (void)diagnoseInternetConnection;
- (void)_setInternetStatus:(long long)arg1;
- (long long)internetStatus;
- (id)_accountsForTypes:(unsigned long long)arg1;
- (id)_allRegisteredAccounts;
- (id)_registeredAccountsForClient:(id)arg1 onlyWithUnknownStatus:(BOOL)arg2;
- (id)registeredAccountsForClient:(id)arg1;
- (void)unregisterClient:(id)arg1;
- (void)registerAccounts:(id)arg1 forClient:(id)arg2;
- (void)registerAccountTypes:(unsigned long long)arg1 forClient:(id)arg2;
- (void)registerAccountTypes:(unsigned long long)arg1 accounts:(id)arg2 forClient:(id)arg3;
- (void)invalidate;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface MFAccountStorage : NSObject
{
    struct _opaque_pthread_rwlock_t {
        long long __sig;
        char __opaque[192];
    } _rwLock;
}

+ (id)sharedInstance;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (id)v2AccountsPlistName;
- (void)setInteger:(long long)arg1 forKey:(id)arg2;
- (long long)integerForKey:(id)arg1;
- (id)stringForKey:(id)arg1;
- (id)arrayForKey:(id)arg1;
- (BOOL)synchronize;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)objectForKey:(id)arg1;
- (id)_accountsPlistPath;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface MFAddressManager : NSObject <ABImageClient, MCActivityTarget>
{
    NSCache *_imageCache;
    NSMutableDictionary *_emailsAwaitingImage;
    NSMutableSet *_emailsWithoutImage;
    MCInvocationQueue *_imageLoadingQueue;
    NSOperationQueue *_imageCreationQueue;
    NSMutableDictionary *_recordsCache;
    NSMutableSet *_addressesWithNoRecords;
    BOOL _needToTrimRecordCaches;
}

+ (id)addressManager;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (id)groups;
- (void)consumeImageData:(id)arg1 forTag:(long long)arg2;
- (void)_fetchImageForAddress:(id)arg1;
- (id)imageForMailAddress:(id)arg1 fetchState:(unsigned long long *)arg2;
- (id)_addressBookRecordsForFirstName:(id)arg1 lastName:(id)arg2;
- (id)addressBookPersonForEmail:(id)arg1;
- (id)_addressBookRecordForEmail:(id)arg1;
- (void)removeRecentRecord:(id)arg1;
- (void)removeRecentAddresses:(id)arg1;
- (void)removeRecordFromAddressBook:(id)arg1 forRecent:(id)arg2;
- (id)addRecentToAddressBook:(id)arg1;
- (void)addAddresses:(id)arg1;
- (void)addRecentAddresses:(id)arg1 sendingAddress:(id)arg2;
- (void)_addAddresses:(id)arg1;
- (id)recordForUniqueId:(id)arg1;
- (void)_postPhotoChangedNotification;
- (void)_clearCachedImagesForRemovedRecords:(id)arg1;
- (void)_updateCachedImagesForRecords:(id)arg1;
- (void)_invalidateInsertedRecords:(id)arg1;
- (id)_addressesForRecords:(id)arg1;
- (void)_invalidateChangedRecords:(id)arg1;
- (void)_addressBookDidChange:(id)arg1;
- (void)_trimRecordCaches;
- (void)_trimRecordCachesAfterDelay;
- (id)bestRecordMatchingFormattedAddress:(id)arg1;
- (void)_loadAddressBookSynchronously;
- (id)loadAddressBookAsynchronously;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface MFAosImapAccount : MFIMAPAccount
{
    id _aoskitLock;
    struct AOSAccount *_aoskitAccount;
    struct AOSTransactionC *_mailPropertiesTransaction;
    struct AOSTransactionC *_aliasesTransaction;
    struct AOSTransactionC *_editAliasesURLTransaction;
    MFAosSmtpAccount *_aosSmtpAccount;
    BOOL _shouldBypassCache;
}

+ (void)updateAllEmailAliases:(BOOL)arg1;
+ (id)defaultPathNameForAccountWithHostname:(id)arg1 username:(id)arg2;
+ (id)defaultPathNameForAccount;
+ (BOOL)defaultsToSSL;
+ (id)keyPathsForValuesAffectingValueForKey:(id)arg1;
@property BOOL shouldBypassCache; // @synthesize shouldBypassCache=_shouldBypassCache;
- (void)migrateToNewAOSService;
- (void)openEditEmailAliasesURL;
- (void)updateEmailAliases;
- (void)_updateMailProperties;
- (void)_updateAliases:(BOOL)arg1;
- (void)_updateAoskitAccount;
- (void)setDefaultAddress:(id)arg1;
- (void)_setEditAliasesURLTransaction:(struct AOSTransactionC *)arg1;
- (struct AOSTransactionC *)_copyEditAliasesURLTransaction;
- (void)_setAliasesTransaction:(struct AOSTransactionC *)arg1;
- (struct AOSTransactionC *)_copyAliasesTransaction;
- (void)_setMailPropertiesTransaction:(struct AOSTransactionC *)arg1;
- (struct AOSTransactionC *)_copyMailPropertiesTransaction;
- (void)_setAoskitAccount:(struct AOSAccount *)arg1;
- (struct AOSAccount *)_copyAoskitAccount;
@property(retain) NSString *aosDomain;
- (void)handleAlertResponse:(id)arg1;
- (void)presentOverQuotaAlert;
- (id)dynamicDeliveryAccount;
- (id)_replacementDeliveryAccountForDeliveryAccount:(id)arg1;
- (void)_removeDeliveryAccountIfNotInUse:(id)arg1;
- (void)setDeliveryAccount:(id)arg1;
- (id)deliveryAccount;
- (void)_setEmailAliases:(id)arg1;
- (id)emailAddresses;
- (id)rawEmailAddresses;
- (id)_URLPersistenceHostname;
- (id)iaSettingsIncludingPassword:(BOOL)arg1;
- (BOOL)shouldRetryConnectionWithoutCertificateCheckingAfterError:(id)arg1 host:(id)arg2 didPromptUser:(char *)arg3;
- (BOOL)canAuthenticateWithScheme:(id)arg1 connection:(id)arg2;
- (void)setIsOffline:(BOOL)arg1;
- (id)appleAuthenticationToken;
- (id)applePersonID;
- (void)setSessionPassword:(id)arg1;
- (void)setPermanentPassword:(id)arg1;
- (id)permanentPassword;
- (void)setPassword:(id)arg1;
- (id)defaultsDictionary;
- (void)setUsername:(id)arg1;
- (void)setHostname:(id)arg1;
- (id)hostname;
- (void)completeDeferredInitialization;
- (void)_setAccountInfo:(id)arg1;
- (void)dealloc;
- (id)initWithAccountInfo:(id)arg1;
- (void)setLastSuccessfulAosSmtpPortNumber:(long long)arg1;
- (long long)lastSuccessfulAosSmtpPortNumber;
- (id)aoskitPropertyForKey:(struct __CFString *)arg1;

@end

@interface MFAosSmtpAccount : MFSMTPAccount
{
    MFAosImapAccount *_aosImapAccount;
}

+ (id)keyPathsForValuesAffectingValueForKey:(id)arg1;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (void)setShouldTryDefaultPorts:(BOOL)arg1;
- (BOOL)shouldTryDefaultPorts;
- (id)remoteMailAccountsEmployedBy;
- (void)setShouldUseAuthentication:(BOOL)arg1;
- (BOOL)shouldUseAuthentication;
- (void)setAssociatedAccount:(id)arg1;
- (id)associatedAccount;
- (BOOL)isDynamic;
- (id)identifier;
- (void)setValidationRequired:(BOOL)arg1;
- (BOOL)validationRequired;
- (BOOL)shouldRetryConnectionWithoutCertificateCheckingAfterError:(id)arg1 host:(id)arg2 didPromptUser:(char *)arg3;
- (id)subscriptionURLLabel;
- (id)subscriptionURL;
- (id)supportURLLabel;
- (id)supportURL;
- (id)uniqueId;
- (void)setISPAccountID:(id)arg1;
- (id)ISPAccountID;
- (void)setPreferredAuthScheme:(id)arg1;
- (id)preferredAuthScheme;
- (void)setDomain:(id)arg1;
- (id)domain;
- (void)setUsesSSL:(BOOL)arg1;
- (BOOL)usesSSL;
- (id)appleAuthenticationToken;
- (id)applePersonID;
- (void)setSessionPassword:(id)arg1;
- (id)sessionPassword;
- (void)setPermanentPassword:(id)arg1;
- (id)permanentPassword;
- (void)setPassword:(id)arg1;
- (id)password;
- (void)setUsername:(id)arg1;
- (id)username;
- (void)setPortNumber:(long long)arg1;
- (long long)portNumber;
- (void)setConfigureDynamically:(BOOL)arg1;
- (BOOL)configureDynamically;
- (void)setHostname:(id)arg1;
- (id)hostname;
- (BOOL)canAuthenticateWithScheme:(id)arg1 connection:(id)arg2;
- (BOOL)requiresAuthentication;
- (void)setInfo:(id)arg1;
- (id)info;
- (void)_setAccountInfo:(id)arg1;
- (void)removeAccountInfoObjectForKey:(id)arg1;
- (void)setAccountInfoObject:(id)arg1 forKey:(id)arg2;
- (void)updateAccountsFromPlist:(id)arg1 acceptedChanges:(id)arg2;
- (id)defaultsDictionary;
- (void)setIsInactivatedInsteadOfBeingDeleted:(BOOL)arg1;
- (BOOL)isInactivatedInsteadOfBeingDeleted;
- (id)offlineDisplayName;
- (void)setDisplayName;
- (id)displayName;
- (void)setStoredDisplayName;
- (id)storedDisplayName;
- (void)dealloc;
- (id)initWithAccountInfo:(id)arg1;
- (id)initWithAccount:(id)arg1;

@end

@interface MFAttachmentViewController : NSObject <NSCopying, MCCIDURLProtocolDataProvider>
{
    NSMutableArray *_attachmentViews;
    BOOL _canBeDisplayedInline;
    BOOL _canBeDisplayedInRegisteredViewer;
    struct CGSize _originalImageSize;
    BOOL _originalImageSizeHasBeenComputed;
    NSImage *_inlineImage;
    BOOL _isBeingDisplayedInline;
    BOOL _isInvisible;
    struct CGSize _previousTargetImageSize;
    BOOL _isImageBeingResized;
    MCAttachment *_attachment;
    long long _domNodeWidth;
    long long _domNodeHeight;
    DOMHTMLObjectElement *_objectElement;
    struct CGSize _targetImageSize;
}

+ (Class)_viewProviderClassForMimeType:(id)arg1;
+ (void)registerViewingClass:(Class)arg1 forMimeTypes:(id)arg2;
+ (void)initialize;
@property(retain, nonatomic) DOMHTMLObjectElement *objectElement; // @synthesize objectElement=_objectElement;
@property long long domNodeHeight; // @synthesize domNodeHeight=_domNodeHeight;
@property long long domNodeWidth; // @synthesize domNodeWidth=_domNodeWidth;
@property(readonly) MCAttachment *attachment; // @synthesize attachment=_attachment;
@property(readonly) NSString *mimeType;
@property(readonly) NSURL *cidURL;
@property(readonly) NSData *data;
- (id)description;
- (void)forwardInvocation:(id)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)_attachmentDidFinishReading:(id)arg1;
- (void)_imageDataDidChange:(id)arg1;
- (id)iconImage;
- (id)inlineImage;
- (void)resizingFinished:(id)arg1 imageSize:(struct CGSize)arg2 fileExtension:(id)arg3 fileType:(unsigned int)arg4 maxImageSize:(struct CGSize)arg5;
- (void)resizingStarted:(struct CGSize)arg1;
@property(readonly) struct CGSize targetImageSize; // @synthesize targetImageSize=_targetImageSize;
- (struct CGSize)originalImageSizeWithOriginalImage:(id)arg1;
- (void)setInvisible:(BOOL)arg1;
- (BOOL)shouldDownloadAttachmentOnDisplay;
- (BOOL)shouldBeDisplayedInlineByDefault;
- (void)setCanBeDisplayedInline:(BOOL)arg1;
- (BOOL)canBeDisplayedInline;
@property BOOL isBeingDisplayedInline;
- (void)addAttachmentView:(id)arg1;
@property(readonly) NSArray *attachmentViews;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithMessageAttachment:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly) long long fileSize;

@end

@interface MFBackupManager : NSObject
{
    MFMailbox *_topLevelRecoveryMailbox;
    NSDictionary *_lastSavedTableOfContents;
    NSMapTable *_mailboxBackupPaths;
    NSMutableDictionary *_mailboxesWithKnownContents;
    id _editableMessagesLock;
    BOOL _registeredForEditableMessageNotifications;
    NSArray *_messagePathsToRestore;
    NSURL *_mailboxDirectoryToRestore;
    NSString *_mailboxNameForRestoring;
    id _timeMachineRestoreLock;
}

+ (id)sharedManager;
- (id)backupMailboxesEnumerator;
- (id)backupPathForMailbox:(id)arg1 pathsCache:(id)arg2;
- (id)_backupPathForMailbox:(id)arg1 withParentPath:(id)arg2 pathsCache:(id)arg3;
- (id)backupPathForMailbox:(id)arg1;
- (BOOL)saveTableOfContents:(id)arg1;
- (id)tableOfContents;
- (void)_addMailbox:(id)arg1 toSection:(long long)arg2 sections:(id)arg3 messagePool:(id)arg4;
- (long long)_sectionForMailbox:(id)arg1;
- (id)_dictionaryForMessage:(id)arg1 includeRecipients:(BOOL)arg2;
- (id)_dictionaryForMailbox:(id)arg1 parent:(id)arg2 messagePool:(id)arg3;
- (id)_dictionaryForSection:(long long)arg1;
- (id)_expandedMailboxes:(id)arg1;
- (BOOL)_shouldSaveDisplayNameForMailbox:(id)arg1;
- (BOOL)shouldSaveMessagesForMailbox:(id)arg1;
- (id)_reducedPathFromFullPath:(id)arg1;
- (id)_reducedPathFromFullPath:(id)arg1 supportDirectory:(id)arg2;
- (id)_recoveryMailboxWithSuggestedName:(id)arg1 reuseMailbox:(BOOL)arg2;
- (id)_topLevelRecoveryMailbox;
- (void)setTopLevelRecoveryMailbox:(id)arg1;
- (BOOL)_restoreMailboxAtURL:(id)arg1 intoMailbox:(id)arg2 newMessages:(id)arg3;
- (BOOL)restoreMailboxesAtURL:(id)arg1 intoMailbox:(id)arg2 restoredMessages:(id)arg3;
- (id)restoreMailboxAtURL:(id)arg1 intoMailboxNamed:(id)arg2 postNotification:(BOOL)arg3;
- (void)prepareToRestoreMailboxAtURL:(id)arg1 intoMailboxNamed:(id)arg2;
- (id)restoreMessagesAtPaths:(id)arg1 intoMailboxNamed:(id)arg2 reuseMailbox:(BOOL)arg3 createdMailboxNamed:(id *)arg4 postNotification:(BOOL)arg5;
- (void)prepareToRestoreMessagesAtPaths:(id)arg1 intoMailboxNamed:(id)arg2;
- (long long)numberOfMessagesToBeRestored;
- (id)mailboxNameToBeRestored;
- (BOOL)hasPendingRestoreIsMailbox:(char *)arg1;
- (void)timeMachineRestoreFinished:(id)arg1;
- (void)performPendingRestore;
- (void)_setupDefaultTopLevelRecoveryMailbox;
- (void)editableMessagesWereDeleted:(id)arg1;
- (void)editableMessagesWereAdded:(id)arg1;
- (void)invalidateCaches;
- (void)dealloc;
- (id)init;

@end

@interface MFBerkeleyMbox : MFMessageStore
{
    NSData *_mboxData;
    NSString *_path;
}

+ (BOOL)createEmptyStoreForPath:(id)arg1;
+ (BOOL)storeAtPathIsWritable:(id)arg1;
+ (BOOL)storeExistsForPath:(id)arg1;
- (void)fetchSynchronously;
- (id)_defaultRouterDestination;
- (void)doCompact;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3 allowPartial:(BOOL)arg4;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 allowPartial:(BOOL)arg3;
- (void)_resetAllMessages;
- (id)_mboxData;
- (id)_lockFilePath;
- (id)path;
- (void)writeUpdatedMessageDataToDisk;
- (void)dealloc;
- (id)initWithMailbox:(id)arg1 readOnly:(BOOL)arg2;
- (id)init;
- (id)initWithPath:(id)arg1 create:(BOOL)arg2 readOnly:(BOOL)arg3 account:(id)arg4;

@end

@interface MFConversationCalculationContext : NSObject
{
    NSHashTable *_participants;
    MFPreparedStatement *_messageHasReferencesStatement;
    MFPreparedStatement *_messageHasMessageIDStatement;
    MFPreparedStatement *_conversationIDOfCloneStatement;
    MFPreparedStatement *_conversationIDOfAutomatedAncestorWithReferencesStatement;
    MFPreparedStatement *_conversationIDOfAutomatedPeerWithReferencesStatement;
    MFPreparedStatement *_conversationIDOfAutomatedMessageWithoutReferencesStatement;
    MFPreparedStatement *_conversationIDOfClosestAncestorStatement;
    MFPreparedStatement *_peersOfMessageStatement;
    MFPreparedStatement *_addMessageToConversationStatement;
    MFPreparedStatement *_messagesInConversationStatement;
    MFPreparedStatement *_descendantsToSplitFromConversationStatement;
    MFPreparedStatement *_descendantsOfMessageStatement;
    MFPreparedStatement *_descendantBelongsToSameConversationAsAncestorStatement;
    MFPreparedStatement *_peersToSplitFromConversationStatement;
    MFPreparedStatement *_fuzzyMessagesWithSameSubjectStatement;
    MFPreparedStatement *_candidateMessagesForFuzzyMatchingStatement;
    MFPreparedStatement *_fuzzyMessagesToSplitFromConversationStatement;
    MFPreparedStatement *_recipientsForRowIDStatement;
    MFPreparedStatement *_dateReceivedForRowIDStatement;
    MFPreparedStatement *_senderForRowIDStatement;
    MFPreparedStatement *_conversationIDForRowIDStatement;
    MFPreparedStatement *_setFuzzyAncestorForRowIDStatement;
    MFPreparedStatement *_subjectForRowIDStatement;
    MFPreparedStatement *_automatedConversationTypeForRowIDStatement;
    MFPreparedStatement *_clonesForRowIDStatement;
    MFPreparedStatement *_countOfDistinctAutomatedConversationTypesForConversationIDStatement;
    MFPreparedStatement *_maxConversationIDStatement;
    MFPreparedStatement *_messagesMissingConversationPositionStatement;
    MFPreparedStatement *_updateConversationPositionStatement;
    MFPreparedStatement *_conversationPositionOfClosestDescendantStatement;
    MFPreparedStatement *_conversationPositionOfClosestAncestorStatement;
    BOOL _hasReferences;
    BOOL _messageType;
    BOOL _didTearDown;
    BOOL _conversationsWereReset;
    BOOL _recordConversationCalculationPerformanceMetrics;
    BOOL _logConversationCalculationTrace;
    int _rootStatus;
    int _dateReceived;
    int _automatedConversationType;
    long long _rowID;
    MFLibraryMessage *_message;
    long long _subjectID;
    unsigned long long _subjectLength;
    NSData *_messageIDHeader;
    long long _conversationID;
    long long _mailbox;
    long long _senderID;
    MFSqliteHandle *_handle;
    struct sqlite3 *_db;
    NSMutableSet *_addedConversations;
    NSMutableSet *_removedConversations;
    NSMutableSet *_updatedConversations;
    NSMutableDictionary *_oldConversationIDByMessage;
    NSMutableDictionary *_currentConversationIDByMessage;
    double _messageHasReferencesTime;
    double _messageHasMessageIDTime;
    double _conversationIDOfCloneTime;
    double _conversationIDOfClosestAncestorTime;
    double _descendantsOfMessagesTime;
    double _peersOfMessagesTime;
    double _fuzzyDescendantsToSplitTime;
    double _conversationIDOfFuzzyAncestorTime;
    double _descendantsOfMessageToSplitTime;
    double _createNewConversationFromMessageTime;
    double _addMessageToConversationTime;
    double _mergeConversationsTime;
    double _calculateConversationForMessageTotalTime;
    double _conversationIDOfAutomatedMessageWithReferencesTime;
    double _conversationIDOfAutomatedMessageWithoutReferencesTime;
    double _fixupConversationPositionsTime;
    unsigned long long _cloneCount;
    unsigned long long _closestAncestorCount;
    unsigned long long _descendantsFoundCount;
    unsigned long long _peersFoundCount;
    unsigned long long _fuzzyDescendantsToSplitCount;
    unsigned long long _fuzzyAncestorCount;
    unsigned long long _descendantsToSplitCount;
    unsigned long long _newConversationCount;
    unsigned long long _addMessageToConversationCount;
    unsigned long long _conversationsSplitCount;
    unsigned long long _conversationsMergeCount;
    unsigned long long _messagesMergedCount;
    unsigned long long _fuzzyMatchesCacheHits;
    unsigned long long _fuzzyMatchesCacheMisses;
    unsigned long long _automatedMessagesWithReferencesCount;
    unsigned long long _automatedMessagesWithoutReferencesCount;
    unsigned long long _conversationPositionInvalidRangeCount;
    unsigned long long _conversationPositionInsertionPointUnavailableCount;
    unsigned long long _conversationPositionRangeNormalCount;
    unsigned long long _conversationPositionAdjustedForAncestorCount;
    unsigned long long _conversationPositionAdjustedForDescendantCount;
}

+ (void)addMessagesInDictionary:(id)arg1 toDictionary:(id)arg2;
@property(nonatomic) unsigned long long conversationPositionAdjustedForDescendantCount; // @synthesize conversationPositionAdjustedForDescendantCount=_conversationPositionAdjustedForDescendantCount;
@property(nonatomic) unsigned long long conversationPositionAdjustedForAncestorCount; // @synthesize conversationPositionAdjustedForAncestorCount=_conversationPositionAdjustedForAncestorCount;
@property(nonatomic) unsigned long long conversationPositionRangeNormalCount; // @synthesize conversationPositionRangeNormalCount=_conversationPositionRangeNormalCount;
@property(nonatomic) unsigned long long conversationPositionInsertionPointUnavailableCount; // @synthesize conversationPositionInsertionPointUnavailableCount=_conversationPositionInsertionPointUnavailableCount;
@property(nonatomic) unsigned long long conversationPositionInvalidRangeCount; // @synthesize conversationPositionInvalidRangeCount=_conversationPositionInvalidRangeCount;
@property(nonatomic) unsigned long long automatedMessagesWithoutReferencesCount; // @synthesize automatedMessagesWithoutReferencesCount=_automatedMessagesWithoutReferencesCount;
@property(nonatomic) unsigned long long automatedMessagesWithReferencesCount; // @synthesize automatedMessagesWithReferencesCount=_automatedMessagesWithReferencesCount;
@property(nonatomic) unsigned long long fuzzyMatchesCacheMisses; // @synthesize fuzzyMatchesCacheMisses=_fuzzyMatchesCacheMisses;
@property(nonatomic) unsigned long long fuzzyMatchesCacheHits; // @synthesize fuzzyMatchesCacheHits=_fuzzyMatchesCacheHits;
@property(nonatomic) unsigned long long messagesMergedCount; // @synthesize messagesMergedCount=_messagesMergedCount;
@property(nonatomic) unsigned long long conversationsMergeCount; // @synthesize conversationsMergeCount=_conversationsMergeCount;
@property(nonatomic) unsigned long long conversationsSplitCount; // @synthesize conversationsSplitCount=_conversationsSplitCount;
@property(nonatomic) unsigned long long addMessageToConversationCount; // @synthesize addMessageToConversationCount=_addMessageToConversationCount;
@property(nonatomic) unsigned long long newConversationCount; // @synthesize newConversationCount=_newConversationCount;
@property(nonatomic) unsigned long long descendantsToSplitCount; // @synthesize descendantsToSplitCount=_descendantsToSplitCount;
@property(nonatomic) unsigned long long fuzzyAncestorCount; // @synthesize fuzzyAncestorCount=_fuzzyAncestorCount;
@property(nonatomic) unsigned long long fuzzyDescendantsToSplitCount; // @synthesize fuzzyDescendantsToSplitCount=_fuzzyDescendantsToSplitCount;
@property(nonatomic) unsigned long long peersFoundCount; // @synthesize peersFoundCount=_peersFoundCount;
@property(nonatomic) unsigned long long descendantsFoundCount; // @synthesize descendantsFoundCount=_descendantsFoundCount;
@property(nonatomic) unsigned long long closestAncestorCount; // @synthesize closestAncestorCount=_closestAncestorCount;
@property(nonatomic) unsigned long long cloneCount; // @synthesize cloneCount=_cloneCount;
@property(nonatomic) double fixupConversationPositionsTime; // @synthesize fixupConversationPositionsTime=_fixupConversationPositionsTime;
@property(nonatomic) double conversationIDOfAutomatedMessageWithoutReferencesTime; // @synthesize conversationIDOfAutomatedMessageWithoutReferencesTime=_conversationIDOfAutomatedMessageWithoutReferencesTime;
@property(nonatomic) double conversationIDOfAutomatedMessageWithReferencesTime; // @synthesize conversationIDOfAutomatedMessageWithReferencesTime=_conversationIDOfAutomatedMessageWithReferencesTime;
@property(nonatomic) double calculateConversationForMessageTotalTime; // @synthesize calculateConversationForMessageTotalTime=_calculateConversationForMessageTotalTime;
@property(nonatomic) double mergeConversationsTime; // @synthesize mergeConversationsTime=_mergeConversationsTime;
@property(nonatomic) double addMessageToConversationTime; // @synthesize addMessageToConversationTime=_addMessageToConversationTime;
@property(nonatomic) double createNewConversationFromMessageTime; // @synthesize createNewConversationFromMessageTime=_createNewConversationFromMessageTime;
@property(nonatomic) double descendantsOfMessageToSplitTime; // @synthesize descendantsOfMessageToSplitTime=_descendantsOfMessageToSplitTime;
@property(nonatomic) double conversationIDOfFuzzyAncestorTime; // @synthesize conversationIDOfFuzzyAncestorTime=_conversationIDOfFuzzyAncestorTime;
@property(nonatomic) double fuzzyDescendantsToSplitTime; // @synthesize fuzzyDescendantsToSplitTime=_fuzzyDescendantsToSplitTime;
@property(nonatomic) double peersOfMessagesTime; // @synthesize peersOfMessagesTime=_peersOfMessagesTime;
@property(nonatomic) double descendantsOfMessagesTime; // @synthesize descendantsOfMessagesTime=_descendantsOfMessagesTime;
@property(nonatomic) double conversationIDOfClosestAncestorTime; // @synthesize conversationIDOfClosestAncestorTime=_conversationIDOfClosestAncestorTime;
@property(nonatomic) double conversationIDOfCloneTime; // @synthesize conversationIDOfCloneTime=_conversationIDOfCloneTime;
@property(nonatomic) double messageHasMessageIDTime; // @synthesize messageHasMessageIDTime=_messageHasMessageIDTime;
@property(nonatomic) double messageHasReferencesTime; // @synthesize messageHasReferencesTime=_messageHasReferencesTime;
@property(retain, nonatomic) NSMutableDictionary *currentConversationIDByMessage; // @synthesize currentConversationIDByMessage=_currentConversationIDByMessage;
@property(retain, nonatomic) NSMutableDictionary *oldConversationIDByMessage; // @synthesize oldConversationIDByMessage=_oldConversationIDByMessage;
@property(retain, nonatomic) NSMutableSet *updatedConversations; // @synthesize updatedConversations=_updatedConversations;
@property(retain, nonatomic) NSMutableSet *removedConversations; // @synthesize removedConversations=_removedConversations;
@property(retain, nonatomic) NSMutableSet *addedConversations; // @synthesize addedConversations=_addedConversations;
@property(nonatomic) BOOL logConversationCalculationTrace; // @synthesize logConversationCalculationTrace=_logConversationCalculationTrace;
@property(nonatomic) BOOL recordConversationCalculationPerformanceMetrics; // @synthesize recordConversationCalculationPerformanceMetrics=_recordConversationCalculationPerformanceMetrics;
@property(nonatomic) BOOL conversationsWereReset; // @synthesize conversationsWereReset=_conversationsWereReset;
@property(readonly, nonatomic) BOOL didTearDown; // @synthesize didTearDown=_didTearDown;
@property(readonly, nonatomic) struct sqlite3 *db; // @synthesize db=_db;
@property(readonly, nonatomic) MFSqliteHandle *handle; // @synthesize handle=_handle;
@property(nonatomic) int automatedConversationType; // @synthesize automatedConversationType=_automatedConversationType;
@property(nonatomic) int dateReceived; // @synthesize dateReceived=_dateReceived;
@property(nonatomic) long long senderID; // @synthesize senderID=_senderID;
@property(nonatomic) long long mailbox; // @synthesize mailbox=_mailbox;
@property(nonatomic) BOOL messageType; // @synthesize messageType=_messageType;
@property(nonatomic) long long conversationID; // @synthesize conversationID=_conversationID;
@property(retain, nonatomic) NSData *messageIDHeader; // @synthesize messageIDHeader=_messageIDHeader;
@property(nonatomic) BOOL hasReferences; // @synthesize hasReferences=_hasReferences;
@property(nonatomic) int rootStatus; // @synthesize rootStatus=_rootStatus;
@property(nonatomic) unsigned long long subjectLength; // @synthesize subjectLength=_subjectLength;
@property(nonatomic) long long subjectID; // @synthesize subjectID=_subjectID;
@property(retain, nonatomic) MFLibraryMessage *message; // @synthesize message=_message;
@property(nonatomic) long long rowID; // @synthesize rowID=_rowID;
- (id)summaryForConversation:(long long)arg1;
- (BOOL)automatedConversationTypeIsConsistentForConversation:(long long)arg1;
- (int)conversationPositionOfClosestDescendantForRowID:(long long)arg1 inConversation:(long long)arg2;
- (int)conversationPositionOfClosestAncestorForRowID:(long long)arg1 inConversation:(long long)arg2;
- (int)automatedConversationTypeForRowID:(long long)arg1;
- (id)clonesForRowID:(long long)arg1;
@property(retain, nonatomic) NSHashTable *participants;
- (id)_participantsForRowID:(long long)arg1;
- (id)_recipientsForRowID:(long long)arg1;
- (long long)conversationIDForRowID:(long long)arg1;
- (unsigned long long)subjectLengthForRowID:(long long)arg1;
- (long long)_senderForRowID:(long long)arg1;
- (int)_dateReceivedForRowID:(long long)arg1;
- (void)_setFuzzyAncestor:(long long)arg1 forRowID:(long long)arg2;
- (id)_conversationsWithFuzzyDescendantsExcludingConversations:(id)arg1;
- (id)_recursiveDescendantsInConversations:(id)arg1;
- (id)descendantsOfMessageToSplit;
- (BOOL)_descendant:(long long)arg1 belongsToSameConversationAsAncestor:(long long)arg2;
- (long long)conversationIDOfClosestDescendantExcludingConversationID:(long long)arg1;
- (id)descendantsOfMessageExcludingConversationID:(long long)arg1;
- (id)fuzzyDescendantsToSplitExcludingConversationIDs:(id)arg1;
- (unsigned long long)_messagesWithSubject:(long long)arg1 participantsByRowID:(id)arg2 conversationIDByRowID:(id)arg3 dateReceivedByRowID:(id)arg4;
- (long long)_conversationIDUsingFuzzyHeuristicOfRowID:(long long)arg1 withSubject:(long long)arg2 subjectLength:(unsigned long long)arg3 sender:(long long)arg4 rootStatus:(int)arg5 participantsByRowID:(id)arg6 conversationIDByRowID:(id)arg7 dateReceivedByRowID:(id)arg8 resultRowID:(long long *)arg9 abortOnMatchBetterThanRowID:(long long)arg10;
- (long long)_rowIDOfBestFuzzyAncestorForMessage:(long long)arg1 subjectID:(long long)arg2 subjectLength:(unsigned long long)arg3 dateReceived:(int)arg4 senderID:(long long)arg5 rootStatus:(int)arg6 participantsByRowID:(id)arg7 conversationIDByRowID:(id)arg8 dateReceivedByRowID:(id)arg9 currentFuzzyAncestor:(long long)arg10 abortOnMatchBetterThanRowID:(long long)arg11 conversationIDOfBestFuzzyAncestor:(long long *)arg12;
- (id)_messagesInConversations:(id)arg1 count:(unsigned long long *)arg2;
- (id)peersOfMessageExcludingAncestorConversationID:(long long)arg1 descendantConversationID:(long long)arg2;
- (long long)conversationIDOfAutomatedMessageWithReferencesWithRowID:(long long *)arg1;
- (long long)conversationIDOfAutomatedMessageWithoutReferences;
- (long long)conversationIDOfFuzzyAncestorWithRowID:(long long *)arg1;
- (long long)conversationIDOfClosestAncestorWithRowID:(long long *)arg1;
- (long long)conversationIDOfCloneWithRowID:(long long *)arg1;
- (BOOL)messageHasMessageID;
- (BOOL)messageHasReferences;
- (void)conversationWasUpdated:(long long)arg1;
- (void)conversationWasRemoved:(long long)arg1;
- (void)conversationWasAdded:(long long)arg1;
@property(retain, nonatomic) MFPreparedStatement *conversationPositionOfClosestAncestorStatement;
@property(retain, nonatomic) MFPreparedStatement *conversationPositionOfClosestDescendantStatement;
@property(retain, nonatomic) MFPreparedStatement *updateConversationPositionStatement;
@property(retain, nonatomic) MFPreparedStatement *messagesMissingConversationPositionStatement;
@property(retain, nonatomic) MFPreparedStatement *maxConversationIDStatement;
@property(retain, nonatomic) MFPreparedStatement *countOfDistinctAutomatedConversationTypesForConversationIDStatement;
@property(retain, nonatomic) MFPreparedStatement *clonesForRowIDStatement;
@property(retain, nonatomic) MFPreparedStatement *automatedConversationTypeForRowIDStatement;
@property(retain, nonatomic) MFPreparedStatement *subjectForRowIDStatement;
@property(retain, nonatomic) MFPreparedStatement *setFuzzyAncestorForRowIDStatement;
@property(retain, nonatomic) MFPreparedStatement *conversationIDForRowIDStatement;
@property(retain, nonatomic) MFPreparedStatement *senderForRowIDStatement;
@property(retain, nonatomic) MFPreparedStatement *dateReceivedForRowIDStatement;
@property(retain, nonatomic) MFPreparedStatement *recipientsForRowIDStatement;
@property(retain, nonatomic) MFPreparedStatement *candidateMessagesForFuzzyMatchingStatement;
@property(retain, nonatomic) MFPreparedStatement *fuzzyMessagesWithSameSubjectStatement;
@property(retain, nonatomic) MFPreparedStatement *fuzzyMessagesToSplitFromConversationStatement;
@property(retain, nonatomic) MFPreparedStatement *peersToSplitFromConversationStatement;
@property(retain, nonatomic) MFPreparedStatement *descendantBelongsToSameConversationAsAncestorStatement;
@property(retain, nonatomic) MFPreparedStatement *descendantsOfMessageStatement;
@property(retain, nonatomic) MFPreparedStatement *descendantsToSplitFromConversationStatement;
@property(retain, nonatomic) MFPreparedStatement *messagesInConversationStatement;
@property(retain, nonatomic) MFPreparedStatement *addMessageToConversationStatement;
@property(retain, nonatomic) MFPreparedStatement *peersOfMessageStatement;
@property(retain, nonatomic) MFPreparedStatement *conversationIDOfClosestAncestorStatement;
@property(retain, nonatomic) MFPreparedStatement *conversationIDOfAutomatedMessageWithoutReferencesStatement;
@property(retain, nonatomic) MFPreparedStatement *conversationIDOfAutomatedPeerWithReferencesStatement;
@property(retain, nonatomic) MFPreparedStatement *conversationIDOfAutomatedAncestorWithReferencesStatement;
@property(retain, nonatomic) MFPreparedStatement *conversationIDOfCloneStatement;
@property(retain, nonatomic) MFPreparedStatement *messageHasMessageIDStatement;
@property(retain, nonatomic) MFPreparedStatement *messageHasReferencesStatement;
- (id)description;
- (void)dealloc;
- (void)tearDown;
- (void)resetForNewRow;
- (id)initWithHandle:(id)arg1;

@end

@interface MFConversationCalculator : NSObject
{
    BOOL _logConversationCalculationPerformance;
    BOOL _logConversationCalculationTrace;
    BOOL _logConversationCalculationSubjectPrefixTrace;
    BOOL _forceConversationSplits;
    BOOL _alwaysValidateConversations;
    BOOL _recordConversationCalculationPerformanceMetrics;
}

+ (id)sharedInstance;
+ (id)allocWithZone:(struct _NSZone *)arg1;
@property(nonatomic) BOOL recordConversationCalculationPerformanceMetrics; // @synthesize recordConversationCalculationPerformanceMetrics=_recordConversationCalculationPerformanceMetrics;
@property(nonatomic) BOOL alwaysValidateConversations; // @synthesize alwaysValidateConversations=_alwaysValidateConversations;
@property(nonatomic) BOOL forceConversationSplits; // @synthesize forceConversationSplits=_forceConversationSplits;
@property(nonatomic) BOOL logConversationCalculationSubjectPrefixTrace; // @synthesize logConversationCalculationSubjectPrefixTrace=_logConversationCalculationSubjectPrefixTrace;
@property(nonatomic) BOOL logConversationCalculationTrace; // @synthesize logConversationCalculationTrace=_logConversationCalculationTrace;
@property(nonatomic) BOOL logConversationCalculationPerformance; // @synthesize logConversationCalculationPerformance=_logConversationCalculationPerformance;
- (void)updateConversationRootsWithHandle:(id)arg1 onlyForMessagesMissingRoots:(BOOL)arg2;
- (BOOL)_isRootSubjectPrefix:(id)arg1;
- (BOOL)isRootMessageSubject:(id)arg1;
- (void)_updatePrefixWithHandle:(id)arg1 withNewPrefix:(id)arg2 forMessagesWithSubject:(long long)arg3;
- (BOOL)updateSubjectPrefixesWithHandle:(id)arg1 onlyForMessagesMissingConversations:(BOOL)arg2;
- (int)_conversationPositionForMessageWithRowID:(long long)arg1 dateReceived:(int)arg2 conversationID:(long long)arg3 context:(id)arg4;
- (void)_fixupConversationPositionsForConversation:(id)arg1;
- (void)_mergeMessagesInConversations:(id)arg1 withConversation:(id)arg2;
- (void)_addMessage:(id)arg1 toConversation:(long long)arg2 withConversationPosition:(int)arg3;
- (long long)_createNewConversationFromMessage:(id)arg1;
- (void)_calculateConversationForMessage:(id)arg1;
- (void)_updateAllRowsMissingRootValueWithHandle:(id)arg1;
- (void)_updateAllRowsMissingFuzzyAncestorWithHandle:(id)arg1;
- (void)updateAllRowsMissingConversationsWithHandle:(id)arg1 conversationUserInfo:(id)arg2 conversationsWereReset:(BOOL)arg3 progressDelegate:(id)arg4;
- (void)resetConversationIDForMessages:(id)arg1 withHandle:(id)arg2;
- (void)updateConversationsIfNeededWithHandle:(id)arg1;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface MFCriterion : NSObject
{
    NSArray *_criteria;
    NSString *_expression;
    NSString *_uniqueId;
    NSString *_cachedAccountURLForSyncConflictResolution;
    BOOL _dateIsRelative;
    BOOL _allCriteriaMustBeSatisfied;
    BOOL _originatedFromSearchSuggestion;
    int _specialMailboxType;
    NSString *_name;
    NSString *_criterionIdentifier;
    long long _criterionType;
    long long _qualifier;
    long long _dateUnits;
    unsigned long long _knownLimit;
}

+ (BOOL)criteria:(id)arg1 areEqualToCriteria:(id)arg2;
+ (id)stringForCriterionType:(long long)arg1;
+ (long long)criterionTypeForString:(id)arg1;
+ (id)queryScopePathForMailbox:(id)arg1;
+ (void)logSpotlightStatus;
+ (BOOL)logCriterionConversionErrors;
+ (void)setLogSpotlightCallbacks:(BOOL)arg1;
+ (BOOL)logSpotlightCallbacks;
+ (void)setLogSpotlightQueries:(BOOL)arg1;
+ (BOOL)logSpotlightQueries;
+ (BOOL)searchUsingOnlySpotlight;
+ (id)compoundCriterionWithCriteria:(id)arg1;
+ (id)defaultsArrayFromCriteria:(id)arg1;
+ (id)criteriaFromDefaultsArray:(id)arg1 removingRecognizedKeys:(BOOL)arg2;
+ (id)criteriaFromDefaultsArray:(id)arg1;
@property BOOL originatedFromSearchSuggestion; // @synthesize originatedFromSearchSuggestion=_originatedFromSearchSuggestion;
@property unsigned long long knownLimit; // @synthesize knownLimit=_knownLimit;
@property int specialMailboxType; // @synthesize specialMailboxType=_specialMailboxType;
@property BOOL allCriteriaMustBeSatisfied; // @synthesize allCriteriaMustBeSatisfied=_allCriteriaMustBeSatisfied;
@property BOOL dateIsRelative; // @synthesize dateIsRelative=_dateIsRelative;
@property long long dateUnits; // @synthesize dateUnits=_dateUnits;
@property long long qualifier; // @synthesize qualifier=_qualifier;
@property(copy) NSString *expression; // @synthesize expression=_expression;
@property(copy) NSString *name; // @synthesize name=_name;
- (long long)smartMailboxesVersion;
- (long long)version;
- (BOOL)containsJunkMailboxCriterion;
- (BOOL)isEqualToCriterion:(id)arg1;
- (BOOL)isValid:(id *)arg1 options:(unsigned int)arg2;
- (id)description;
- (id)descriptionWithDepth:(unsigned long long)arg1;
@property(copy, nonatomic) NSArray *criteria; // @synthesize criteria=_criteria;
- (id)simplifiedCriterion;
- (id)simplifyOnce;
- (id)stringForRuleQualifier:(long long)arg1;
- (long long)ruleQualifierForString:(id)arg1;
- (id)utiForMessageAttachmentType:(BOOL)arg1;
- (id)_searchTermForExpression:(id)arg1 withQualifer:(long long)arg2 exactMatch:(BOOL)arg3;
- (id)_comparisonOperatorForQualifier:(long long)arg1;
- (id)_spotlightQueryStringForCompoundCriterion;
- (id)_spotlightStringForHeaderQueryString:(id)arg1 withSpotlightAttribute:(id)arg2;
- (id)escapedString:(id)arg1;
- (id)_spotlightQueryStringForAnyRecipientCriterion;
- (id)_spotlightQueryStringForHeaderCriterion;
- (id)_spotlightQueryStringForContainsAttachmentsCriterion;
- (id)_spotlightQueryStringForAttachmentTypeCriterion;
- (id)_spotlightQueryStringForBodyCriterion;
- (id)_spotlightDateQueryStringForAttribute:(id)arg1;
- (id)_spotlightQueryStringForPriorityCriterion;
- (id)_spotlightQueryStringForFlagCriterion;
- (id)_spotlightQueryStringForFlaggedStatusCriterion;
- (id)_spotlightQueryStringForGroupOrVIPSendersCriterion;
- (id)_spotlightQueryStringForAnyAttachmentCriterion;
- (id)_spotlightQueryStringForAccountCriterion;
- (id)_spotlightQueryStringForGmailLabelCriterion;
- (id)_spotlightQueryStringForMailboxCriterion;
- (id)_spotlightQueryStringForNotInAJunkOrTrashMailboxCriterion;
- (id)_spotlightQueryStringForInASpecialMailboxCriterionWithQualifier:(long long)arg1;
- (id)_spotlightQueryStringForMessageID;
- (id)spotlightQueryString;
- (BOOL)_isCompoundCriterionSpotlightCriterion;
- (BOOL)isSpotlightCriterion;
- (BOOL)isSpotlightOnlyCriterion;
- (BOOL)containsMailboxCriterion;
- (BOOL)containsWhereFromsCriterion;
- (BOOL)containsSpotlightOnlyCriterion;
- (BOOL)containsSpotlightCriterion;
- (id)_qualifierString;
@property(copy) NSString *criterionIdentifier; // @synthesize criterionIdentifier=_criterionIdentifier;
- (void)_setCriterionIdentifier:(id)arg1;
@property long long criterionType; // @synthesize criterionType=_criterionType;
- (BOOL)hasExpression;
- (id)dictionaryRepresentation;
- (id)initWithDictionary:(id)arg1;
- (id)initWithCriterion:(id)arg1 expression:(id)arg2;
- (id)init;
- (id)initWithDictionary:(id)arg1 andRemoveRecognizedKeysIfMutable:(BOOL)arg2;
- (void)dealloc;
- (id)compoundCriterionBySplittingExpression;
- (id)convertToGmailLabelCriterionIfNeeded;
- (unsigned long long)bestBaseTable;
- (id)SQLExpressionWithTables:(unsigned long long *)arg1 baseTable:(unsigned long long)arg2;
- (id)criterionForSpotlight;
- (id)criterionForSQLIgnoringGmail;
- (id)criterionForSQL;
- (id)criterionValueForNotEqualRelativeDates:(long long *)arg1;
- (id)criterionExpressionForEqualRelativeDates:(CDStruct_c53ccb4e *)arg1 depth:(unsigned long long)arg2 enclosingSmartMailboxes:(id)arg3;
- (BOOL)isExpressibleInTigerSchema;
- (id)SQLExpressionWithContext:(CDStruct_c53ccb4e *)arg1 depth:(unsigned long long)arg2 enclosingSmartMailboxes:(id)arg3;
- (BOOL)hasNumberCriterion;
- (id)criterionByMergingSpotlightCriteria;
- (id)fixOnceWithExpandedSmartMailboxes:(id)arg1 forSpotlight:(BOOL)arg2;
- (id)criterionForSearchWithExpandedSmartMailboxes:(id)arg1 forSpotlight:(BOOL)arg2 convertingGmailCriteria:(BOOL)arg3;
- (id)targetSmartMailbox;

@end

@interface MFCrossProcessLock : NSObject <NSLocking>
{
    NSString *_identifier;
    NSMachPort *_port;
    NSLock *_lock;
    long long _lockCount;
}

+ (id)defaultMailCrossProcessLock;
- (id)description;
- (BOOL)lockBeforeDate:(id)arg1;
- (BOOL)tryLock;
- (void)unlock;
- (void)lock;
- (void)dealloc;
- (id)initWithIdentifier:(id)arg1;

@end

@interface MFDatabaseRecoverer : NSObject
{
    NSString *_path;
    long long _type;
    NSCondition *_analysisCondition;
    long long _analysisResult;
}

+ (BOOL)moveDatabaseFromPath:(id)arg1 toPath:(id)arg2;
+ (id)moveDatabaseToUniquePath:(id)arg1;
@property long long analysisResult; // @synthesize analysisResult=_analysisResult;
@property(retain) NSCondition *analysisCondition; // @synthesize analysisCondition=_analysisCondition;
@property long long type; // @synthesize type=_type;
@property(retain) NSString *path; // @synthesize path=_path;
- (void)_moveToOriginalPath:(id)arg1;
- (id)_moveToUniquePath;
- (void)_removeLocks;
- (void)recover;
- (void)removeLockFile;
- (BOOL)lockFileFound;
- (BOOL)aRemoteApplicationIsAccessingTheDatabase;
- (BOOL)fileLocked;
- (void)analyzeBusyCondition;
- (void)_analyzeBusyCondition;
- (void)dealloc;
- (id)init;
- (id)initWithPath:(id)arg1 type:(long long)arg2;

@end

@interface MFDefaults : NSObject
{
}

+ (id)defaultNameForFlagColor:(BOOL)arg1;
+ (unsigned long long)deferredPreferredWindowBackingLocation;
+ (unsigned long long)preferredWindowBackingLocation;
+ (void)setPreferredWindowBackingLocation:(unsigned long long)arg1;
+ (void)resetLocaleCache;
+ (id)localeCache;
+ (void)setupLoggingDefaults;
+ (id)sharedInstance;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (void)initialize;
- (BOOL)synchronize;
- (long long)integerForKey:(id)arg1;
- (BOOL)boolForKey:(id)arg1;
- (void)setBool:(BOOL)arg1 forKey:(id)arg2;
- (id)objectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (void)removeObjectForKey:(id)arg1;
- (id)stringForKey:(id)arg1;
- (id)dictionaryForKey:(id)arg1;
- (id)unrenderedUserStyleSheet;
- (id)userStyleSheetURLIsForCompose:(BOOL)arg1;
- (id)todosMailbox;
- (id)trashMailboxName;
- (id)notesMailbox;
- (id)draftsMailbox;
- (id)archiveMailbox;
- (id)adjustAccountPathForV2:(id)arg1;
- (id)_adjustPathForV2:(id)arg1 usingPrefix:(id)arg2;
- (id)defaultMailDirectory;
- (id)mailDataDirectoryName;
- (id)mailDataDirectory;
- (id)mailDataSupportDirectory;
- (id)supportDirectory;
- (void)_setSupportDirectoryForTesting:(id)arg1;
- (id)nonContainerizedMailRootDirectory;
- (id)baseMailDirectory;
- (id)unresolvedBaseMailDirectory;
- (id)tildeUnresolvedBaseMailDirectory;
- (id)mailAccountDirectory;
- (BOOL)mf_v1Layout;
- (void)mf_resetV1Layout;
- (BOOL)_calculateShouldUseV1Layout;
- (void)setComposeMode:(long long)arg1;
- (long long)composeMode;
- (void)setHeaderDetailLevel:(long long)arg1;
- (long long)headerDetailLevel;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface MFDeliveryAccount : MFAccount
{
}

+ (id)accountWithHostname:(id)arg1 username:(id)arg2 lookForExistingAccounts:(BOOL)arg3 addToDeliveryAccountsIfNeeded:(BOOL)arg4;
+ (id)accountWithHostname:(id)arg1 username:(id)arg2;
+ (id)existingAccountWithHostname:(id)arg1 username:(id)arg2;
+ (id)accountForHeaders:(id)arg1;
+ (id)accountWithWhichToSendMessage:(id)arg1;
+ (id)accountWithDomain:(id)arg1;
+ (id)_accountFromCollection:(id)arg1 withIdentifier:(id)arg2;
+ (id)accountWithIdentifier:(id)arg1;
+ (id)accountWithUniqueId:(id)arg1;
+ (id)_identifierWithHostname:(id)arg1 username:(id)arg2;
+ (void)saveAccountInfoToDefaults;
+ (void)_postDeliveryAccountsHaveChanged;
+ (void)unregisterDynamicAccount:(id)arg1;
+ (void)registerDynamicAccount:(id)arg1;
+ (void)removeDeliveryAccount:(id)arg1;
+ (void)sortDeliveryAccountsByUniqueID:(id)arg1;
+ (void)insertObjectInDeliveryAccounts:(id)arg1 atIndex:(unsigned long long)arg2;
+ (void)addDeliveryAccount:(id)arg1;
+ (void)setDeliveryAccounts:(id)arg1;
+ (id)deliveryAccounts;
+ (id)_deliveryAccountsIncludingUnknownTypes;
+ (void)reloadDeliveryAccounts;
+ (void)initialize;
- (id)remoteMailAccountsEmployedBy;
- (void)setMaximumMessageBytes:(unsigned long long)arg1;
- (unsigned long long)maximumMessageBytes;
- (void)setShouldUseAuthentication:(BOOL)arg1;
- (BOOL)shouldUseAuthentication;
- (id)identifier;
- (id)displayName;
- (void)setAssociatedAccount:(id)arg1;
- (id)associatedAccount;
- (BOOL)isDynamic;
- (Class)delivererClass;
- (void)_setAccountInfo:(id)arg1;

@end

@interface MFEWSAccount : MFRemoteStoreAccount
{
    MFEWSConnection *_connection;
    MFEWSDeliveryAccount *_ewsDeliveryAccount;
    NSMutableDictionary *_folderIdsToMailboxes;
    id _connectionLock;
    id _folderHierarchySyncLock;
    NSOperationQueue *_ewsQueue;
    BOOL _useExternalURL;
    MFEWSGateway *_gateway;
    NSDictionary *_distinguishedFolderIdsAndMailboxTypes;
    double _lastFullFetchDuration;
    double _lastFullFetchTime;
    NSUUID *_messageTracerUUID;
    NSString *_syncIssuesEntryID;
    long long _externalAudienceType;
    NSTimer *_autodiscoveryTimer;
    NSOperationQueue *_autodiscoverQueue;
}

+ (void)resetAllFolderHierarchySyncStates;
+ (id)existingAccountFromMailWithRootFolderId:(id)arg1;
+ (id)_contactsAccountWithRootFolderId:(id)arg1;
+ (BOOL)contactsAccountExistsWithRootFolderId:(id)arg1;
+ (BOOL)contactsAccountExistsForHostname:(id)arg1 username:(id)arg2;
+ (id)_contactsAccountForHostname:(id)arg1 username:(id)arg2;
+ (id)_calendarAccountWithRootFolderId:(id)arg1;
+ (BOOL)calendarAccountExistsWithRootFolderId:(id)arg1;
+ (BOOL)calendarAccountExistsForHostname:(id)arg1 username:(id)arg2;
+ (id)_calendarAccountForHostname:(id)arg1 username:(id)arg2;
+ (id)keyPathsForValuesAffectingExternalConnectionURL;
+ (id)keyPathsForValuesAffectingInternalConnectionURL;
+ (id)keyPathsForValuesAffecting_URLExternalConnectionScheme;
+ (id)keyPathsForValuesAffecting_URLInternalConnectionScheme;
+ (id)defaultPathNameForAccount;
+ (id)accountTypeString;
@property(readonly, nonatomic) NSOperationQueue *autodiscoverQueue; // @synthesize autodiscoverQueue=_autodiscoverQueue;
@property(retain) NSTimer *autodiscoveryTimer; // @synthesize autodiscoveryTimer=_autodiscoveryTimer;
@property long long externalAudienceType; // @synthesize externalAudienceType=_externalAudienceType;
@property(retain) NSString *syncIssuesEntryID; // @synthesize syncIssuesEntryID=_syncIssuesEntryID;
@property BOOL useExternalURL; // @synthesize useExternalURL=_useExternalURL;
@property(retain) NSUUID *messageTracerUUID; // @synthesize messageTracerUUID=_messageTracerUUID;
@property double lastFullFetchTime; // @synthesize lastFullFetchTime=_lastFullFetchTime;
@property double lastFullFetchDuration; // @synthesize lastFullFetchDuration=_lastFullFetchDuration;
@property(retain) NSDictionary *distinguishedFolderIdsAndMailboxTypes; // @synthesize distinguishedFolderIdsAndMailboxTypes=_distinguishedFolderIdsAndMailboxTypes;
@property(retain, nonatomic) MFEWSGateway *gateway; // @synthesize gateway=_gateway;
- (void)messageTraceEWSParameters;
- (BOOL)_setEWSError:(id)arg1;
- (id)_loadFolderIdForMailbox:(id)arg1;
- (void)_clearFolderId:(id)arg1 forMailbox:(id)arg2;
- (void)_saveFolderId:(id)arg1 forMailbox:(id)arg2;
- (void)_setMailbox:(id)arg1 forFolderId:(id)arg2;
- (id)_mailboxForFolderId:(id)arg1;
- (void)_setupMailbox:(id)arg1 forFolderId:(id)arg2;
- (void)updateEWSOfflineIdsToRealIds:(id)arg1 forFolders:(BOOL)arg2;
- (id)deletedEWSIdStringsFromStrings:(id)arg1 inFolderWithIdString:(id)arg2;
- (void)undeleteMessagesWithEWSItemIdStrings:(id)arg1 fromFolderWithIdString:(id)arg2;
- (void)deleteEWSItemsWithIdStrings:(id)arg1 fromFolderWithIdString:(id)arg2;
- (void)deleteMailboxForEWSFolderIdString:(id)arg1;
- (void)updateMailboxForEWSFolder:(id)arg1;
- (BOOL)_isSyncIssuesFolder:(id)arg1;
- (void)createMailboxFromEWSFolder:(id)arg1;
- (id)mailboxNameForFolderIdString:(id)arg1;
- (void)messageDeliveryDidFinish:(id)arg1;
- (id)remoteTaskQueue;
- (BOOL)_redoAutodiscoverySynchronously;
- (void)_kickOffReautodiscovery:(id)arg1;
@property BOOL isReautodiscoveryDisabled;
- (void)_handleConnectionError:(id)arg1 isUnsupportedVersionError:(char *)arg2 shouldRedoAutodiscovery:(char *)arg3;
- (BOOL)_shouldHideMailbox:(id)arg1 withType:(int)arg2;
- (void)setUserOofSettingsState:(long long)arg1 internalReply:(id)arg2 externalReply:(id)arg3 startTime:(id)arg4 endTime:(id)arg5;
- (void)getUserOofSettings;
- (BOOL)_isSameAsCalGroup:(id)arg1;
@property(retain) MFEWSConnection *connection;
@property(readonly) NSURL *connectionURL;
- (void)_setConnectionURL:(id)arg1 isExternal:(BOOL)arg2;
- (id)_connectionURL:(BOOL)arg1;
@property NSURL *externalConnectionURL;
@property NSURL *internalConnectionURL;
@property(retain) NSURL *lastUsedAutodiscoverURL;
@property(retain) NSString *rootFolderId;
@property(retain) NSString *folderHierarchySyncState;
- (void)_setServerPath:(id)arg1 accountInfoKey:(id)arg2;
- (id)_serverPathWithAccountInfoKey:(id)arg1;
@property(copy) NSString *externalServerPath;
@property(copy) NSString *internalServerPath;
@property BOOL externalUsesSSL;
@property long long externalPortNumber;
- (void)setExternalHostname:(id)arg1;
- (id)externalHostname;
- (BOOL)storeJunkOnServerDefault;
- (id)_specialMailboxWithType:(int)arg1 create:(BOOL)arg2 isLocal:(BOOL)arg3;
- (id)dynamicDeliveryAccount;
- (void)setDeliveryAccount:(id)arg1;
- (id)deliveryAccount;
- (id)_folderNameForMailboxDisplayName:(id)arg1;
- (id)_mailboxDisplayNameForFolderName:(id)arg1;
- (id)validNameForMailbox:(id)arg1 fromDisplayName:(id)arg2 error:(id *)arg3;
- (BOOL)supportsSlashesInMailboxName;
- (BOOL)_deleteMailbox:(id)arg1 reflectToServer:(BOOL)arg2;
- (BOOL)canMailboxBeDeleted:(id)arg1;
- (BOOL)renameMailbox:(id)arg1 newDisplayName:(id)arg2 parent:(id)arg3;
- (BOOL)canMailboxBeRenamed:(id)arg1;
- (id)_createMailboxWithParent:(id)arg1 displayName:(id)arg2 localizedDisplayName:(id)arg3 type:(int)arg4;
- (id)createMailboxWithParent:(id)arg1 displayName:(id)arg2 localizedDisplayName:(id)arg3;
- (void)setEmailAddresses:(id)arg1;
- (BOOL)_readMailboxCache;
- (void)_setSpecialMailboxRelativePath:(id)arg1 forType:(int)arg2;
- (id)_specialMailboxRelativePathForType:(int)arg1;
- (id)_defaultSpecialMailboxRelativePathForType:(int)arg1;
- (BOOL)_setChildren:(id)arg1 forMailbox:(id)arg2;
- (void)_synchronouslyLoadListingForParent:(id)arg1;
- (BOOL)_synchronizeMailboxListHighPriority:(BOOL)arg1;
- (BOOL)_supportsMailboxListInitialization;
@property(readonly) unsigned long long maximumConcurrentSyncFolderOperationCount;
- (void)_synchronizeMailboxesSynchronously;
- (BOOL)_shouldSynchronizeMailbox:(id)arg1;
- (void)synchronizeAllMailboxes;
- (void)fetchSynchronouslyIsAuto:(id)arg1;
- (void)respondToHostBecomingReachable;
- (BOOL)deleteConvertsStoreToFolder;
- (id)primaryMailbox;
- (void)setShouldMoveDeletedMessagesToTrash:(BOOL)arg1;
- (BOOL)shouldMoveDeletedMessagesToTrash;
- (id)mailboxPathExtension;
- (BOOL)defaultShouldShowNotesInInbox;
- (BOOL)supportsRichTextNotes;
- (Class)storeClassForMailbox:(id)arg1;
- (id)_URLExternalConnectionScheme;
- (id)_URLInternalConnectionScheme;
- (id)_URLPersistenceScheme;
- (void)setIsOffline:(BOOL)arg1;
- (void)releaseAllConnections;
- (id)authSchemesForConnection:(id)arg1;
- (BOOL)canAuthenticateWithScheme:(id)arg1 connection:(id)arg2;
- (BOOL)connectAndAuthenticate:(id)arg1;
- (id)authenticatedConnection;
- (id)newConnectedConnectionDiscoveringBestSettings:(BOOL)arg1 withConnectTimeout:(double)arg2 readWriteTimeout:(double)arg3;
- (void)_setPassword:(id)arg1 persistence:(unsigned long long)arg2;
- (id)_passwordWithPersistence:(unsigned long long)arg1;
- (void)setSessionPassword:(id)arg1;
- (id)sessionPassword;
- (void)setPermanentPassword:(id)arg1;
- (id)permanentPassword;
- (void)setPortNumber:(long long)arg1;
- (void)setUsesSSL:(BOOL)arg1;
- (id)defaultsDictionary;
- (void)_setAccountInfo:(id)arg1;
- (void)setPreferredAuthScheme:(id)arg1;
- (id)preferredAuthScheme;
- (void)setDomain:(id)arg1;
- (id)domain;
- (void)setSecurityLayerType:(long long)arg1;
- (long long)securityLayerType;
- (BOOL)requiresAuthentication;
- (void *)keychainProtocol;
- (long long)defaultSecurePortNumber;
- (long long)defaultPortNumber;
- (id)standardSSLPorts;
- (id)standardPorts;
- (id)iaServiceType;
- (id)syncableURLString;
- (id)_infoForMatchingURL:(id)arg1;
- (void)dealloc;
- (id)initWithAccountInfo:(id)arg1;

@end

@interface MFEWSConnection : MCConnection <EWSExchangeServiceBindingDelegate>
{
    EWSExchangeServiceBinding *_binding;
}

@property(retain) EWSExchangeServiceBinding *binding; // @synthesize binding=_binding;
- (void)exchangeServiceBinding:(id)arg1 didReceiveCertificateError:(id)arg2;
- (void)exchangeServiceBinding:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (void)exchangeServiceBinding:(id)arg1 didCancelAuthenticationChallenge:(id)arg2;
- (void)disconnectWithError:(id)arg1;
- (id)_sendMessage:(id)arg1 error:(id *)arg2;
- (void)_handleServerBusyError:(id)arg1;
- (id)sendMessage:(id)arg1 forRequest:(id)arg2;
- (void)disconnect;
- (void)quit;
- (BOOL)isValid;
- (BOOL)reconnect;
- (void)_setupConnectionErrorForMonitorWithPort:(long long)arg1 usingSSL:(BOOL)arg2;
- (id)_fetchRootFolderId:(id *)arg1;
- (id)_connectAndAuthenticateDiscoveringBestSettings:(BOOL)arg1;
- (BOOL)authenticate;
- (BOOL)connectDiscoveringBestSettings:(BOOL)arg1;
@property MFEWSAccount *account;
- (void)dealloc;

@end

@interface MFEWSCopyItemsRequestOperation : MFEWSRequestOperation <NSCoding>
{
    NSString *_sourceEWSFolderIdString;
    NSString *_destinationEWSFolderIdString;
    NSArray *_EWSItemIds;
    NSArray *_offlineCreatedEWSItemIdStrings;
}

+ (Class)classForResponse;
@property(copy) NSArray *offlineCreatedEWSItemIdStrings; // @synthesize offlineCreatedEWSItemIdStrings=_offlineCreatedEWSItemIdStrings;
@property(readonly, nonatomic) NSArray *EWSItemIds; // @synthesize EWSItemIds=_EWSItemIds;
@property(readonly, nonatomic) NSString *destinationEWSFolderIdString; // @synthesize destinationEWSFolderIdString=_destinationEWSFolderIdString;
@property(readonly, nonatomic) NSString *sourceEWSFolderIdString; // @synthesize sourceEWSFolderIdString=_sourceEWSFolderIdString;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)setupOfflineResponse;
- (id)prepareRequest;
- (id)activityString;
- (void)_ewsCopyItemsRequestOperationCommonInitWithEWSItemIds:(id)arg1 sourceIdString:(id)arg2 destinationIdString:(id)arg3;
- (void)dealloc;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithEWSItemIds:(id)arg1 sourceIdString:(id)arg2 destinationIdString:(id)arg3 gateway:(id)arg4 errorHandler:(id)arg5;

@end

@interface MFEWSCopyItemsResponseOperation : MFEWSResponseOperation
{
    unsigned long long _expectedResponseCount;
    NSArray *_newEWSItemIdStrings;
}

@property(copy) NSArray *destinationEWSItemIdStrings; // @synthesize destinationEWSItemIdStrings=_newEWSItemIdStrings;
- (void)executeOperation;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)dealloc;

@end

@interface MFEWSCreateEventReplyRequestOperation : MFEWSCreateItemRequestOperation
{
    BOOL _messageResponseType;
    NSString *_messageMeetingItemIdString;
    MFEWSGetItemsResponseOperation *_getItemsResponse;
}

+ (Class)classForResponse;
@property(readonly, nonatomic) MFEWSGetItemsResponseOperation *getItemsResponse; // @synthesize getItemsResponse=_getItemsResponse;
@property(readonly, nonatomic) BOOL messageResponseType; // @synthesize messageResponseType=_messageResponseType;
@property(readonly, nonatomic) NSString *messageMeetingItemIdString; // @synthesize messageMeetingItemIdString=_messageMeetingItemIdString;
- (id)prepareRequest;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFolderIdString:(id)arg1 messageType:(BOOL)arg2 disposition:(long long)arg3 gateway:(id)arg4 errorHandler:(id)arg5;
- (void)_ewsCreateEventReplyRequestOperationCommonInitWithItemIdString:(id)arg1 responseType:(BOOL)arg2;
- (id)initWithItemIdString:(id)arg1 folderIdString:(id)arg2 messageType:(BOOL)arg3 responseType:(BOOL)arg4 disposition:(long long)arg5 gateway:(id)arg6 errorHandler:(id)arg7;

@end

@interface MFEWSCreateEventReplyResponseOperation : MFEWSCreateItemResponseOperation
{
}

- (void)executeOperation;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;

@end

@interface MFEWSCreateFolderRequestOperation : MFEWSRequestOperation <NSCoding>
{
    int _mailboxType;
    NSString *_parentEWSFolderIdString;
    NSString *_offlineCreatedEWSFolderIdString;
    NSString *_folderName;
}

+ (Class)classForResponse;
@property(readonly, nonatomic) int mailboxType; // @synthesize mailboxType=_mailboxType;
@property(readonly, nonatomic) NSString *folderName; // @synthesize folderName=_folderName;
@property(copy) NSString *offlineCreatedEWSFolderIdString; // @synthesize offlineCreatedEWSFolderIdString=_offlineCreatedEWSFolderIdString;
@property(readonly, nonatomic) NSString *parentEWSFolderIdString; // @synthesize parentEWSFolderIdString=_parentEWSFolderIdString;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)setupOfflineResponse;
- (id)prepareRequest;
- (BOOL)isFolderRequest;
- (id)activityString;
- (id)copyWithUpdatedNameCount:(unsigned long long)arg1;
- (void)dealloc;
- (void)_ewsCreateFolderRequestOperationCommonInitWithParentFolderIdString:(id)arg1 name:(id)arg2 mailboxType:(int)arg3;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithParentEWSFolderIdString:(id)arg1 name:(id)arg2 mailboxType:(int)arg3 gateway:(id)arg4;

@end

@interface MFEWSCreateFolderResponseOperation : MFEWSResponseOperation
{
    NSString *_createdFolderId;
}

@property(copy) NSString *createdFolderId; // @synthesize createdFolderId=_createdFolderId;
- (void)executeOperation;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)dealloc;

@end

@interface MFEWSCreateItemRequestOperation : MFEWSRequestOperation <NSCoding>
{
    BOOL _messageType;
    BOOL _wroteOfflineData;
    NSString *_EWSFolderIdString;
    long long _disposition;
    NSString *_offlineCreatedEWSItemIdString;
}

+ (Class)classForResponse;
@property BOOL wroteOfflineData; // @synthesize wroteOfflineData=_wroteOfflineData;
@property(retain) NSString *offlineCreatedEWSItemIdString; // @synthesize offlineCreatedEWSItemIdString=_offlineCreatedEWSItemIdString;
@property(readonly, nonatomic) long long disposition; // @synthesize disposition=_disposition;
@property(readonly, nonatomic) BOOL messageType; // @synthesize messageType=_messageType;
@property(readonly, nonatomic) NSString *EWSFolderIdString; // @synthesize EWSFolderIdString=_EWSFolderIdString;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)setupOfflineResponse;
- (id)activityString;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)_ewsCreateItemRequestOperationCommonInitWithFolderIdString:(id)arg1 messageType:(BOOL)arg2 disposition:(long long)arg3;
- (id)initWithFolderIdString:(id)arg1 messageType:(BOOL)arg2 disposition:(long long)arg3 gateway:(id)arg4 errorHandler:(id)arg5;

@end

@interface MFEWSCreateItemResponseOperation : MFEWSResponseOperation
{
    NSString *_itemId;
}

@property(copy) NSString *itemId; // @synthesize itemId=_itemId;
- (void)executeOperation;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)dealloc;

@end

@interface MFEWSCreateMessageRequestOperation : MFEWSCreateItemRequestOperation <NSCoding>
{
    unsigned int _flags;
    MCMessage *_message;
    NSData *_data;
    NSString *_sender;
    NSString *_existingItemIdString;
    NSDictionary *_recipientsByHeaderKey;
    MFEWSGetItemsResponseOperation *_getItemsResponse;
}

@property(readonly, nonatomic) MFEWSGetItemsResponseOperation *getItemsResponse; // @synthesize getItemsResponse=_getItemsResponse;
@property(readonly, nonatomic) NSDictionary *recipientsByHeaderKey; // @synthesize recipientsByHeaderKey=_recipientsByHeaderKey;
@property(copy, nonatomic) NSString *existingItemIdString; // @synthesize existingItemIdString=_existingItemIdString;
@property(readonly, nonatomic) NSString *sender; // @synthesize sender=_sender;
@property(readonly, nonatomic) unsigned int flags; // @synthesize flags=_flags;
@property(readonly, nonatomic) NSData *data; // @synthesize data=_data;
@property(readonly, nonatomic) MCMessage *message; // @synthesize message=_message;
- (id)prepareRequest;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFolderIdString:(id)arg1 messageType:(BOOL)arg2 disposition:(long long)arg3 gateway:(id)arg4 errorHandler:(id)arg5;
- (void)_ewsCreateMessageRequestOperationCommonInitWithMessage:(id)arg1 data:(id)arg2 flags:(unsigned int)arg3 existingItemIdString:(id)arg4 sender:(id)arg5 recipientsByHeaderKey:(id)arg6;
- (id)initWithMessage:(id)arg1 data:(id)arg2 folderIdString:(id)arg3 messageType:(BOOL)arg4 flags:(unsigned int)arg5 existingItemIdString:(id)arg6 sender:(id)arg7 recipientsByHeaderKey:(id)arg8 disposition:(long long)arg9 gateway:(id)arg10 errorHandler:(id)arg11;

@end

@interface MFEWSDeleteFolderRequestOperation : MFEWSRequestOperation <NSCoding>
{
    NSString *_folderIdString;
}

+ (Class)classForResponse;
@property(readonly, nonatomic) NSString *folderIdString; // @synthesize folderIdString=_folderIdString;
- (void)setupOfflineResponse;
- (id)prepareRequest;
- (BOOL)isFolderRequest;
- (id)activityString;
- (void)dealloc;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)_ewsDeleteFolderRequestOperationCommonInitWithEWSFolderIdString:(id)arg1;
- (id)initWithEWSFolderIdString:(id)arg1 gateway:(id)arg2;

@end

@interface MFEWSDeleteItemsRequestOperation : MFEWSRequestOperation <NSCoding>
{
    NSArray *_EWSItemIds;
    NSString *_folderIdString;
}

+ (Class)classForResponse;
@property(readonly, nonatomic) NSString *folderIdString; // @synthesize folderIdString=_folderIdString;
@property(readonly, nonatomic) NSArray *EWSItemIds; // @synthesize EWSItemIds=_EWSItemIds;
- (void)setupOfflineResponse;
- (id)prepareRequest;
- (id)activityString;
- (void)_ewsDeleteItemsRequestOperationCommonInitWithEWSItemIds:(id)arg1 folderIdString:(id)arg2;
- (void)dealloc;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithEWSItemIds:(id)arg1 folderIdString:(id)arg2 gateway:(id)arg3;

@end

@interface MFEWSDeliverer : MFMessageDeliverer <MFEWSErrorHandler>
{
    MCError *_error;
}

@property(retain) MCError *error; // @synthesize error=_error;
- (void)handleEWSError:(id)arg1;
- (long long)deliverSynchronously;
- (id)headersForDelivery;
- (Class)deliveryClass;
- (void)dealloc;

@end

@interface MFEWSDeliveryAccount : MFDeliveryAccount
{
    MFEWSAccount *_ewsAccount;
    BOOL _stripsFromHeaderWhenSending;
}

+ (id)keyPathsForValuesAffectingValueForKey:(id)arg1;
@property BOOL stripsFromHeaderWhenSending; // @synthesize stripsFromHeaderWhenSending=_stripsFromHeaderWhenSending;
- (id)remoteMailAccountsEmployedBy;
- (void)setShouldUseAuthentication:(BOOL)arg1;
- (BOOL)shouldUseAuthentication;
- (void)setAssociatedAccount:(id)arg1;
- (id)associatedAccount;
- (BOOL)isDynamic;
- (Class)delivererClass;
- (id)identifier;
- (void)setValidationRequired:(BOOL)arg1;
- (BOOL)validationRequired;
- (BOOL)shouldRetryConnectionWithoutCertificateCheckingAfterError:(id)arg1 host:(id)arg2 didPromptUser:(char *)arg3;
- (BOOL)connectAndAuthenticate:(id)arg1;
- (id)authenticatedConnection;
- (id)newConnectedConnectionDiscoveringBestSettings:(BOOL)arg1 withConnectTimeout:(double)arg2 readWriteTimeout:(double)arg3;
- (void)validateConnections;
- (id)accountTypeString;
- (id)subscriptionURLLabel;
- (id)subscriptionURL;
- (id)supportURLLabel;
- (id)supportURL;
- (BOOL)isValid;
- (BOOL)canGoOffline;
- (void)setIsWillingToGoOnline:(BOOL)arg1;
- (BOOL)isWillingToGoOnline;
- (void)setIsOffline:(BOOL)arg1;
- (BOOL)isOffline;
- (long long)defaultSecurePortNumber;
- (long long)defaultPortNumber;
- (id)standardSSLPorts;
- (id)standardPorts;
- (BOOL)requiresAuthentication;
- (id)saslProfileName;
- (void)setAccountInfo:(id)arg1;
- (id)accountInfo;
- (id)uniqueId;
- (void)setISPAccountID:(id)arg1;
- (id)ISPAccountID;
- (void)setPreferredAuthScheme:(id)arg1;
- (id)preferredAuthScheme;
- (void)setDomain:(id)arg1;
- (id)domain;
- (void)setSecurityLayerType:(long long)arg1;
- (long long)securityLayerType;
- (void)setHostname:(id)arg1;
- (id)hostname;
- (void)setUsesSSL:(BOOL)arg1;
- (BOOL)usesSSL;
- (void)setPortNumber:(long long)arg1;
- (long long)portNumber;
- (id)appleAuthenticationToken;
- (id)applePersonID;
- (void)setSessionPassword:(id)arg1;
- (id)sessionPassword;
- (void)setPermanentPassword:(id)arg1;
- (id)permanentPassword;
- (void)setPassword:(id)arg1;
- (id)password;
- (void)setUsername:(id)arg1;
- (id)username;
- (void)setInfo:(id)arg1;
- (id)info;
- (void)_setAccountInfo:(id)arg1;
- (void)removeAccountInfoObjectForKey:(id)arg1;
- (void)setAccountInfoObject:(id)arg1 forKey:(id)arg2;
- (void)releaseAllConnections;
- (void)updateAccountsFromPlist:(id)arg1 acceptedChanges:(id)arg2;
- (id)defaultsDictionary;
- (void)setIsInactivatedInsteadOfBeingDeleted:(BOOL)arg1;
- (BOOL)isInactivatedInsteadOfBeingDeleted;
- (id)offlineDisplayName;
- (void)setDisplayName;
- (id)displayName;
- (void)setStoredDisplayName;
- (id)storedDisplayName;
- (void)dealloc;
- (id)initWithAccountInfo:(id)arg1;
- (id)initWithAccount:(id)arg1;

@end

@interface MFEWSFindItemsRequestOperation : MFEWSRequestOperation
{
    NSArray *_additionalProperties;
    NSArray *_EWSFolderIdStrings;
    EWSSearchExpressionType *_searchExpression;
}

+ (Class)classForResponse;
@property(readonly, nonatomic) EWSSearchExpressionType *searchExpression; // @synthesize searchExpression=_searchExpression;
@property(readonly, nonatomic) NSArray *EWSFolderIdStrings; // @synthesize EWSFolderIdStrings=_EWSFolderIdStrings;
@property(readonly, nonatomic) NSArray *additionalProperties; // @synthesize additionalProperties=_additionalProperties;
- (id)prepareRequest;
- (id)activityString;
- (void)dealloc;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (id)initWithSearchExpression:(id)arg1 EWSFolderIdStrings:(id)arg2 additionalProperties:(id)arg3 gateway:(id)arg4;

@end

@interface MFEWSFindItemsResponseOperation : MFEWSResponseOperation
{
    NSDictionary *_rootFoldersByEWSFolderId;
    NSArray *_EWSFolderIds;
}

@property(retain, nonatomic) NSArray *EWSFolderIds; // @synthesize EWSFolderIds=_EWSFolderIds;
@property(retain, nonatomic) NSDictionary *rootFoldersByEWSFolderId;
- (id)rootFolderForEWSFolderId:(id)arg1;
- (void)executeOperation;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)dealloc;

@end

@interface MFEWSGateway : NSObject <NSCoding>
{
    NSMutableDictionary *_pendingSyncOperations;
    NSMutableDictionary *_headersByItemIdStringForSync;
    MFEWSAccount *_account;
    NSOperationQueue *_requestResponseQueue;
    NSOperationQueue *_syncOperationQueue;
    NSMutableArray *_offlineRequests;
    NSDictionary *_savedOfflineToRealEWSIdStrings;
    NSOperationQueue *_rulesQueue;
}

+ (id)newTemporaryItemId;
@property(retain, nonatomic) NSOperationQueue *rulesQueue; // @synthesize rulesQueue=_rulesQueue;
@property(retain, nonatomic) NSDictionary *savedOfflineToRealEWSIdStrings; // @synthesize savedOfflineToRealEWSIdStrings=_savedOfflineToRealEWSIdStrings;
@property(retain, nonatomic) NSMutableArray *offlineRequests; // @synthesize offlineRequests=_offlineRequests;
@property(retain, nonatomic) NSOperationQueue *syncOperationQueue; // @synthesize syncOperationQueue=_syncOperationQueue;
@property(retain, nonatomic) NSOperationQueue *requestResponseQueue; // @synthesize requestResponseQueue=_requestResponseQueue;
@property(nonatomic) MFEWSAccount *account; // @synthesize account=_account;
- (id)fetchCopyOfSyncIssuesEntryID;
- (void)_logPendingSyncOperations:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
@property(readonly) unsigned long long maxRequestsToSend;
- (void)_chunkItemsToSend:(id)arg1 applyToBlock:(id)arg2;
- (void)setOofState:(long long)arg1 internalReply:(id)arg2 externalReply:(id)arg3 startTime:(id)arg4 endTime:(id)arg5 externalAudienceType:(long long)arg6;
- (void)getOofSettings;
- (CDStruct_1dee9796)fetchUsageInfoForEWSFolderIdString:(id)arg1;
- (void)addOfflineToRealEWSIdStrings:(id)arg1 forRequest:(id)arg2;
- (id)resolvedIdStringForIdString:(id)arg1;
- (BOOL)deleteMailboxWithEWSFolderIdString:(id)arg1 error:(id *)arg2;
- (BOOL)moveMailboxWithEWSFolderIdString:(id)arg1 to:(id)arg2 error:(id *)arg3;
- (BOOL)renameMailboxWithEWSFolderIdString:(id)arg1 to:(id)arg2 error:(id *)arg3;
- (id)createMailboxWithParentEWSFolderIdString:(id)arg1 name:(id)arg2 mailboxType:(int)arg3 error:(id *)arg4;
- (void)_fetchMeetingCancellationMessages:(id)arg1 errorHandler:(id)arg2;
- (void)_fetchMeetingRequestMessages:(id)arg1 errorHandler:(id)arg2;
- (void)undeleteMessageForFailedCreateEventResponse:(id)arg1;
- (void)sendResponseType:(BOOL)arg1 forMeetingMessage:(id)arg2 inStore:(id)arg3 errorHandler:(id)arg4;
- (id)copyMessagesWithEWSItemIds:(id)arg1 fromFolderWithIdString:(id)arg2 toFolderWithIdString:(id)arg3 synchronously:(BOOL)arg4 errorHandler:(id)arg5;
- (void)setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2 inFolderWithEWSIdString:(id)arg3 errorHandler:(id)arg4;
- (void)deleteMessagesWithEWSItemIds:(id)arg1 fromFolderWithEWSIdString:(id)arg2 synchronously:(BOOL)arg3;
- (id)appendMessage:(id)arg1 withData:(id)arg2 toEWSFolderWithIdString:(id)arg3 messageType:(BOOL)arg4 flags:(unsigned int)arg5 sender:(id)arg6 recipientsByHeaderKey:(id)arg7 send:(BOOL)arg8 errorHandler:(id)arg9;
- (void)_cacheDataForLibraryMessages:(id)arg1 store:(id)arg2 folderIdString:(id)arg3 errorHandler:(id)arg4;
- (void)cacheDataForLibraryMessages:(id)arg1 store:(id)arg2 folderIdString:(id)arg3 errorHandler:(id)arg4;
- (id)_EWSItemTypesWithBodyDataForMessages:(id)arg1 errorHandler:(id)arg2;
- (id)fetchMimeDataForMessage:(id)arg1 errorHandler:(id)arg2;
- (void)_saveData:(id)arg1 forMessage:(id)arg2 isPartial:(BOOL)arg3 updateMetadata:(BOOL)arg4;
- (void)_cancelWriteSyncStateOperationForFolderIdString:(id)arg1 withSyncState:(id)arg2;
- (void)removeIdStringsForMessagesThatSynced:(id)arg1 fromFolderWithIdString:(id)arg2;
- (void)concludeSyncOfFolderItemsFromFolderIdString:(id)arg1;
- (void)_updateMessagesLocallyFromSync:(id)arg1 inStore:(id)arg2 withFolderIdString:(id)arg3 newMessageIDs:(id)arg4 newSyncState:(id)arg5;
- (void)updateMessagesLocallyFromSync:(id)arg1 inStore:(id)arg2 withFolderIdString:(id)arg3 newMessageIDs:(id)arg4 newSyncState:(id)arg5;
- (void)routeMessagesAndAddToLibrary:(id)arg1 toStore:(id)arg2;
- (void)setHeaders:(id)arg1 forItemIdString:(id)arg2;
- (void)setEWSIdStringsBlockingSyncCompletion:(id)arg1 syncState:(id)arg2 forFolderIdString:(id)arg3;
- (void)_handleSyncedMessagesWithoutHeaders:(id)arg1 inFolderIdString:(id)arg2 store:(id)arg3 newSyncState:(id)arg4;
- (id)_syncFolderItemsFromTargetFolderIdType:(id)arg1 syncState:(id)arg2 forStore:(id)arg3 includesLastItem:(char *)arg4;
- (id)syncFolderItemsFromFolderIdString:(id)arg1 syncState:(id)arg2 forStore:(id)arg3;
- (id)_syncFolderHierarchyWithSyncState:(id)arg1 includesLastItem:(char *)arg2;
- (id)syncFolderHierarchyWithSyncState:(id)arg1;
@property(readonly) MFEWSConnection *connection;
- (id)_offlineCachePathForDataWithItemIdString:(id)arg1;
- (id)_offlineCachePathForMessageWithItemIdString:(id)arg1;
- (id)_offlineCachePath;
- (void)removeMessageAndDataFromOfflineCacheForEWSItemIdString:(id)arg1;
- (void)retrieveMessageFromOfflineCache:(id *)arg1 data:(id *)arg2 forItemIdString:(id)arg3;
- (BOOL)writeMessageToOfflineCache:(id)arg1 data:(id)arg2 forItemIdString:(id)arg3;
- (void)playbackRequestsFromOfflineCacheWithConnection:(id)arg1 error:(id *)arg2;
- (void)_addDeleteRequestToOfflineCache:(id)arg1;
- (void)_addCreateRequestToOfflineCache:(id)arg1;
- (void)_saveOfflineCache;
- (void)saveRequestToOfflineCache:(id)arg1;
- (id)fetchDistinguishedFolderIdsWithConnection:(id)arg1;
- (void)takeRequestOffline:(id)arg1 error:(id)arg2;
- (void)sendMessage:(id)arg1 forRequest:(id)arg2;
- (void)addError:(id)arg1 withHandler:(id)arg2;
- (void)addResponse:(id)arg1;
- (void)addRequest:(id)arg1;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (id)initWithAccount:(id)arg1;

@end

@interface _WriteSyncStateOperation : MCThrowingInvocationOperation
{
    NSMutableSet *_itemIdStrings;
    NSString *_syncState;
}

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)keyPathsForValuesAffectingValueForKey:(id)arg1;
@property(retain, nonatomic) NSString *syncState; // @synthesize syncState=_syncState;
- (id)description;
- (BOOL)isReady;
- (void)cancel;
- (void)removeIdStringsForMessages:(id)arg1;
- (void)removeIdStringsForItemIdTypes:(id)arg1;
- (void)setIdStrings:(id)arg1;
- (void)dealloc;
- (id)initWithStore:(id)arg1 syncState:(id)arg2;

@end

@interface MFEWSGetFolderRequestOperation : MFEWSRequestOperation
{
    BOOL _fetchEntryIDs;
    NSArray *_EWSFolderIds;
}

+ (Class)classForResponse;
@property(readonly, nonatomic) NSArray *EWSFolderIds; // @synthesize EWSFolderIds=_EWSFolderIds;
- (id)prepareRequest;
- (BOOL)isFolderRequest;
- (id)activityString;
- (void)dealloc;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (id)initWithEWSFolderIds:(id)arg1 gateway:(id)arg2 errorHandler:(id)arg3 fetchEntryIDs:(BOOL)arg4;

@end

@interface MFEWSGetFolderResponseOperation : MFEWSResponseOperation
{
    NSArray *_EWSFolders;
    NSArray *_EWSFolderIdsRequested;
}

@property(copy) NSArray *EWSFolderIdsRequested; // @synthesize EWSFolderIdsRequested=_EWSFolderIdsRequested;
@property(copy) NSArray *EWSFolders; // @synthesize EWSFolders=_EWSFolders;
- (void)executeOperation;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)dealloc;

@end

@interface MFEWSGetItemDataRequestOperation : MFEWSRequestOperation
{
    NSArray *_itemIdTypes;
}

+ (Class)classForResponse;
@property(readonly, nonatomic) NSArray *itemIdTypes; // @synthesize itemIdTypes=_itemIdTypes;
- (id)prepareRequest;
- (id)activityString;
- (void)dealloc;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (id)initWithItemIdTypes:(id)arg1 dataHandler:(id)arg2 gateway:(void)arg3 errorHandler:(id)arg4;

@end

@interface MFEWSGetItemDataResponseOperation : MFEWSResponseOperation
{
    NSArray *_itemIdTypes;
    id _dataHandler;
}

@property(copy, nonatomic) id dataHandler; // @synthesize dataHandler=_dataHandler;
@property(retain, nonatomic) NSArray *itemIdTypes; // @synthesize itemIdTypes=_itemIdTypes;
- (void)executeOperation;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)dealloc;

@end

@interface MFEWSGetItemsRequestOperation : MFEWSRequestOperation
{
    NSArray *_EWSItemIds;
    NSArray *_additionalProperties;
}

+ (Class)classForResponse;
@property(readonly, nonatomic) NSArray *additionalProperties; // @synthesize additionalProperties=_additionalProperties;
@property(readonly, nonatomic) NSArray *EWSItemIds; // @synthesize EWSItemIds=_EWSItemIds;
- (id)prepareRequest;
- (id)activityString;
- (void)dealloc;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (id)initWithEWSItemIds:(id)arg1 additionalProperties:(id)arg2 gateway:(id)arg3 errorHandler:(id)arg4;

@end

@interface MFEWSGetItemsResponseOperation : MFEWSResponseOperation
{
    NSMutableArray *_EWSItems;
    NSArray *_EWSItemIdsRequested;
}

@property(retain) NSArray *EWSItemIdsRequested; // @synthesize EWSItemIdsRequested=_EWSItemIdsRequested;
@property(retain) NSMutableArray *EWSItems; // @synthesize EWSItems=_EWSItems;
- (void)executeOperation;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)dealloc;

@end

@interface MFEWSGetUserOofSettingsRequestOperation : MFEWSRequestOperation
{
    EWSEmailAddress *_emailAddress;
}

+ (Class)classForResponse;
@property(readonly, nonatomic) EWSEmailAddress *emailAddress; // @synthesize emailAddress=_emailAddress;
- (id)prepareRequest;
- (void)dealloc;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (id)initWithEmailAddress:(id)arg1 gateway:(id)arg2 errorHandler:(id)arg3;

@end

@interface MFEWSGetUserOofSettingsResponseOperation : MFEWSResponseOperation
{
    EWSUserOofSettingsType *_oofSettings;
    long long _allowExternalOof;
}

@property long long allowExternalOof; // @synthesize allowExternalOof=_allowExternalOof;
@property(retain) EWSUserOofSettingsType *oofSettings; // @synthesize oofSettings=_oofSettings;
- (void)executeOperation;
- (void)dealloc;

@end

@interface MFEWSMessage : MCRemoteMessage
{
    NSString *_itemId;
    NSString *_changeKey;
    NSData *_bodyData;
    NSData *_headerData;
    MCMessageHeaders *_headers;
    long long _libraryID;
}

+ (id)_newEWSAddressesForAddresses:(id)arg1;
+ (id)_newEWSAddressForAddress:(id)arg1;
+ (id)_newEWSHeaderFieldsForMessageHeaders:(id)arg1 encodingHint:(unsigned long long)arg2;
+ (id)validEWSIdStringsForIdStrings:(id)arg1;
+ (id)validEWSItemIdTypesForItemIdTypes:(id)arg1;
+ (id)EWSItemIdTypesForItemIdStrings:(id)arg1;
+ (id)EWSItemIdStringsForItemIdTypes:(id)arg1;
+ (id)EWSItemIdTypesForMessages:(id)arg1;
+ (id)newEWSItemFromMessage:(id)arg1 data:(id)arg2 flags:(unsigned int)arg3 sender:(id)arg4 recipientsByHeaderKey:(id)arg5 categories:(id)arg6 existingProperties:(id)arg7 useSenderInsteadOfFrom:(BOOL)arg8;
+ (id)_mimeContentForData:(id)arg1;
+ (id)dataFromMimeContent:(id)arg1;
+ (id)_newCustomEWSSetItemWithPropertyName:(id)arg1 boolValue:(BOOL)arg2;
+ (id)_newEWSSetItemWithPropertyTag:(id)arg1 intValue:(int)arg2;
+ (id)_newCustomEWSExtendedPropertyWithName:(id)arg1 boolValue:(BOOL)arg2;
+ (id)_newEWSExtendedPropertyWithTag:(id)arg1 intValue:(int)arg2;
+ (id)_extendedFieldsForFlags:(unsigned int)arg1 importance:(int *)arg2;
+ (id)_newEWSDeleteItemWithDistinguishedPropertySetId:(int)arg1 propertyType:(int)arg2 propertyId:(long long)arg3;
+ (id)_newEWSDeleteItemWithPropertyTag:(id)arg1 propertyType:(int)arg2;
+ (id)updatesForEWSItem:(id)arg1 applyingFlags:(id)arg2;
+ (id)propertiesToGetBeforeUpdatingMessageFlags:(id)arg1 forMessageType:(BOOL)arg2 includesReadReceipts:(char *)arg3;
+ (id)extendedFieldsForEWSCalendarType;
+ (id)extendedFieldsForEWSMeetingRequestMessageType;
+ (id)extendedFieldsForEWSMeetingMessageType;
+ (id)fieldsToMaintainWhenUpdatingMessageType:(BOOL)arg1;
+ (id)extendedFieldsForEWSNoteType;
+ (void)_extendedPropertiesFromEWSItem:(id)arg1 statusFlags:(int *)arg2 messageFlags:(int *)arg3 flagStatus:(int *)arg4 followupIcon:(int *)arg5 toDoFlags:(int *)arg6 replyFlags:(int *)arg7 hasAttachments:(char *)arg8 customFlags:(id)arg9 messageID:(id *)arg10 headers:(id *)arg11 sender:(id *)arg12;
+ (void)parseExtendedFieldsFromEWSMessage:(id)arg1 intoFlags:(unsigned int *)arg2 flagsMask:(unsigned int *)arg3 messageID:(id *)arg4 headers:(id *)arg5 sender:(id *)arg6;
+ (id)headersItemShape;
+ (id)EWSFolderClassForMailboxType:(int)arg1;
+ (id)EWSItemClassForMessageType:(BOOL)arg1;
+ (BOOL)messageTypeForEWSItemClass:(id)arg1;
+ (void)initialize;
@property(nonatomic) long long libraryID; // @synthesize libraryID=_libraryID;
@property(retain) MCMessageHeaders *headers; // @synthesize headers=_headers;
@property(retain) NSData *headerData; // @synthesize headerData=_headerData;
@property(retain) NSData *fetchedBodyData; // @synthesize fetchedBodyData=_bodyData;
@property(copy, nonatomic) NSString *changeKey; // @synthesize changeKey=_changeKey;
@property(copy, nonatomic) NSString *itemId; // @synthesize itemId=_itemId;
- (void)setHeaderAndBodyFromFullData:(id)arg1;
- (BOOL)isMessageContentsLocallyAvailable;
- (BOOL)isEditable;
- (id)remoteID;
- (void)setDataSource:(id)arg1;
- (id)dataSource;
- (id)mailbox;
- (id)account;
- (void)dealloc;
- (id)init;
- (id)initWithItemId:(id)arg1 changeKey:(id)arg2;

@end

@interface MFEWSMoveFolderRequestOperation : MFEWSRequestOperation <NSCoding>
{
    NSString *_destinationEWSFolderIdString;
    MFEWSGetFolderResponseOperation *_changeKeysResponse;
    NSArray *_originEWSFolderIdStrings;
}

+ (Class)classForResponse;
@property(readonly, nonatomic) NSArray *originEWSFolderIdStrings; // @synthesize originEWSFolderIdStrings=_originEWSFolderIdStrings;
@property(readonly, nonatomic) MFEWSGetFolderResponseOperation *changeKeysResponse; // @synthesize changeKeysResponse=_changeKeysResponse;
@property(readonly, nonatomic) NSString *destinationEWSFolderIdString; // @synthesize destinationEWSFolderIdString=_destinationEWSFolderIdString;
- (void)setupOfflineResponse;
- (id)prepareRequest;
- (BOOL)isFolderRequest;
- (id)activityString;
- (void)dealloc;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)_ewsMoveFolderRequestCommonInitWithEWSFolderIdString:(id)arg1 originEWSFolderIdStrings:(id)arg2 gateway:(id)arg3;
- (id)initWithEWSFolderIdString:(id)arg1 originEWSFolderIdStrings:(id)arg2 gateway:(id)arg3;

@end

@interface MFEWSOfflineGateway : MFEWSGateway <NSKeyedUnarchiverDelegate>
{
    NSMutableDictionary *_offlineToRealEWSIdStrings;
    id _offlineToRealEWSIdStringsLock;
    MFEWSConnection *_offlineConnection;
    MFEWSResponseOperation *_lastResponseDecoded;
}

@property(retain) MFEWSResponseOperation *lastResponseDecoded; // @synthesize lastResponseDecoded=_lastResponseDecoded;
@property(retain) MFEWSConnection *offlineConnection; // @synthesize offlineConnection=_offlineConnection;
- (Class)unarchiver:(id)arg1 cannotDecodeObjectOfClassName:(id)arg2 originalClasses:(id)arg3;
- (id)unarchiver:(id)arg1 didDecodeObject:(id)arg2;
- (void)_undeleteMessagesFromFailedDeleteRequest:(id)arg1;
- (void)_undeleteMessagesFromFailedCopyRequest:(id)arg1;
- (void)_moveMessageFromFailedCreateRequest:(id)arg1 withBackupManager:(id)arg2 toMailboxNamed:(id)arg3 actualName:(id *)arg4;
- (id)_deleteRequestRemovingUndeletedItems:(id)arg1;
- (id)_EWSFolderFromCreateRequestOperation:(id)arg1;
@property(retain, nonatomic) NSMutableDictionary *offlineToRealEWSIdStrings;
- (id)playbackRequests:(id)arg1 offlineToRealEWSIdStrings:(id *)arg2 error:(id *)arg3;
- (void)takeRequestOffline:(id)arg1 error:(id)arg2;
- (void)addOfflineToRealEWSIdStrings:(id)arg1 forRequest:(id)arg2;
- (id)resolvedIdStringForIdString:(id)arg1;
- (void)addRequest:(id)arg1;
- (id)connection;
- (void)dealloc;
- (id)initWithAccount:(id)arg1;
- (id)initWithAccount:(id)arg1 connection:(id)arg2;

@end

@interface MFEWSRenameFolderRequestOperation : MFEWSRequestOperation
{
    NSString *_folderIdString;
    NSString *_folderName;
    MFEWSGetFolderResponseOperation *_changeKeysResponse;
}

+ (Class)classForResponse;
@property(readonly, nonatomic) MFEWSGetFolderResponseOperation *changeKeysResponse; // @synthesize changeKeysResponse=_changeKeysResponse;
@property(readonly, nonatomic) NSString *folderName; // @synthesize folderName=_folderName;
@property(readonly, nonatomic) NSString *folderIdString; // @synthesize folderIdString=_folderIdString;
- (id)prepareRequest;
- (BOOL)isFolderRequest;
- (id)activityString;
- (void)dealloc;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (id)initWithEWSFolderIdString:(id)arg1 name:(id)arg2 gateway:(id)arg3;

@end

@interface MFEWSRequestOperation : MCMonitoredOperation
{
    BOOL _isOffline;
    MFEWSResponseOperation *_responseOperation;
    MFEWSGateway *_gateway;
}

+ (Class)classForResponse;
@property(retain, nonatomic) MFEWSGateway *gateway; // @synthesize gateway=_gateway;
@property(retain, nonatomic) MFEWSResponseOperation *responseOperation; // @synthesize responseOperation=_responseOperation;
- (id)description;
- (void)setupOfflineResponse;
- (void)goOffline;
- (BOOL)isOffline;
- (BOOL)isFolderRequest;
- (void)executeOperation;
- (id)prepareRequest;
- (void)dealloc;
- (id)init;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;

@end

@interface MFEWSResponseOperation : MCMonitoredOperation
{
    BOOL _isOffline;
    EWSBaseMessageResponseType *_response;
    MFEWSGateway *_gateway;
    id <MFEWSErrorHandler> _errorHandler;
    MCError *_lastError;
}

@property BOOL isOffline; // @synthesize isOffline=_isOffline;
@property(retain) MCError *lastError; // @synthesize lastError=_lastError;
@property(retain, nonatomic) id <MFEWSErrorHandler> errorHandler; // @synthesize errorHandler=_errorHandler;
@property(retain, nonatomic) MFEWSGateway *gateway; // @synthesize gateway=_gateway;
@property(retain) EWSBaseMessageResponseType *response; // @synthesize response=_response;
- (id)description;
- (BOOL)handleResponseMessage:(id)arg1 withObject:(id)arg2;
- (BOOL)handleResponseMessage:(id)arg1;
- (void)handleResponseMessages;
- (void)failWithError:(id)arg1;
- (void)executeOperation;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)dealloc;
- (id)init;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;

@end

@interface MFEWSSetUserOofSettingsRequestOperation : MFEWSRequestOperation
{
    long long _oofState;
    EWSReplyBodyType *_internalReply;
    EWSReplyBodyType *_externalReply;
    EWSDuration *_duration;
    EWSEmailAddress *_emailAddress;
    long long _externalAudienceType;
}

+ (Class)classForResponse;
@property(readonly, nonatomic) long long externalAudienceType; // @synthesize externalAudienceType=_externalAudienceType;
@property(readonly, nonatomic) EWSEmailAddress *emailAddress; // @synthesize emailAddress=_emailAddress;
@property(readonly, nonatomic) EWSDuration *duration; // @synthesize duration=_duration;
@property(readonly, nonatomic) EWSReplyBodyType *externalReply; // @synthesize externalReply=_externalReply;
@property(readonly, nonatomic) EWSReplyBodyType *internalReply; // @synthesize internalReply=_internalReply;
@property(readonly, nonatomic) long long oofState; // @synthesize oofState=_oofState;
- (id)prepareRequest;
- (void)dealloc;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (id)initWithEmailAddress:(id)arg1 oofState:(long long)arg2 internalReply:(id)arg3 externalReply:(id)arg4 startTime:(id)arg5 endTime:(id)arg6 externalAudienceType:(long long)arg7 gateway:(id)arg8 errorHandler:(id)arg9;

@end

@interface MFEWSSetUserOofSettingsResponseOperation : MFEWSResponseOperation
{
}

- (void)executeOperation;

@end

@interface MFEWSSizeEngine : MFRemoteStoreSizeEngine
{
}

- (void)_getSizeForMailbox:(id)arg1;
- (void)_runWorkerThread;
- (id)initWithAccount:(id)arg1;

@end

@interface MFEWSStore : MFRemoteStore <MFEWSErrorHandler>
{
    NSString *_syncState;
    NSLock *_syncLock;
    NSMutableSet *_flagsToSetDuringSync;
    NSString *_folderIdString;
}

@property(copy) NSString *folderIdString; // @synthesize folderIdString=_folderIdString;
- (void)handleEWSError:(id)arg1;
- (BOOL)_loadFolderId;
- (void)_setSyncState:(id)arg1 persistToLibrary:(BOOL)arg2;
@property(copy) NSString *syncState;
- (id)_gateway;
- (id)_EWSConnection;
- (id)account;
- (void)_fetchChangesFromServer;
- (void)sendResponseType:(BOOL)arg1 forMeetingMessage:(id)arg2;
- (void)undeleteMessagesWithEWSItemIdStrings:(id)arg1;
- (void)deleteMessageWithEWSItemIdString:(id)arg1;
- (void)_deleteMessagesOnServerSynchronouslyWithEWSItemIds:(id)arg1 fromFolderWithEWSIdString:(id)arg2;
- (long long)_appendToServerWithContext:(id)arg1 error:(id *)arg2;
- (BOOL)_copyMessagesByID:(id)arg1 toStore:(id)arg2 settingFlags:(id)arg3 newMessages:(id)arg4 error:(id *)arg5;
- (void)forceResync;
- (long long)undoAppendOfMessageIDs:(id)arg1;
- (id)undeleteMessages:(id)arg1 movedToStore:(id)arg2 newMessageIDs:(id)arg3;
- (id)async_setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (void)messagesWereAdded:(id)arg1 conversationsMembers:(id)arg2 duringOpen:(BOOL)arg3 options:(id)arg4;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (void)startSynchronization;
- (void)fetchSynchronously;
- (void)openSynchronouslyIfWaitingToOpen;
- (void)openSynchronouslyUpdatingMetadata:(BOOL)arg1;
- (BOOL)allowsDeleteInPlace;
- (BOOL)allowsOverwrite;
- (BOOL)canRebuild;
- (void)dealloc;
- (id)initWithCriterion:(id)arg1 mailbox:(id)arg2 readOnly:(BOOL)arg3;

@end

@interface _MFSetFlags : NSObject
{
    NSMutableArray *_messages;
    NSDictionary *_flagsToSet;
}

@property(readonly) NSArray *messages; // @synthesize messages=_messages;
@property(readonly) NSDictionary *flagsToSet; // @synthesize flagsToSet=_flagsToSet;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (void)addMessages:(id)arg1;
- (void)dealloc;
- (id)init;
- (id)initWithFlagsDictionary:(id)arg1 messages:(id)arg2;

@end

@interface MFEWSSuppressReadReceiptsRequestOperation : MFEWSRequestOperation
{
    MFEWSGetItemsResponseOperation *_getItemsResponse;
}

+ (Class)classForResponse;
@property(readonly, nonatomic) MFEWSGetItemsResponseOperation *getItemsResponse; // @synthesize getItemsResponse=_getItemsResponse;
- (id)prepareRequest;
- (void)dealloc;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (id)initWithGetItemsResponse:(id)arg1 gateway:(id)arg2;

@end

@interface MFEWSSyncFolderHierarchyRequestOperation : MFEWSRequestOperation
{
    NSString *_syncState;
}

+ (Class)classForResponse;
@property(readonly, nonatomic) NSString *syncState; // @synthesize syncState=_syncState;
- (id)prepareRequest;
- (id)activityString;
- (void)dealloc;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (id)initWithSyncState:(id)arg1 createBlock:(id)arg2 updateBlock:(void)arg3 deleteBlock:(id)arg4 gateway:(void)arg5;

@end

@interface MFEWSSyncFolderHierarchyResponseOperation : MFEWSResponseOperation
{
    id _createBlock;
    id _updateBlock;
    id _deleteBlock;
}

@property(copy, nonatomic) id deleteBlock; // @synthesize deleteBlock=_deleteBlock;
@property(copy, nonatomic) id updateBlock; // @synthesize updateBlock=_updateBlock;
@property(copy, nonatomic) id createBlock; // @synthesize createBlock=_createBlock;
- (void)executeOperation;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)dealloc;

@end

@interface MFEWSSyncFolderItemsRequestOperation : MFEWSRequestOperation
{
    NSString *_syncState;
    EWSTargetFolderIdType *_targetFolder;
}

+ (unsigned long long)maxChangesReturned;
+ (Class)classForResponse;
+ (id)keyPathsForValuesAffectingTargetFolderName;
+ (id)keyPathsForValuesAffectingTargetFolderId;
@property(retain, nonatomic) EWSTargetFolderIdType *targetFolder; // @synthesize targetFolder=_targetFolder;
@property(readonly, nonatomic) NSString *syncState; // @synthesize syncState=_syncState;
@property(readonly, nonatomic) NSString *targetFolderName;
@property(readonly, nonatomic) EWSFolderIdType *targetFolderId;
- (id)prepareRequest;
- (id)activityString;
- (void)dealloc;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (id)initWithTargetFolder:(id)arg1 syncState:(id)arg2 gateway:(id)arg3;

@end

@interface MFEWSSyncFolderItemsResponseMessageOperation : MFEWSResponseOperation
{
    NSMutableArray *_messagesWithoutHeaders;
    MFEWSStore *_store;
    EWSFolderIdType *_folderId;
    NSString *_startSyncState;
    NSString *_endSyncState;
}

+ (void)initialize;
@property(retain) NSString *endSyncState; // @synthesize endSyncState=_endSyncState;
@property(retain) NSString *startSyncState; // @synthesize startSyncState=_startSyncState;
@property(retain) EWSFolderIdType *folderId; // @synthesize folderId=_folderId;
@property(retain) MFEWSStore *store; // @synthesize store=_store;
- (void)_addMessageWithoutHeaders:(id)arg1;
@property(readonly) NSArray *messagesWithoutHeaders;
- (BOOL)_addressList:(id)arg1 isEqualToAddressList:(id)arg2;
- (void)_addFlagChanges:(unsigned int)arg1 mask:(unsigned int)arg2 forMessageWithEWSItemId:(id)arg3 toFlagChangesByMessage:(id)arg4;
- (void)_handleSyncFolderItemsCreateOrUpdate:(id)arg1 forStore:(id)arg2 messagesToUpdate:(id)arg3 libraryIDs:(id)arg4 messagesToCreate:(id)arg5 updatedFlagsByMessage:(id)arg6 messagesThatFinished:(id)arg7;
- (void)executeOperation;
- (void)prepareToExecuteWithResponse:(id)arg1 forRequestOperation:(id)arg2;
- (void)dealloc;

@end

@interface MFEWSUpdateItemRequestOperation : MFEWSRequestOperation <NSCoding>
{
    BOOL _messageType;
    NSArray *_EWSItemIds;
    NSDictionary *_flags;
    MFEWSGetItemsResponseOperation *_getItemsResponse;
    MFEWSSuppressReadReceiptsRequestOperation *_suppressReadReceiptsRequest;
}

+ (Class)classForResponse;
@property(readonly, nonatomic) BOOL messageType; // @synthesize messageType=_messageType;
@property(readonly, nonatomic) MFEWSSuppressReadReceiptsRequestOperation *suppressReadReceiptsRequest; // @synthesize suppressReadReceiptsRequest=_suppressReadReceiptsRequest;
@property(readonly, nonatomic) MFEWSGetItemsResponseOperation *getItemsResponse; // @synthesize getItemsResponse=_getItemsResponse;
@property(readonly, nonatomic) NSDictionary *flags; // @synthesize flags=_flags;
@property(readonly, nonatomic) NSArray *EWSItemIds; // @synthesize EWSItemIds=_EWSItemIds;
@property(readonly, nonatomic) NSArray *itemsPriorToUpdate;
- (id)prepareRequest;
- (id)activityString;
- (void)setupOfflineResponse;
- (void)_ewsUpdateItemRequestOperationCommonInitWithEWSItemIds:(id)arg1 messageType:(BOOL)arg2 flags:(id)arg3 errorHandler:(id)arg4;
- (void)dealloc;
- (id)initWithGateway:(id)arg1 errorHandler:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithEWSItemIds:(id)arg1 messageType:(BOOL)arg2 flags:(id)arg3 gateway:(id)arg4 errorHandler:(id)arg5;

@end

@interface MFExchangeIMAPAccount : MFIMAPAccount
{
}

+ (id)activeDirectoryEmailAddress;
+ (id)activeDirectoryFullName;
+ (void)setActiveDirectoryPassword:(id)arg1;
+ (id)activeDirectoryPassword;
+ (void)setActiveDirectoryUser:(id)arg1;
+ (id)activeDirectoryUser;
+ (void)setExchangeServer:(id)arg1;
+ (id)exchangeServer;
+ (void)setOutlookWebAccessServer:(id)arg1;
+ (id)outlookWebAccessServer;
+ (BOOL)usingActiveDirectory;
+ (id)defaultPathNameForAccount;
+ (id)accountTypeString;
+ (void)initialize;
- (void)handleOpenMailboxError:(id)arg1;
- (id)defaultsDictionary;
- (void)setPermanentPassword:(id)arg1;
- (id)permanentPassword;
- (void)setUsername:(id)arg1;
- (id)username;
- (void)setHostname:(id)arg1;
- (id)hostname;
- (id)additionalHeaderFields;
- (void)_filterMailboxList:(id)arg1 forMailboxWithPath:(id)arg2 iisServer:(id)arg3;
- (id)_nonMailboxChildrenOfMailboxWithPath:(id)arg1 iisServer:(id)arg2;
- (void)filterMailboxList:(id)arg1 forMailbox:(id)arg2 options:(long long)arg3;
- (id)_defaultSpecialMailboxRelativePathForType:(int)arg1;
- (BOOL)storeJunkOnServer;
- (BOOL)storeJunkOnServerDefault;
- (id)authSchemesForConnection:(id)arg1;
- (BOOL)canAuthenticateWithScheme:(id)arg1 connection:(id)arg2;
- (BOOL)connectAndAuthenticate:(id)arg1;
- (id)newConnectedConnectionDiscoveringBestSettings:(BOOL)arg1 withConnectTimeout:(double)arg2 readWriteTimeout:(double)arg3;
- (id)_newConnectionWithPendingGateway:(BOOL)arg1;

@end

@interface MFExchangeIMAPConnection : IMAPConnection
{
}

- (BOOL)_isFetchResponseValid:(id)arg1;
@property MFExchangeIMAPAccount *account;

@end

@interface MFFilesystemWatcher : NSObject
{
    NSMapTable *_libraryIMAPStoreToFSCache;
    NSMapTable *_fseventStreamToLibraryIMAPStore;
    NSMapTable *_libraryIMAPStoreToFSEventStream;
    id _fseventsTableLock;
    NSObject<OS_dispatch_queue> *_scanningQueue;
    NSOperationQueue *_cachedDirectoryOperationQueue;
    unsigned long long _nextLibraryIMAPStoreCookie;
}

+ (id)sharedInstance;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (id)_fseventsTableLock;
- (id)_fseventStreamToLibraryIMAPStore;
- (void)stopWatchingPathForLibraryIMAPStore:(unsigned long long)arg1;
- (id)getCachedFilesFor:(unsigned long long)arg1;
- (unsigned long long)registerPath:(id)arg1;
- (void)_updateCacheInfoForPath:(id)arg1 rootPathToTrim:(id)arg2 scanSubDirectories:(BOOL)arg3 cookie:(const void *)arg4;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface MailFramework : NSObject
{
}

+ (void)setUserAgent:(id)arg1;
+ (id)userAgent;
+ (id)frameworkVersion;
+ (id)bundle;

@end

@interface MFGmailLabelStore : MFLibraryStore
{
}

- (id)_allMailStore;
- (id)_messagesFromAllMailWithRemoteIDs:(id)arg1;
- (long long)_removeOurLabelFromMessages:(id)arg1;
- (void)_messagesAddedToLibrary:(id)arg1;
- (void)deleteMessages:(id)arg1 moveToTrash:(BOOL)arg2;
- (long long)undoAppendOfMessageIDs:(id)arg1;
- (long long)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 newDocumentIDsByOld:(id)arg5 flagsToSet:(id)arg6 forMove:(BOOL)arg7 error:(id *)arg8;

@end

@interface MFHTMLConverter : NSObject <NSPortDelegate>
{
    WebView *_webView;
    NSPort *_replyPort;
    unsigned int _sequenceNumber:31;
    SEL _mainThreadSelector;
    BOOL _didHandlePortMessage;
    NSData *_resultData;
}

+ (id)sharedInstance;
+ (id)allocWithZone:(struct _NSZone *)arg1;
@property(retain) NSData *resultData; // @synthesize resultData=_resultData;
- (void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 request:(id)arg3 frame:(id)arg4 decisionListener:(id)arg5;
- (id)webView:(id)arg1 resource:(id)arg2 willSendRequest:(id)arg3 redirectResponse:(id)arg4 fromDataSource:(id)arg5;
- (id)webView:(id)arg1 identifierForInitialRequest:(id)arg2 fromDataSource:(id)arg3;
- (void)webView:(id)arg1 didFailLoadWithError:(id)arg2 forFrame:(id)arg3;
- (void)webView:(id)arg1 didFinishLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 didFailProvisionalLoadWithError:(id)arg2 forFrame:(id)arg3;
- (void)webView:(id)arg1 locationChangeDone:(id)arg2 forDataSource:(id)arg3;
- (void)webView:(id)arg1 didStartProvisionalLoadForFrame:(id)arg2;
- (id)_archivedHTMLStringWithInlinedStyleFromLoadedDocument;
- (id)_archivedDataFromLoadedDocument;
- (id)_archivedAttributedStringFromLoadedDocument;
- (void)_loadWebViewOnMainThreadFromData:(id)arg1 withTextEncodingName:(id)arg2 orFromWebArchive:(id)arg3;
- (void)_setUpWebView;
- (void)_stopLoadingWebView;
- (void)_setMainThreadSelector:(SEL)arg1;
- (void)handlePortMessage:(id)arg1;
- (id)htmlStringWithInlinedStyleFromHTMLData:(id)arg1 textEncodingName:(id)arg2;
- (id)junkStringFromHTMLData:(id)arg1 textEncodingName:(id)arg2 context:(id)arg3;
- (id)attributedStringFromWebArchive:(id)arg1;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface MFHTMLParser : NSObject
{
}

+ (id)plainTextFromHTMLSnippet:(id)arg1;
+ (id)plainTextFromHTML:(id)arg1;
+ (id)plainTextFromHTML:(id)arg1 limit:(unsigned long long)arg2;

@end

@interface _MFIMAPMailboxDeletionQueueEntry : NSObject
{
    NSArray *_urls;
    NSArray *_paths;
    MFIMAPAccount *_account;
}

@property(retain, nonatomic) MFIMAPAccount *account; // @synthesize account=_account;
@property(retain, nonatomic) NSArray *paths; // @synthesize paths=_paths;
@property(retain, nonatomic) NSArray *urls; // @synthesize urls=_urls;
- (void)dealloc;

@end

@interface MFIMAPAccount : MFRemoteStoreAccount <IMAPAccount>
{
    double _lastUnreadCountsUpdateTime;
    double _lastUnreadCountsAndNewMessagesUpdateTime;
    double _lastMailboxListFetchTime;
    NSArray *_lastKnownCapabilities;
    NSMutableArray *_namespacePrefixes;
    NSString *_separatorChar;
    IMAPConnectionPool *_connectionPool;
    NSLock *_connectionPoolLock;
    MFIMAPOperationCache *_offlineCache;
    NSString *_serverPathPrefixWithFilesystemSeparator;
    NSString *_serverPathPrefixAsFilesystemPath;
    NSLock *_fsPrefixLock;
    NSLock *_mailboxListingLock;
    NSMutableSet *_mailboxURLsToSynchronize;
    NSMutableDictionary *_IMAPMailboxes;
    NSMutableDictionary *_IMAPQuotaRoots;
    NSOperationQueue *_imapQueue;
    NSOperationQueue *_cleanUpQueue;
    id _allMailLock;
    MFMailbox *_allMailMailbox;
    unsigned int _readBufferSize;
    BOOL _lastConnectionFailed;
    BOOL _shouldIncludePrefixInPath;
    BOOL _allowsInputForConnectionProblems;
    BOOL _isFetchingUnreadCountsForAllMailboxes;
    BOOL _isFetchingUnreadCountsAndCheckingNewMessagesForAllMailboxes;
    BOOL _recoveringFromConnectionLoss;
    MFLibraryIMAPStore *_idleStore;
}

+ (id)_mailboxNameForPathComponent:(id)arg1;
+ (id)_pathComponentForMailboxName:(id)arg1;
+ (void)_deleteQueuedMailboxes:(id)arg1;
+ (id)accountTypeString;
@property BOOL recoveringFromConnectionLoss; // @synthesize recoveringFromConnectionLoss=_recoveringFromConnectionLoss;
@property(retain) IMAPConnectionPool *connectionPool; // @synthesize connectionPool=_connectionPool;
@property(retain) MFLibraryIMAPStore *idleStore; // @synthesize idleStore=_idleStore;
- (void)messageDeliveryWillBegin:(id)arg1;
- (id)remoteTaskQueue;
- (BOOL)storesUnseenCount;
- (id)_infoForMatchingURL:(id)arg1;
- (id)_URLPersistenceScheme;
- (id)mailboxForRelativePath:(id)arg1 isFilesystemPath:(BOOL)arg2 create:(BOOL)arg3;
- (void)_clearOfflineCache;
@property(readonly) id <IMAPOfflineCache> offlineCache;
- (id)offlineCacheIfOffline;
- (void)deleteMessagesFromMailbox:(id)arg1 olderThanNumberOfDays:(unsigned long long)arg2;
- (void)_loadEntriesFromFileSystemPath:(id)arg1 parent:(id)arg2;
- (id)_mailboxPathPrefix:(BOOL)arg1;
- (void)syncFileSystemWithServerPathPrefix;
- (void)_setFileSystemServerPathPrefix;
- (id)_fileSystemServerPathPrefix:(BOOL)arg1;
- (void)setServerPathPrefix:(id)arg1 permanently:(BOOL)arg2;
- (void)_setServerPathPrefix:(id)arg1 permanently:(BOOL)arg2 shouldSync:(BOOL)arg3;
- (id)serverPathPrefix;
- (id)storedServerPathPrefix;
- (BOOL)canMailboxBeDeleted:(id)arg1;
- (id)_mailboxForName:(id)arg1;
- (id)nameForMailbox:(id)arg1;
- (id)_fullIMAPPathForPath:(id)arg1 relativeToMailbox:(id)arg2;
- (void)insertInMailboxes:(id)arg1 atIndex:(unsigned long long)arg2;
- (BOOL)renameMailbox:(id)arg1 newDisplayName:(id)arg2 parent:(id)arg3;
- (void)_recursivelyModifySubscriptions:(BOOL)arg1 forMailbox:(id)arg2 children:(id)arg3 withGateway:(id)arg4;
- (void)_mailboxesWereRemovedFromTree:(id)arg1 withFileSystemPaths:(id)arg2;
- (void)_waitForMailboxListingLoadToComplete;
- (void)_loadMailboxListingIntoCache:(id)arg1 parent:(id)arg2 addedMailboxes:(id)arg3 removedMailboxes:(id)arg4 updatingSourceMailbox:(BOOL)arg5;
- (void)_loadMailboxListingIntoCache:(id)arg1 parent:(id)arg2 addedMailboxes:(id)arg3 removedMailboxes:(id)arg4;
- (void)refreshMailboxListingRootedAtMailbox:(id)arg1;
- (void)_synchronouslyLoadListingForParent:(id)arg1;
- (id)_copyMailboxWithParent:(id)arg1 name:(id)arg2 pathComponent:(id)arg3 attributes:(unsigned long long)arg4 existingMailbox:(id)arg5;
- (void)_synchronizeAccountWithServerHighPriority:(id)arg1;
- (void)_fetchUnreadCountsCheckForNewMessages:(BOOL)arg1;
- (void)_fetchUnreadCountsForMailbox:(id)arg1 recursively:(BOOL)arg2 gateway:(id)arg3;
- (void)_fetchUnreadCountsForMailbox:(id)arg1 recursively:(BOOL)arg2 gateway:(id)arg3 checkForNewMessages:(BOOL)arg4;
- (id)_specialMailboxWithType:(int)arg1 create:(BOOL)arg2 isLocal:(BOOL)arg3;
- (id)_specialMailboxRelativePathForType:(int)arg1;
- (BOOL)_deleteMailbox:(id)arg1 reflectToServer:(BOOL)arg2;
- (BOOL)deleteMailbox:(id)arg1 reflectToServer:(BOOL)arg2;
- (BOOL)_askToChangePathPrefixToCreateMailbox:(id)arg1 displayName:(id)arg2 withGateway:(id)arg3;
- (id)validNameForMailbox:(id)arg1 fromDisplayName:(id)arg2 error:(id *)arg3;
- (id)createMailboxWithParent:(id)arg1 displayName:(id)arg2 localizedDisplayName:(id)arg3;
- (BOOL)_createMailbox:(id)arg1 withGateway:(id)arg2;
- (id)_listingForMailbox:(id)arg1 listAllChildren:(BOOL)arg2 highPriority:(BOOL)arg3;
- (id)_recursivelyFilterMailboxList:(id)arg1 accordingToList:(id)arg2;
- (id)_namespacePrefixesForPrivate:(BOOL)arg1 public:(BOOL)arg2 shared:(BOOL)arg3;
- (id)_listingForMailbox:(id)arg1 listAllChildren:(BOOL)arg2 onlySubscribed:(BOOL)arg3 highPriority:(BOOL)arg4;
- (void)_synchronizeMailboxListDuringMailCheck;
- (void)_updateSpecialMailboxes;
- (BOOL)_synchronizeMailboxListHighPriority:(BOOL)arg1;
- (BOOL)hasCapability:(unsigned long long)arg1;
- (BOOL)supportsIDLE;
- (id)lastKnownCapabilities;
- (id)separatorChar;
- (void)_setSeparatorChar:(id)arg1;
- (void)fetchSynchronouslyIsAuto:(id)arg1;
- (void)_asynchronouslyFetchUnreadCountsCheckForNewMessages:(BOOL)arg1;
- (void)setIsOffline:(BOOL)arg1;
- (void)_setIsOffline:(BOOL)arg1;
- (void)clearQuotaRoots;
- (id)quotaRootForName:(id)arg1 createIfNeeded:(BOOL)arg2;
- (void)_startObserving:(BOOL)arg1 IMAPMailbox:(id)arg2;
- (void)_removeIMAPMailboxWithName:(id)arg1;
- (void)_renameIMAPMailboxWithMailbox:(id)arg1 fromName:(id)arg2 toName:(id)arg3;
- (id)gmailLabelWithName:(id)arg1;
- (id)_addIMAPMailboxForMailbox:(id)arg1 name:(id)arg2;
- (id)_IMAPMailboxForMailbox:(id)arg1 name:(id)arg2 createIfNeeded:(BOOL)arg3;
- (id)IMAPMailboxForMailboxName:(id)arg1 createIfNeeded:(BOOL)arg2;
- (id)IMAPMailboxForMailbox:(id)arg1 createIfNeeded:(BOOL)arg2;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)validateConnections;
- (void)_validateConnections;
- (void)releaseAllConnections;
- (void)_releaseAllConnectionsAndCallSuper:(BOOL)arg1 saveOfflineCache:(BOOL)arg2;
- (BOOL)_recoverFromConnectionlessStateHighPriority:(BOOL)arg1;
- (BOOL)shouldRetryConnectionWithoutCertificateCheckingAfterError:(id)arg1 host:(id)arg2 didPromptUser:(char *)arg3;
- (id)_getPotentialGatewayForMailbox:(id)arg1 options:(unsigned long long)arg2 createdNewConnection:(char *)arg3 needsSelect:(char *)arg4;
- (id)_gatewayForMailbox:(id)arg1 name:(id)arg2 options:(unsigned long long)arg3;
- (void)_invalidateMailboxWithName:(id)arg1 expunge:(BOOL)arg2 URLToCompact:(id)arg3;
- (void)invalidateMailboxWithName:(id)arg1 expunge:(BOOL)arg2 URLToCompact:(id)arg3;
- (void)recoverFromConnectionLoss;
- (id)gatewayForExistingConnectionToMailbox:(id)arg1;
- (id)gatewayForMailbox:(id)arg1 options:(unsigned long long)arg2;
- (void)handleOpenMailboxError:(id)arg1;
- (id)authSchemesForConnection:(id)arg1;
- (BOOL)canAuthenticateWithScheme:(id)arg1 connection:(id)arg2;
- (BOOL)connectAndAuthenticate:(id)arg1;
- (void)detectAllMailWithGateway:(id)arg1;
- (void)setShouldMoveDeletedMessagesToTrash:(BOOL)arg1;
- (BOOL)shouldMoveDeletedMessagesToTrash;
- (BOOL)isGmailAccount;
@property long long gmailCapabilitiesSupport;
@property BOOL hasServerDefinedTrashMailbox;
@property BOOL hasServerDefinedSentMailbox;
@property BOOL hasServerDefinedJunkMailbox;
@property BOOL hasServerDefinedDraftsMailbox;
@property BOOL hasServerDefinedArchiveMailbox;
@property BOOL hasServerDefinedAllMailMailbox;
@property(copy) NSDictionary *serverID;
- (void)_clearAllPathBasedCachesAndDelete:(BOOL)arg1;
- (void)setAllowsPartialDownloads:(BOOL)arg1;
- (BOOL)allowsPartialDownloads;
- (unsigned long long)minimumPartialDownloadSize;
- (id)_dataForTemporaryUid:(unsigned int)arg1;
- (void)_checkForNewMessagesInStore:(id)arg1;
- (void)didSynchronizeMailboxCachesAndFoundChanges:(BOOL)arg1;
- (void)resetNeedToSynchronizeMailboxCaches;
- (BOOL)needToSynchronizeMailboxCaches;
- (void)synchronizeAllMailboxes;
@property unsigned int readBufferSize;
- (void)handleAlertResponse:(id)arg1;
- (BOOL)handleResponseCodeFromResponse:(id)arg1;
- (id)providerIdentifier;
- (id)iaServiceType;
- (void)_updateIdleMailbox;
- (id)allMailMailbox;
- (id)primaryMailbox;
- (BOOL)_setChildren:(id)arg1 forMailbox:(id)arg2;
@property BOOL useIDLEIfAvailable;
- (void)setCompactWhenClosingMailboxes:(BOOL)arg1;
- (BOOL)compactWhenClosingMailboxes;
- (id)authenticatedConnection;
- (id)newConnectedConnectionDiscoveringBestSettings:(BOOL)arg1 withConnectTimeout:(double)arg2 readWriteTimeout:(double)arg3;
- (id)_newConnectionWithPendingGateway:(BOOL)arg1;
@property(readonly) BOOL requiresAuthentication;
- (void *)keychainProtocol;
@property(readonly) NSString *saslProfileName;
- (long long)defaultSecurePortNumber;
- (long long)defaultPortNumber;
@property(readonly) NSArray *standardSSLPorts;
@property(readonly) NSArray *standardPorts;
- (id)mailboxPathExtension;
- (Class)storeClassForMailbox:(id)arg1;
- (void)sendAccountNeedsCheckingNotification;
- (void)doRoutineCleanup;
- (void)saveCache;
- (void)_writeCustomInfoToMailboxCache:(id)arg1;
- (void)_readCustomInfoFromMailboxCache:(id)arg1;
- (void)_cleanUpExistingMessagesIfNecessary;
@property BOOL gmailLabelsCleanUpCompleted;
- (void)completeDeferredInitialization;
- (void)dealloc;
- (id)initWithAccountInfo:(id)arg1;
- (void)setMessageCaching:(unsigned int)arg1;
- (unsigned int)messageCaching;

// Remaining properties
@property(readonly) NSString *accountTypeString;
@property(readonly) NSString *appleAuthenticationToken;
@property(readonly) NSString *applePersonID;
@property BOOL configureDynamically;
@property(copy) NSString *displayName;
@property(copy) NSString *externalHostname;
@property(readonly) NSString *googleClientToken;
@property(copy) NSString *hostname;
@property(copy) NSString *password;
@property long long portNumber;
@property(retain) MCAuthScheme *preferredAuthScheme;
@property long long securityLayerType;
@property(readonly) NSURL *subscriptionURL;
@property(readonly) NSString *subscriptionURLLabel;
@property(copy) NSString *username;
@property BOOL usesSSL;

@end

@interface MFIMAPOperation : NSObject
{
    BOOL _usesRealUids;
    NSString *_mailboxName;
}

+ (id)newOperationWithSerializedData:(id)arg1 cursor:(unsigned long long *)arg2;
@property(nonatomic) BOOL usesRealUids; // @synthesize usesRealUids=_usesRealUids;
@property(copy, nonatomic) NSString *mailboxName; // @synthesize mailboxName=_mailboxName;
- (unsigned int)lastTemporaryUid;
- (unsigned int)firstTemporaryUid;
- (void)expungeTemporaryUid:(unsigned int)arg1;
- (BOOL)actsOnTemporaryUid:(unsigned int)arg1;
- (BOOL)isSourceOfTemporaryUid:(unsigned int)arg1;
- (unsigned long long)approximateSize;
@property(readonly, nonatomic) unsigned char operationType;
- (void)dealloc;
- (id)init;
- (id)_initWithMailboxName:(id)arg1;
- (void)serializeIntoData:(id)arg1;
- (void)_deserializeOpSpecificValuesFromData:(id)arg1 cursor:(unsigned long long *)arg2;
- (unsigned char)_magic;

@end

@interface MFIMAPCreateOperation : MFIMAPOperation
{
}

- (id)description;
- (unsigned char)operationType;
- (id)initWithMailboxToCreate:(id)arg1;

@end

@interface MFIMAPDeleteOperation : MFIMAPOperation
{
}

- (id)description;
- (unsigned char)operationType;
- (id)initWithMailboxToDelete:(id)arg1;

@end

@interface MFIMAPStoreOperation : MFIMAPOperation
{
    NSArray *_objectsToSet;
    NSArray *_objectsToClear;
    NSPointerArray *_uids;
}

@property(retain, nonatomic) NSPointerArray *uids; // @synthesize uids=_uids;
@property(copy, nonatomic) NSArray *objectsToClear; // @synthesize objectsToClear=_objectsToClear;
@property(copy, nonatomic) NSArray *objectsToSet; // @synthesize objectsToSet=_objectsToSet;
- (void)expungeTemporaryUid:(unsigned int)arg1;
- (BOOL)actsOnTemporaryUid:(unsigned int)arg1;
- (void)serializeIntoData:(id)arg1;
- (void)_deserializeOpSpecificValuesFromData:(id)arg1 cursor:(unsigned long long *)arg2;
@property(readonly, nonatomic) NSArray *uidStrings;
- (unsigned long long)approximateSize;
- (void)dealloc;
- (id)_initWithObjectsToSet:(id)arg1 objectsToClear:(id)arg2 forUids:(id)arg3 inMailbox:(id)arg4;

// Remaining properties
@property(nonatomic) BOOL usesRealUids;

@end

@interface MFIMAPStoreFlagsOperation : MFIMAPStoreOperation
{
}

- (id)description;
@property(readonly, nonatomic) NSArray *flagsToClear;
@property(readonly, nonatomic) NSArray *flagsToSet;
- (unsigned char)operationType;
- (id)initWithFlagsToSet:(id)arg1 flagsToClear:(id)arg2 forUids:(id)arg3 inMailbox:(id)arg4;

@end

@interface MFIMAPStoreGmailLabelsOperation : MFIMAPStoreOperation
{
}

- (id)description;
@property(readonly, nonatomic) NSArray *gmailLabelsToClear;
@property(readonly, nonatomic) NSArray *gmailLabelsToSet;
- (unsigned char)operationType;
- (id)initWithGmailLabelsToSet:(id)arg1 gmailLabelsToClear:(id)arg2 forUids:(id)arg3 inMailbox:(id)arg4;

@end

@interface MFIMAPAppendMessageOperation : MFIMAPOperation
{
    unsigned int _uid;
    int _internalDateAsInt;
    unsigned int _size;
    NSArray *_flags;
}

@property(nonatomic) unsigned int size; // @synthesize size=_size;
@property(nonatomic) int internalDateAsInt; // @synthesize internalDateAsInt=_internalDateAsInt;
@property(copy, nonatomic) NSArray *flags; // @synthesize flags=_flags;
@property(nonatomic) unsigned int uid; // @synthesize uid=_uid;
- (id)description;
- (unsigned int)lastTemporaryUid;
- (unsigned int)firstTemporaryUid;
- (void)expungeTemporaryUid:(unsigned int)arg1;
- (BOOL)isSourceOfTemporaryUid:(unsigned int)arg1;
- (id)internalDate;
- (void)serializeIntoData:(id)arg1;
- (void)_deserializeOpSpecificValuesFromData:(id)arg1 cursor:(unsigned long long *)arg2;
- (unsigned long long)approximateSize;
- (unsigned char)operationType;
- (void)dealloc;
- (id)initWithAppendedUid:(unsigned int)arg1 approximateSize:(unsigned int)arg2 flags:(id)arg3 internalDate:(id)arg4 mailbox:(id)arg5;

// Remaining properties
@property(nonatomic) BOOL usesRealUids;

@end

@interface MFIMAPCopyMessagesOperation : MFIMAPOperation
{
    NSPointerArray *_sourceUids;
    NSPointerArray *_destinationUids;
    NSString *_destinationMailbox;
}

@property(copy, nonatomic) NSString *destinationMailbox; // @synthesize destinationMailbox=_destinationMailbox;
@property(retain, nonatomic) NSPointerArray *destinationUids; // @synthesize destinationUids=_destinationUids;
@property(retain, nonatomic) NSPointerArray *sourceUids; // @synthesize sourceUids=_sourceUids;
- (id)description;
- (unsigned int)lastTemporaryUid;
- (unsigned int)firstTemporaryUid;
- (void)expungeTemporaryUid:(unsigned int)arg1;
- (BOOL)actsOnTemporaryUid:(unsigned int)arg1;
- (void)setMessageId:(id)arg1 andInternalDate:(id)arg2 forMessageWithSourceUid:(unsigned int)arg3;
- (BOOL)getMessageId:(id *)arg1 andInternalDate:(id *)arg2 forDestinationUid:(unsigned int)arg3;
- (unsigned int)sourceUidForTemporaryUid:(unsigned int)arg1;
- (BOOL)isSourceOfTemporaryUid:(unsigned int)arg1;
- (void)serializeIntoData:(id)arg1;
- (void)_deserializeOpSpecificValuesFromData:(id)arg1 cursor:(unsigned long long *)arg2;
- (id)destinationUidStrings;
- (id)sourceUidStrings;
- (unsigned long long)approximateSize;
- (unsigned char)operationType;
- (void)dealloc;
- (id)initWithUidStringsToCopy:(id)arg1 fromMailbox:(id)arg2 toMailbox:(id)arg3 firstNewUid:(unsigned int)arg4;

// Remaining properties
@property(nonatomic) BOOL usesRealUids;

@end

@interface MFIMAPOfflineCopyOnStupidServerOperation : MFIMAPCopyMessagesOperation
{
    NSMutableArray *_messageIds;
    NSPointerArray *_internalDates;
}

@property(retain, nonatomic) NSPointerArray *internalDates; // @synthesize internalDates=_internalDates;
@property(retain, nonatomic) NSMutableArray *messageIds; // @synthesize messageIds=_messageIds;
- (unsigned long long)approximateSize;
- (void)expungeTemporaryUid:(unsigned int)arg1;
- (void)setMessageId:(id)arg1 andInternalDate:(id)arg2 forMessageWithSourceUid:(unsigned int)arg3;
- (BOOL)getMessageId:(id *)arg1 andInternalDate:(id *)arg2 forDestinationUid:(unsigned int)arg3;
- (void)dealloc;
- (void)_deserializeOpSpecificValuesFromData:(id)arg1 cursor:(unsigned long long *)arg2;
- (unsigned char)_magic;
- (void)serializeIntoData:(id)arg1;

@end

@interface _IMAPOfflineRestoreContext : NSObject
{
    MCActivityMonitor *_monitor;
    IMAPGateway *_gateway;
    NSMapTable *_temporaryToRealUidMap;
    NSMutableDictionary *_storesByMailboxName;
    unsigned long long _currentSize;
    unsigned long long _totalSize;
    long long _activityAccessKey;
    NSString *_oldTaskName;
}

@property(copy, nonatomic) NSString *oldTaskName; // @synthesize oldTaskName=_oldTaskName;
@property(nonatomic) long long activityAccessKey; // @synthesize activityAccessKey=_activityAccessKey;
@property(nonatomic) unsigned long long totalSize; // @synthesize totalSize=_totalSize;
@property(nonatomic) unsigned long long currentSize; // @synthesize currentSize=_currentSize;
@property(retain, nonatomic) NSMutableDictionary *storesByMailboxName; // @synthesize storesByMailboxName=_storesByMailboxName;
@property(retain, nonatomic) NSMapTable *temporaryToRealUidMap; // @synthesize temporaryToRealUidMap=_temporaryToRealUidMap;
@property(retain, nonatomic) IMAPGateway *gateway; // @synthesize gateway=_gateway;
@property(retain, nonatomic) MCActivityMonitor *monitor; // @synthesize monitor=_monitor;
- (id)description;
- (void)dealloc;

@end

@interface MFIMAPOperationCache : NSObject <IMAPOfflineCache>
{
    MFIMAPAccount *_account;
    NSMutableArray *_ops;
    unsigned int _lastUid;
    BOOL _opsChanged;
}

- (id)description;
- (id)_deferredOperations;
- (void)performDeferredOperationsWithGateway:(id)arg1 outDisplayableError:(id *)arg2;
- (BOOL)_performCopyOperation:(id)arg1 withContext:(id)arg2 failedSourceUids:(id)arg3 error:(id *)arg4;
- (BOOL)_performAppendOperation:(id)arg1 withContext:(id)arg2 backupManager:(id)arg3 suggestedOfflineRestoreName:(id)arg4 recoveredMailboxName:(id *)arg5 error:(id *)arg6;
- (BOOL)_performStoreOperation:(id)arg1 forGmailLabels:(BOOL)arg2 ignoringUids:(id)arg3 withContext:(id)arg4;
- (BOOL)_performDeleteOperation:(id)arg1 withContext:(id)arg2;
- (BOOL)_performCreateOperation:(id)arg1 withContext:(id)arg2;
- (BOOL)hasOperationsForMailbox:(id)arg1;
- (unsigned long long)numberOfPendingChanges;
- (void)saveChanges;
- (void)expungeMessageWithMessageID:(id)arg1 documentID:(id)arg2;
- (void)expungeTemporaryUid:(unsigned int)arg1;
- (void)_expungeMessageWithTemporaryUid:(unsigned int)arg1 orMessageID:(id)arg2 documentID:(id)arg3;
- (unsigned int)uidForAppendingMessageData:(id)arg1 withFlags:(id)arg2 andInternalDate:(id)arg3 toMailbox:(id)arg4;
- (unsigned int)firstUidForCopyingMessages:(id)arg1 toMailbox:(id)arg2;
- (void)setGmailLabels:(id)arg1 andClearGmailLabels:(id)arg2 forUids:(id)arg3 forMailbox:(id)arg4;
- (void)setFlags:(id)arg1 andClearFlags:(id)arg2 forUids:(id)arg3 forMailbox:(id)arg4;
- (void)_setFlagsOrGmailLabels:(id)arg1 andClearFlagsOrGmailLabels:(id)arg2 actuallyGmailLabels:(BOOL)arg3 forMessages:(id)arg4;
- (void)setGmailLabels:(id)arg1 andClearGmailLabels:(id)arg2 forMessages:(id)arg3;
- (void)setFlags:(id)arg1 andClearFlags:(id)arg2 forMessages:(id)arg3;
- (void)deleteMailbox:(id)arg1;
- (void)createMailbox:(id)arg1;
- (void)dealloc;
- (id)init;
- (id)initWithIMAPAccount:(id)arg1;

@end

@interface MFIMAPSizeEngine : MFRemoteStoreSizeEngine
{
    unsigned long long _workerThreadCount;
    NSMutableDictionary *_mailboxesByQuotaRoot;
    NSMutableSet *_quotasToFetch;
    NSMutableSet *_observedIMAPMailboxes;
    NSMutableSet *_observedIMAPQuotaRoots;
    long long _quotaStatus;
}

- (BOOL)mailbox:(id)arg1 usesQuotaName:(id)arg2;
- (id)mutableCopyOfMailboxesForQuotaName:(id)arg1;
- (id)usageForQuotaName:(id)arg1;
- (id)quotaNames;
- (long long)quotaStatus;
- (BOOL)_shouldStartWorkerThread;
- (void)_runWorkerThread;
- (void)_getSizeForMailbox:(id)arg1;
- (void)_mailboxBecameInvalid:(id)arg1;
- (void)_changeQuotaRoots:(id)arg1 forMailbox:(id)arg2;
- (BOOL)_changeUsageInfo:(CDStruct_1dee9796 *)arg1 forMailbox:(id)arg2 refetchQuotas:(BOOL)arg3;
- (void)_addQuotaRootsFromMailbox:(id)arg1;
- (void)_addUsageInfoFromMailbox:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)dealloc;
- (id)initWithAccount:(id)arg1;

@end

@interface MFJunkMail : NSObject
{
}

+ (id)mapDescriptionFromMapType:(int)arg1;
+ (int)mapTypeFromMapName:(id)arg1;
+ (id)mapNameForMapType:(int)arg1;

@end

@interface MFJunkMailFilter : NSObject
{
    struct __LSMMap *_map;
    BOOL _isDirty;
    BOOL _useCleanMap;
    BOOL _isInTraining;
    NSURL *_oldMapFileURL;
    NSURL *_mapFileURL;
    NSString *_mapFilePath;
}

+ (void)resetJunkMailUsageCounters;
+ (void)resetJunkMailTrainingBalance;
+ (void)incrementJunkMailTrainingCreditBy:(long long)arg1;
+ (void)incrementJunkMailTrainingDebtBy:(long long)arg1;
+ (BOOL)shouldUpdateTrainingDebt;
+ (id)_junkFilterUsageCounterKeys;
+ (id)sharedInstance;
@property(nonatomic) BOOL isInTraining; // @synthesize isInTraining=_isInTraining;
@property(retain) NSString *mapFilePath; // @synthesize mapFilePath=_mapFilePath;
@property(retain) NSURL *mapFileURL; // @synthesize mapFileURL=_mapFileURL;
@property(retain) NSURL *oldMapFileURL; // @synthesize oldMapFileURL=_oldMapFileURL;
@property(nonatomic) BOOL useCleanMap; // @synthesize useCleanMap=_useCleanMap;
- (void)_saveTrainingWithDelay;
@property(nonatomic) BOOL isDirty;
- (void)userDidReplyToMessage:(id)arg1;
- (id)trainOnMessages:(id)arg1 junkMailLevel:(long long)arg2;
- (long long)junkMailLevelForMessage:(id)arg1 junkRecorder:(id)arg2;
- (long long)junkMailLevelForMessage:(id)arg1;
- (id)_usageCounter;
@property(readonly) BOOL gatherUsageCounts;
- (id)state;
@property(readonly) BOOL isEnabled;
@property(readonly) long long junkMailTrainingCredit;
@property(readonly) long long junkMailTrainingDebt;
@property(readonly) long long junkMailTrainingBalance;
- (void)saveTraining;
- (void)reset;
@property(readonly) unsigned long long manuallyMarkedAsNotJunkMessageCount;
@property(readonly) unsigned long long manuallyMarkedAsJunkMessageCount;
@property(readonly) unsigned long long evaluatedAsJunkMessageCount;
@property(readonly) unsigned long long evaluatedMessageCount;
- (void)setMap:(struct __LSMMap *)arg1;
- (struct __LSMMap *)map;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;

@end

@interface MFLibrary : NSObject <MFLibraryInterface>
{
}

+ (unsigned long long)numberOfMessagesForAccount:(id)arg1;
+ (void)queueConversationsChangedNotification:(id)arg1;
+ (void)queueMessagesCompactedNotification:(id)arg1;
+ (void)queueMessageGmailLabelsChangedNotificationForMessages:(id)arg1 labelChanges:(id)arg2;
+ (void)queueMessagesChangedNotificationForMessages:(id)arg1 flags:(id)arg2 oldFlagsByMessage:(id)arg3;
+ (void)queueMessagesUpdatedNotification:(id)arg1;
+ (void)queueMessagesAddedNotification:(id)arg1;
+ (void)_queueMessagesNotification:(id)arg1 withUserInfo:(id)arg2;
+ (void)didCommit:(struct sqlite3 *)arg1;
+ (id)newUnsignedForQuery:(id)arg1 db:(struct sqlite3 *)arg2;
+ (void)tagDatabaseVersionIfNeeded:(struct sqlite3 *)arg1;
+ (unsigned long long)lastWriteMinorVersion;
+ (void)flushCachedDatabases;
+ (void)_checkInDBHandle:(id)arg1 forWriting:(BOOL)arg2;
+ (id)_checkOutDBHandleForWriting:(BOOL)arg1 isPrivileged:(BOOL)arg2;
+ (void)executeReadBlockInDatabase:(id)arg1;
+ (void)executeWriteBlockInDatabase:(id)arg1;
+ (void)executeBlock:(id)arg1 isWriter:(void)arg2 useTransaction:(BOOL)arg3 isPrivileged:(BOOL)arg4;
+ (id)sqlSanitizeAndQuoteArray:(id)arg1;
+ (id)sqlSanitizeNSString:(id)arg1;
+ (long long)cachedMailboxIDForMailbox:(id)arg1;
+ (long long)mailboxIDForMailbox:(id)arg1;
+ (id)_mailboxForMailboxID:(long long)arg1 forceCreation:(BOOL)arg2;
+ (id)mailboxForMailboxID:(long long)arg1 forceCreation:(BOOL)arg2;
+ (long long)mailboxIDForMailbox:(id)arg1 loadIfNotPresent:(BOOL)arg2;
+ (BOOL)deleteEventForMessage:(id)arg1;
+ (BOOL)updateCalendarEvent:(id)arg1 forMessage:(id)arg2;
+ (BOOL)addCalendarEvent:(id)arg1 toMessage:(id)arg2;
+ (id)calendarEventForMessageID:(long long)arg1;
+ (void)prepareToReImportMessages;
+ (void)cleanOldDatabases;
+ (unsigned long long)totalNumberOfMessages;
+ (void)setTotalNumberOfMessages:(unsigned long long)arg1;
+ (unsigned long long)runningIndexOfCurrentMessage;
+ (void)incrementRunningIndexOfCurrentMessage;
+ (id)currentMailbox;
+ (void)setCurrentMailbox:(id)arg1;
+ (BOOL)threadIsExecutingInDatabaseBlock;
+ (void)setInitialized;
+ (BOOL)isInitialized;
+ (long long)libraryStatusAsReader;
+ (long long)libraryStatusAsWriter;
+ (long long)_libraryStatusCanWrite:(BOOL)arg1;
+ (void)dispose;
+ (BOOL)isEmptyDB;
+ (BOOL)fileExists;
+ (void)takeAccountsOnlineAllAccounts:(BOOL)arg1;
+ (void)upgradeMessageDirectoriesIfNeeded;
+ (void)_upgradeMessageDirectoriesSynchronously;
+ (BOOL)importMessagesFromEnabledAccounts;
+ (BOOL)libraryIsImporting;
+ (void)setLibraryIsImporting:(BOOL)arg1;
+ (BOOL)importMailbox:(id)arg1;
+ (BOOL)rebuildMailbox:(id)arg1;
+ (id)filterContiguousMessages:(id)arg1 forCriterion:(id)arg2 options:(unsigned int)arg3;
+ (id)criterionExpressionStringForStartLibraryID:(long long)arg1 count:(unsigned long long)arg2;
+ (BOOL)boolForCriterion:(id)arg1;
+ (unsigned long long)countForCriterion:(id)arg1;
+ (unsigned long long)countForCriterion:(id)arg1 monitor:(id)arg2;
+ (id)_queryForCountCriterion:(id)arg1;
+ (id)messagesMatchingCriterion:(id)arg1 options:(unsigned int)arg2 searchType:(long long)arg3;
+ (id)spotlightCallbackDispatchQueue;
+ (void)sendMessagesMatchingCriterion:(id)arg1 to:(id)arg2 options:(unsigned int)arg3 searchType:(long long)arg4 async:(BOOL)arg5;
+ (struct __MDQuery *)createAllMailboxesSpotlightQueryWithQueryString:(id)arg1 attributes:(struct __CFArray *)arg2 forUnreadCount:(BOOL)arg3 withMailboxExclusions:(BOOL)arg4 includeWhereFromsCriterion:(BOOL)arg5;
+ (id)spotlightQueryStringWithQueryString:(id)arg1;
+ (id)countedSpotlightQueryStringWithQueryString:(id)arg1;
+ (id)queryForCriterion:(id)arg1 options:(unsigned int)arg2;
+ (id)queryForCriterion:(id)arg1 options:(unsigned int)arg2 baseTable:(unsigned long long)arg3 isSubquery:(BOOL)arg4 fixUpCriterion:(BOOL)arg5;
+ (void)markMessageAsViewed:(id)arg1 viewedDate:(id)arg2;
+ (BOOL)hasCacheFileForMessage:(id)arg1 part:(id)arg2 directoryContents:(id)arg3;
+ (BOOL)hasCacheFileForMessage:(id)arg1 directoryContents:(id)arg2;
+ (id)fullMessageDataForMessage:(id)arg1;
+ (id)_messageDataAtPath:(id)arg1;
+ (BOOL)isPartialMessageBodyAvailable:(id)arg1;
+ (BOOL)isMessageContentsLocallyAvailable:(id)arg1;
+ (id)dataForMimePart:(id)arg1;
+ (id)fullBodyDataForMessage:(id)arg1;
+ (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2;
+ (id)bodyDataForMessage:(id)arg1;
+ (id)bodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2;
+ (id)headerDataForMessage:(id)arg1;
+ (id)bodyDataAtPath:(id)arg1 headerData:(id *)arg2;
+ (id)_emlxPListInFile:(id)arg1 plistOffset:(unsigned long long *)arg2;
+ (id)emlxPListAtURL:(id)arg1;
+ (void)setData:(id)arg1 forMessage:(id)arg2 isPartial:(BOOL)arg3 hasCompleteText:(BOOL)arg4;
+ (void)setData:(id)arg1 forMessage:(id)arg2 isPartial:(BOOL)arg3;
+ (void)appendData:(id)arg1 forMessage:(id)arg2 part:(id)arg3;
+ (id)existingDataPathForMessage:(id)arg1;
+ (id)messageWithDataPath:(id)arg1;
+ (id)_dataPathForMessage:(id)arg1 type:(long long)arg2;
+ (id)dataPathForMessage:(id)arg1 part:(id)arg2;
+ (id)dataPathForMessage:(id)arg1;
+ (id)_dataPathForMessage:(id)arg1 withFilename:(id)arg2;
+ (id)_dataPathForLibraryID:(long long)arg1 pathToMailbox:(id)arg2 type:(long long)arg3;
+ (id)dataPathForLibraryID:(long long)arg1 pathToMailbox:(id)arg2 fileExists:(char *)arg3;
+ (id)attachmentsDirectoryForMessage:(id)arg1;
+ (id)_filenameForLibraryID:(long long)arg1 type:(long long)arg2;
+ (id)filenameForLibraryID:(long long)arg1 part:(id)arg2;
+ (id)intermediateDirectoryForLibraryID:(long long)arg1 forAttachments:(BOOL)arg2;
+ (id)v2_intermediateDirectoryForLibraryID:(long long)arg1 forAttachments:(BOOL)arg2;
+ (id)dataDirectoryForMailbox:(id)arg1;
+ (void)_invalidateDirectoryForMailboxes:(id)arg1;
+ (id)databaseUUIDString;
+ (void)_setDatabaseUUIDString:(id)arg1;
+ (void)loadDatabaseUUIDStringIfNeeded:(struct sqlite3 *)arg1;
+ (void)setComputedHighestModificationSequence:(unsigned long long)arg1 forIMAPMailboxURL:(id)arg2;
+ (unsigned long long)computedHighestModificationSequenceforIMAPMailboxURL:(id)arg1;
+ (void)setAllegedHighestModificationSequence:(unsigned long long)arg1 forIMAPMailboxURL:(id)arg2;
+ (unsigned long long)allegedHighestModificationSequenceforIMAPMailboxURL:(id)arg1;
+ (void)updateEWSOfflineIdsToRealIds:(id)arg1;
+ (id)EWSSyncStateForMailbox:(id)arg1;
+ (void)setEWSSyncState:(id)arg1 forMailbox:(id)arg2;
+ (id)EWSFolderIdsByURLForMailboxes:(id)arg1;
+ (id)EWSFolderIdForMailbox:(id)arg1;
+ (void)setEWSFolderId:(id)arg1 forMailbox:(id)arg2;
+ (id)_EWSProperty:(char *)arg1 forMailbox:(id)arg2 errorString:(id)arg3;
+ (void)_addEWSProperty:(char *)arg1 value:(id)arg2 forMailbox:(id)arg3 errorString:(id)arg4;
+ (BOOL)_EWSFolderExistsForMailbox:(id)arg1 errorString:(id)arg2;
+ (id)draftWithDocumentID:(id)arg1 mailbox:(id)arg2;
+ (id)lastMessageWithMessageID:(id)arg1 inMailbox:(id)arg2;
+ (id)messagesWithMessageID:(id)arg1 inMailbox:(id)arg2;
+ (void)deleteMailboxes:(id)arg1 forRebuild:(BOOL)arg2;
+ (void)deleteMailboxes:(id)arg1;
+ (BOOL)renameMailboxes:(id)arg1 to:(id)arg2;
+ (void)compactMailbox:(id)arg1;
+ (void)removeMessages:(id)arg1 cleanUpAfter:(BOOL)arg2;
+ (void)removeMessages:(id)arg1;
+ (BOOL)shouldCancel;
+ (void)updateFileForMessage:(id)arg1;
+ (void)reloadMessage:(id)arg1;
+ (id)snippetsForMessages:(id)arg1;
+ (BOOL)loadSecondaryMetadataForMessage:(id)arg1;
+ (BOOL)_loadSecondaryMetadataForMessage:(id)arg1 fromDB:(struct sqlite3 *)arg2;
+ (id)mailboxNameForMessage:(id)arg1;
+ (id)accountForMessage:(id)arg1;
+ (id)remoteStoreForMessage:(id)arg1;
+ (id)mailboxForMessage:(id)arg1;
+ (id)urlForMailboxID:(long long)arg1;
+ (void)mailboxesDidChange;
+ (id)copyMailboxURLToRowIDMap;
+ (id)referencesForLibraryID:(long long)arg1;
+ (BOOL)boolForQuery:(id)arg1;
+ (unsigned long long)unsignedCountForQuery:(id)arg1 monitor:(id)arg2;
+ (BOOL)messageHasRelatedNonJunkMessages:(id)arg1;
+ (id)firstReplyToMessage:(id)arg1;
+ (id)messageWithLibraryID:(long long)arg1;
+ (id)messageWithLibraryID:(long long)arg1 options:(unsigned int)arg2;
+ (id)messagesWithMessageIDHeader:(id)arg1;
+ (id)messageWithMessageID:(id)arg1;
+ (void)setStoreForMessage:(id)arg1 fromMailbox:(id)arg2 knownStores:(id)arg3;
+ (void)setStoreForMessage:(id)arg1 knownStores:(id)arg2;
+ (void)setStoresForMessages:(id)arg1;
+ (id)getDetailsForMessagesWithQuery:(char *)arg1 contiguous:(BOOL)arg2 firstRemoteID:(unsigned long long)arg3 lastRemoteID:(unsigned long long)arg4 fromMailbox:(id)arg5;
+ (id)getDetailsForMessagesWithRemoteIDs:(id)arg1 fromMailbox:(id)arg2;
+ (id)getDetailsForMessagesWithRemoteIDStrings:(id)arg1 fromMailbox:(id)arg2;
+ (unsigned int)maximumRemoteIDForMailbox:(id)arg1;
+ (id)messageWithRemoteID:(id)arg1 inRemoteMailbox:(id)arg2 options:(unsigned int)arg3;
+ (id)messagesWithRemoteIDs:(id)arg1 inRemoteMailbox:(id)arg2 options:(unsigned int)arg3;
+ (void)setMessageCountsForMailboxes;
+ (unsigned long long)unreadCountForMessageType:(BOOL)arg1;
+ (unsigned long long)totalCountForMailbox:(id)arg1;
+ (void)gatherCountsForMailbox:(id)arg1 totalCount:(unsigned long long *)arg2 unreadCount:(unsigned long long *)arg3 deletedCount:(unsigned long long *)arg4 totalSize:(unsigned long long *)arg5;
+ (id)unreadMessagesForMailbox:(id)arg1;
+ (id)messagesForMailbox:(id)arg1 olderThanNumberOfDays:(long long)arg2;
+ (id)messagesForMailbox:(id)arg1 where:(id)arg2 sortedBy:(id)arg3 ascending:(BOOL)arg4 options:(unsigned int)arg5;
+ (void)sendMessagesForMailbox:(id)arg1 where:(id)arg2 sortedBy:(id)arg3 ascending:(BOOL)arg4 to:(id)arg5 options:(unsigned int)arg6;
+ (id)messagesWhere:(id)arg1 sortedBy:(id)arg2 options:(unsigned int)arg3;
+ (id)messagesMatchingQuery:(const char *)arg1 options:(unsigned int)arg2;
+ (void)sendMessagesMatchingQuery:(const char *)arg1 to:(id)arg2 options:(unsigned int)arg3;
+ (void)_setRecipientTypeForMessages:(id)arg1;
+ (id)_copyActiveMailboxesClause;
+ (void)_updateActiveMailboxesClause;
+ (id)_updatedActiveMailboxesClause:(id)arg1;
+ (BOOL)_isActiveMailboxID:(long long)arg1;
+ (void)_updateActiveMailboxes;
+ (id)_updatedActiveMailboxes:(id)arg1;
+ (void)_getActiveAccountURLs:(id)arg1 andActiveMailboxURLs:(id)arg2;
+ (void)disableActiveMailboxFiltering;
+ (void)invalidateActiveMailboxesCaches;
+ (id)myAddressIDsString;
+ (void)invalidateMyEmailAddresses;
+ (int)accessSequenceNumber;
+ (int)updateSequenceNumber;
+ (long long)threadPriority;
+ (void)setThreadPriority:(long long)arg1;
+ (void)setAttachmentNames:(id)arg1 forMessage:(id)arg2;
+ (id)duplicateMessages:(id)arg1 newRemoteIDs:(id)arg2 newDocumentIDs:(id)arg3 forMailbox:(id)arg4 setFlags:(long long)arg5 clearFlags:(long long)arg6 createNewCacheFiles:(BOOL)arg7 error:(id *)arg8;
+ (id)duplicateMessages:(id)arg1 newRemoteIDs:(id)arg2 newDocumentIDs:(id)arg3 forMailbox:(id)arg4 setFlags:(long long)arg5 clearFlags:(long long)arg6 messageFlagsForMessages:(id)arg7 createNewCacheFiles:(BOOL)arg8 error:(id *)arg9;
+ (id)addMessages:(id)arg1 withMailbox:(id)arg2 error:(id *)arg3;
+ (id)addMessages:(id)arg1 withMailbox:(id)arg2 progressDelegate:(id)arg3 error:(id *)arg4;
+ (id)addMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(BOOL)arg3 oldMessagesByNewMessage:(id)arg4 error:(id *)arg5;
+ (id)addMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(BOOL)arg3 isInitialImport:(BOOL)arg4 oldMessagesByNewMessage:(id)arg5 error:(id *)arg6;
+ (id)addMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(BOOL)arg3 isInitialImport:(BOOL)arg4 oldMessagesByNewMessage:(id)arg5 remoteIDs:(id)arg6 setFlags:(long long)arg7 clearFlags:(long long)arg8 messageFlagsForMessages:(id)arg9 copyFiles:(BOOL)arg10 error:(id *)arg11;
+ (id)insertOrUpdateMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(BOOL)arg3 isInitialImport:(BOOL)arg4 oldMessagesByNewMessage:(id)arg5 remoteIDs:(id)arg6 newDocumentIDs:(id)arg7 setFlags:(long long)arg8 clearFlags:(long long)arg9 messageFlagsForMessages:(id)arg10 copyFiles:(BOOL)arg11 progressDelegate:(id)arg12 updateRowIDs:(id)arg13 error:(id *)arg14;
+ (void)resetConversationIDForMessages:(id)arg1;
+ (void)updateDatabaseValuesIfNeeded;
+ (void)cleanupTablesReferencingMessageID:(long long)arg1 inDatabase:(id)arg2;
+ (BOOL)canUseEmlxFileWhenCopyingMessage:(id)arg1 fromAccount:(id)arg2 toAccount:(id)arg3;
+ (BOOL)isLibraryMessage:(id)arg1;
+ (BOOL)isLocalAccount:(id)arg1;
+ (BOOL)isRemoteStoreAccount:(id)arg1;
+ (void)fixAttachmentCache;
+ (void)addGmailLabelsToEmlx;
+ (void)hideMailboxesNotInLibraryFromSpotlight;
+ (void)backfillDateLastViewedAttribute;
+ (void)_updateDateLastViewed:(int)arg1 forLibraryID:(long long)arg2;
+ (void)deleteDataDirectoriesForMailbox:(id)arg1;
+ (void)touchDirectoryForMailbox:(id)arg1;
+ (void)_removeAlternatePathForEmlxPath:(id)arg1;
+ (BOOL)writeEmlxFile:(id)arg1 forMessage:(id)arg2 withBodyData:(id)arg3 plistData:(id)arg4 error:(id *)arg5;
+ (void)_removeExtendedAttributePlistFromEMLX:(id)arg1;
+ (id)plistDataForMessage:(id)arg1 subject:(id)arg2 sender:(id)arg3 to:(id)arg4 dateSent:(id)arg5 dateReceived:(id)arg6 dateLastViewed:(id)arg7 remoteID:(id)arg8 originalMailboxURLString:(id)arg9 gmailLabels:(id)arg10 flags:(long long)arg11 mergeWithDictionary:(id)arg12;
+ (void)_sendAttributesToSpotlight:(id)arg1 attributes:(id)arg2 replaceExisting:(BOOL)arg3;
+ (void)_sendAttributesToSpotlight:(id)arg1 bodyData:(id)arg2 plistData:(id)arg3 replaceExisting:(BOOL)arg4;
+ (void)updateNormalizedSubjectsIfNeededWithHandle:(id)arg1;
+ (void)_mailAccountsDidChange:(id)arg1;
+ (void)_mailboxWasRenamed:(id)arg1;
+ (void)_mailboxWillBeInvalidated:(id)arg1;
+ (BOOL)setupLibrary;
+ (void)initialize;
+ (id)writeQueue;
+ (BOOL)initializeDatabase:(struct sqlite3 *)arg1;
+ (void)updateSize:(id)arg1 forMessage:(id)arg2;
+ (void)setFlagsAndColorForMessages:(id)arg1;
+ (void)setBackgroundColorForMessages:(id)arg1 textColorForMessages:(id)arg2;
+ (void)_commitFlagsForMessage:(id)arg1 oldFlags:(id)arg2;
+ (void)updateGmailLabelsFromDictionary:(id)arg1 forMessages:(id)arg2;
+ (id)_mailboxIDsStringForMailboxes:(id)arg1;
+ (void)clearLabelsForMailboxes:(id)arg1;
+ (void)removeSourceMailboxFromMailboxes:(id)arg1;
+ (void)removeSourceMailbox:(id)arg1;
+ (void)setSourceMailbox:(id)arg1 forMailboxes:(id)arg2;
+ (void)recalculateMessageCountsForMailboxIDs:(id)arg1;
+ (void)loadMessageCountsForMailboxes;
+ (void)commitFlagsForMessage:(id)arg1 oldFlags:(unsigned int)arg2;
+ (void)setSnippetsForMessages:(id)arg1;
+ (void)waitForCommitsToFinish;
+ (void)_updateMessageFilesInBackground;
+ (void)_commitMessagesInBackground;
+ (void)commitSynchronouslyPostingMessages:(id)arg1 postFlags:(id)arg2 postingOldFlagsByMessage:(id)arg3;
+ (void)commitSynchronously;
+ (void)synchronouslyUpdateMessageFiles;
+ (void)unScheduleMessageFileUpdate;
+ (void)scheduleMessageFileUpdate;
+ (void)unScheduleCommit;
+ (void)scheduleCommit;
+ (void)_setCommitTimer:(id)arg1;
+ (void)_addMessagesNeedingEmlxUpdate:(id)arg1;
+ (void)updateJunkMessagesForIndexing;
+ (void)flagsChangedForMessages:(id)arg1;
+ (void)restoreBackingStoreUpdateJournalIfNeeded;
+ (void)_mergeRestoreMessageLibraryIDsToUpdate:(id)arg1;
+ (BOOL)updateBackingStoreUpdateJournal;
+ (BOOL)removeBackingStoreUpdateJournal;
+ (id)backingStoreJournalPath;
+ (id)backingStoreJournalDirectory;
+ (void)commitMessage:(id)arg1 immediately:(BOOL)arg2;
+ (id)sharedInstance;
+ (void)loadSearchSettings;

@end

@interface _MFMessageLoadingContext : NSObject
{
    unsigned int _options;
    NSMutableSet *_seenConversationIDs;
    NSMutableArray *_messages;
    id <MFMessageConsumer> _target;
    unsigned long long _chunkSize;
    double _chunkInterval;
    double _lastChunkSentTime;
    unsigned long long _messagesLoaded;
    struct sqlite3 *_database;
}

@property(nonatomic) struct sqlite3 *database; // @synthesize database=_database;
@property(nonatomic) unsigned int options; // @synthesize options=_options;
@property(nonatomic) unsigned long long messagesLoaded; // @synthesize messagesLoaded=_messagesLoaded;
@property(nonatomic) double lastChunkSentTime; // @synthesize lastChunkSentTime=_lastChunkSentTime;
@property(nonatomic) double chunkInterval; // @synthesize chunkInterval=_chunkInterval;
@property(nonatomic) unsigned long long chunkSize; // @synthesize chunkSize=_chunkSize;
@property(retain, nonatomic) id <MFMessageConsumer> target; // @synthesize target=_target;
@property(retain, nonatomic) NSMutableArray *messages; // @synthesize messages=_messages;
@property(retain, nonatomic) NSMutableSet *seenConversationIDs; // @synthesize seenConversationIDs=_seenConversationIDs;
- (id)description;
- (void)dealloc;

@end

@interface MFSqliteHandle : NSObject <NSCacheDelegate>
{
    BOOL _needsUnreadCountUpdate;
    struct sqlite3 *_db;
    double _busyTimer;
    NSArray *_searchStringArray;
}

+ (id)newHandleIsWriter:(BOOL)arg1;
@property(nonatomic) BOOL needsUnreadCountUpdate; // @synthesize needsUnreadCountUpdate=_needsUnreadCountUpdate;
@property(retain, nonatomic) NSArray *searchStringArray; // @synthesize searchStringArray=_searchStringArray;
@property(nonatomic) double busyTimer; // @synthesize busyTimer=_busyTimer;
@property(nonatomic) struct sqlite3 *db; // @synthesize db=_db;
- (id)newPreparedStatementWithPattern:(const char *)arg1;
- (void)dealloc;
- (int)close;
- (id)init;

@end

@interface _MFMessageCollector : NSObject <MFMessageConsumer>
{
    NSMutableArray *_messages;
    int _accessNumber;
    BOOL _didCancel;
}

- (void)finishedSendingMessages;
- (BOOL)didCancel;
@property(readonly) BOOL shouldCancel;
- (void)newMessagesAvailable:(id)arg1 conversationMembers:(id)arg2;
- (void)newMessagesAvailable:(id)arg1 conversationsMembersByConversationID:(id)arg2 options:(id)arg3;
- (void)newMessagesAvailable:(id)arg1 conversationsMembersByConversationID:(id)arg2;
- (id)messages;
- (void)dealloc;
- (id)init;

@end

@interface _MFConversationsMessageCollector : NSObject <MFMessageConsumer>
{
    NSMutableArray *_messages;
    NSMutableDictionary *_conversationsMembers;
    struct __MDQuery *_query;
}

- (void)finishedSendingMessages;
@property(readonly) BOOL shouldCancel;
- (void)newMessagesAvailable:(id)arg1 conversationsMembersByConversationID:(id)arg2 options:(id)arg3;
- (id)conversationsMembers;
- (id)messages;
- (void)setQuery:(struct __MDQuery *)arg1;
- (struct __MDQuery *)query;
- (void)dealloc;
- (id)init;

@end

@interface _MFDataCollector : NSObject
{
    NSString *_path;
    NSString *_tmpPath;
    MFLibraryMessage *_message;
    NSString *_part;
    NSFileHandle *_fileHandle;
    unsigned long long _length;
    BOOL _isEmpty;
    NSData *_plistData;
    NSDictionary *_spotlightAttributes;
}

- (void)done;
- (void)setData:(id)arg1;
- (void)dealloc;
- (id)initWithMessage:(id)arg1 isPartial:(BOOL)arg2 part:(id)arg3;

@end

@interface _MFProgressHandlerMonitorContext : NSObject
{
    id <MFQueryProgressMonitor> _progressMonitor;
    MCActivityMonitor *_activityMonitor;
}

@property(nonatomic) MCActivityMonitor *activityMonitor; // @synthesize activityMonitor=_activityMonitor;
@property(nonatomic) id <MFQueryProgressMonitor> progressMonitor; // @synthesize progressMonitor=_progressMonitor;
- (BOOL)shouldCancel;

@end

@interface MFLibraryCalendarEvent : NSObject
{
    BOOL _isAllDayEvent;
    BOOL _isOutOfDate;
    BOOL _hasBeenProcessed;
    BOOL _isResponseRequested;
    NSString *_originalReceivedAccountURLString;
    NSString *_associatedCalendarItemIdString;
    NSString *_location;
    NSString *_uid;
    NSDate *_startDate;
    NSDate *_endDate;
    long long _responseStatus;
}

@property long long responseStatus; // @synthesize responseStatus=_responseStatus;
@property BOOL isResponseRequested; // @synthesize isResponseRequested=_isResponseRequested;
@property BOOL hasBeenProcessed; // @synthesize hasBeenProcessed=_hasBeenProcessed;
@property BOOL isOutOfDate; // @synthesize isOutOfDate=_isOutOfDate;
@property BOOL isAllDayEvent; // @synthesize isAllDayEvent=_isAllDayEvent;
@property(copy) NSDate *endDate; // @synthesize endDate=_endDate;
@property(copy) NSDate *startDate; // @synthesize startDate=_startDate;
@property(copy) NSString *uid; // @synthesize uid=_uid;
@property(copy) NSString *location; // @synthesize location=_location;
@property(copy) NSString *associatedCalendarItemIdString; // @synthesize associatedCalendarItemIdString=_associatedCalendarItemIdString;
@property(copy) NSString *originalReceivedAccountURLString; // @synthesize originalReceivedAccountURLString=_originalReceivedAccountURLString;
- (void)dealloc;

@end

@interface MFLibraryIMAPMessage : MFLibraryMessage
{
    MCMessageHeaders *_headers;
}

- (id)account;
- (void)setDataSource:(id)arg1;
- (id)dataSource;
- (void)setHeaders:(id)arg1;
- (id)headers;
- (void)dealloc;

@end

@interface MFLibraryIMAPStore : MFRemoteStore <IMAPMailboxDelegate, IMAPMessageDataSource>
{
    double _lastNewMailCheckAllowedTime;
    NSString *_mailboxName;
    IMAPMailbox *_IMAPMailbox;
    IMAPDownloadCache *_downloadCache;
    IMAPCommandPipeline *_fetchPipeline;
    IMAPMailboxSyncEngine *_syncEngine;
    NSLock *_copyLock;
    NSMutableArray *_pendingCompacts;
    MCInvocationQueue *_pendingCompactsQueue;
    NSMutableDictionary *_recentFlagChangesByMessageID;
    NSMutableArray *_recentlyDeletedMessageIDs;
    BOOL _supportsCustomPermanentFlags;
    BOOL _readyToDealloc;
    unsigned long long _filesystemWatcherCookie;
    BOOL _isOpenedByUser;
    BOOL _startedWatcher;
    unsigned long long _totalCount;
}

+ (id)_newDataFromMimePart:(id)arg1 threshold:(unsigned long long)arg2;
@property BOOL startedWatcher; // @synthesize startedWatcher=_startedWatcher;
@property unsigned long long totalCount; // @synthesize totalCount=_totalCount;
@property BOOL isOpenedByUser; // @synthesize isOpenedByUser=_isOpenedByUser;
- (void)updateSelectedGatewayFromMailbox:(id)arg1;
- (void)_updateUidValidityFromMailbox:(id)arg1;
- (void)_processResponsesFromMailbox:(id)arg1;
- (void)_updateCountFromMailbox:(id)arg1 fromIDLE:(id)arg2;
- (void)updateComputedHighestModificationSequence:(unsigned long long)arg1 forMailbox:(id)arg2;
- (unsigned long long)computedHighestModificationSequenceForMailbox:(id)arg1;
- (void)updateAllegedHighestModificationSequence:(unsigned long long)arg1 forMailbox:(id)arg2;
- (unsigned long long)allegedHighestModificationSequenceForMailbox:(id)arg1;
- (void)updateUidValidityFromMailbox:(id)arg1;
- (void)processResponsesFromMailbox:(id)arg1;
- (void)updateCountFromMailbox:(id)arg1 fromIDLE:(BOOL)arg2;
- (id)offlineCacheIfOffline;
- (id)_offlineCache;
- (id)account;
- (id)messagesBeingRouted;
- (id)downloadCache;
- (id)fetchPipeline;
- (void)_setBackgroundColorForMessages:(id)arg1 textColorForMessages:(id)arg2;
- (void)messagesWereAdded:(id)arg1 conversationsMembers:(id)arg2 duringOpen:(BOOL)arg3 options:(id)arg4;
- (BOOL)isSortedAscending;
- (id)sortOrder;
- (void)writeUpdatedMessageDataToDisk;
- (id)_deletedMessages;
- (id)_copyOfAllMessagesSortedByUidWithOptions:(unsigned int)arg1;
- (void)setUid:(unsigned int)arg1 forMessageWithTemporaryUid:(unsigned int)arg2;
- (id)copyOfOldCachedMessagesContentsForUid:(unsigned int)arg1;
- (BOOL)hasValidCacheFileForUid:(unsigned int)arg1;
- (BOOL)hasValidCacheFileForMessage:(id)arg1;
- (id)_preferredOrderForFetchingMessageBodies:(id)arg1;
- (void)forceResync;
- (void)_retrieveNewMessagesForCheckingNewMail:(BOOL)arg1;
- (void)_updateLastNewMailCheckAllowedTime;
- (void)setComputedHighestModificationSequence:(unsigned long long)arg1;
- (void)setAllegedHighestModificationSequence:(unsigned long long)arg1;
- (unsigned long long)allegedHighestModificationSequence;
- (void)setUidNextStatus:(unsigned int)arg1;
- (unsigned int)uidNextStatus;
- (void)setUidValidityStatus:(unsigned int)arg1;
- (id)_uidIndexSetForMessages:(id)arg1;
- (void)startSynchronization;
- (id)_gatewayCreateIfNeeded:(BOOL)arg1 options:(unsigned long long)arg2;
- (id)copyOfAllMessagesWithSubjects;
- (BOOL)messageHasBeenDeleted:(id)arg1;
- (BOOL)canSetMessageColors;
- (void)setBackgroundColorForMessages:(id)arg1 textColorForMessages:(id)arg2;
- (id)messageWithRemoteID:(id)arg1 inRemoteMailbox:(id)arg2;
- (id)duplicateMessages:(id)arg1 newRemoteIDs:(id)arg2 newDocumentIDs:(id)arg3 forMailbox:(id)arg4 setFlags:(long long)arg5 clearFlags:(long long)arg6 createNewCacheFiles:(BOOL)arg7;
- (id)duplicateMessages:(id)arg1 newRemoteIDs:(id)arg2 newDocumentIDs:(id)arg3 forMailbox:(id)arg4 setFlags:(long long)arg5 clearFlags:(long long)arg6 messageFlagsForMessages:(id)arg7 createNewCacheFiles:(BOOL)arg8;
- (id)messagesForMailbox:(id)arg1 where:(id)arg2 sortedBy:(id)arg3 ascending:(BOOL)arg4 options:(unsigned int)arg5;
- (void)compactMailbox:(id)arg1;
- (BOOL)hasCacheFileForMessage:(id)arg1 directoryContents:(id)arg2;
- (BOOL)hasCacheFileForMessage:(id)arg1 part:(id)arg2 directoryContents:(id)arg3;
- (unsigned long long)totalCountOfMessages;
- (id)getDetailsForMessagesWithRemoteIDs:(id)arg1;
- (unsigned int)maximumRemoteID;
- (id)messageForMessageID:(id)arg1;
- (id)colorForMessage:(id)arg1;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)_waitForDataFromDownload:(id)arg1 uid:(unsigned int)arg2 gateway:(id)arg3;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (BOOL)hasCachedDataForMimePart:(id)arg1;
- (BOOL)_hasCachedDataForMimePart:(id)arg1 message:(id)arg2;
- (id)cacheDirectoryContents;
- (id)dataForMimePart:(id)arg1;
- (id)_fetchDataForMimePart:(id)arg1 keepInMemory:(BOOL)arg2 writeToDisk:(BOOL)arg3;
- (id)_dataForMessage:(id)arg1 readHeadersOnly:(BOOL)arg2;
- (id)messagesWithRowIDs:(id)arg1;
- (id)messageWithDefaultLoadOptionsAndRowID:(long long)arg1;
@property(readonly) BOOL persistentIDType;
- (void)syncEngineDidSynchronizeMessageList;
- (void)_internalSetFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)async_setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2 updatingServer:(BOOL)arg3;
- (id)async_setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (void)_synchronouslyStoreLabelsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)async_setGmailLabelsFromDictionary:(id)arg1 forMessages:(id)arg2 updatingServer:(BOOL)arg3;
- (id)async_setGmailLabelsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)recentFlagChangesForRowID:(id)arg1;
- (void)_setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (void)_synchronouslyStoreFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (BOOL)messagesAreBeingAdded;
- (void)addMessages:(id)arg1;
- (id)newDictionaryForLocalFlags:(unsigned int)arg1 serverFlags:(unsigned int)arg2 existingDictionary:(id)arg3;
- (long long)undoAppendOfMessageIDs:(id)arg1;
- (id)_uidSearchForMessageIds:(id)arg1 destinationUidNext:(unsigned int)arg2 withGateway:(id)arg3;
- (long long)_appendToServerWithContext:(id)arg1 error:(id *)arg2;
- (BOOL)_copyMessagesByID:(id)arg1 toStore:(id)arg2 settingFlags:(id)arg3 newMessages:(id)arg4 error:(id *)arg5;
- (void)_copyFlagsFromMessages:(id)arg1 flagsByMessage:(id)arg2 toMessagesWithUids:(id)arg3 withGateway:(id)arg4 usedFlags:(id)arg5;
- (BOOL)allowsOverwrite;
- (BOOL)allowsAppend;
- (id)messagesBeingAdded;
- (void)undeleteMessagesWithRemoteIDs:(id)arg1;
- (void)deleteLastMessageWithHeaders:(id)arg1 compactWhenDone:(BOOL)arg2;
- (void)deleteMessagesOlderThanNumberOfDays:(long long)arg1 compact:(BOOL)arg2;
- (void)compactMessagesFromSyncEngine:(id)arg1;
- (void)compactMessages:(id)arg1;
- (void)_processPendingCompacts;
- (void)doCompact;
- (BOOL)canCompact;
- (id)mailbox;
- (id)mailboxName;
- (void)removeAllLocalMessages;
- (BOOL)canRebuild;
- (void)syncEngineDidFinish;
- (void)syncEngineDidStart;
- (void)doRoutineCleanup;
- (void)cleanupSynchronously;
- (void)fetchSynchronouslyForKnownChanges;
- (void)fetchSynchronously;
- (void)checkNewMail;
- (void)_fetchForCheckingNewMail:(BOOL)arg1;
- (BOOL)isInbox;
- (BOOL)_shouldCallCompactWhenClosing;
- (void)invalidateSyncEngine;
- (void)_invalidate;
- (BOOL)setStoreState:(int)arg1 fromState:(int)arg2;
- (id)willDeallocPerformingInStoreCacheLock:(char *)arg1;
- (void)openSynchronouslyWithoutUserInteraction;
- (void)openSynchronouslyUpdatingMetadata:(BOOL)arg1;
- (void)_openSynchronouslyUpdatingMetadata:(BOOL)arg1 withOptions:(unsigned long long)arg2;
- (void)openAsynchronously;
- (id)messagesForImporter;
@property(readonly) BOOL isReadOnly;
- (unsigned int)_permanentFlags;
- (BOOL)_isSynchronized;
- (BOOL)_isRebuildingOrSynchronizing;
- (id)_copyMailboxSyncEngineCreateIfNecessary:(BOOL)arg1 setupGatewayIfNecessary:(BOOL)arg2;
- (id)_IMAPMailbox;
- (void)dealloc;
- (id)initWithCriterion:(id)arg1 mailbox:(id)arg2 readOnly:(BOOL)arg3;
- (id)objectSpecifierForMessage:(id)arg1;

@end

@interface MFLibraryMessage : MCMessage <IMAPMessage, IMAPPersistedMessage, MCPersistentIDFetching>
{
    long long _libraryID;
    NSString *_remoteID;
    int _isCachingBodyAndHeaders;
    unsigned int _options;
    unsigned int _uid;
    CDStruct_07ba05d6 _remoteFlags;
    BOOL _hasSetCalendarEvent;
    BOOL _hasSetReferences;
    BOOL _isBeingChanged;
    BOOL _isCompacted;
    int _conversationPosition;
    long long _conversationID;
    long long _mailboxID;
    long long _originalMailboxID;
    unsigned long long _size;
}

+ (id)fetchedMessageWithRowID:(long long)arg1;
+ (id)messageWithPersistentID:(id)arg1;
+ (id)messageWithLibraryID:(long long)arg1;
+ (id)messageWithURL:(id)arg1;
+ (id)messagesWithURL:(id)arg1;
+ (id)_residentMessageForLibraryID:(long long)arg1;
+ (void)_removeMessageFromResidentMessagesWithLibraryID:(long long)arg1;
+ (id)_addMessageToResidentMessages:(id)arg1;
+ (id)residentMessages;
+ (void)initialize;
@property BOOL isCompacted; // @synthesize isCompacted=_isCompacted;
@property unsigned int primitiveOptions; // @synthesize primitiveOptions=_options;
@property BOOL isBeingChanged; // @synthesize isBeingChanged=_isBeingChanged;
@property unsigned long long size; // @synthesize size=_size;
@property long long originalMailboxID; // @synthesize originalMailboxID=_originalMailboxID;
@property long long mailboxID; // @synthesize mailboxID=_mailboxID;
@property int conversationPosition; // @synthesize conversationPosition=_conversationPosition;
@property long long conversationID; // @synthesize conversationID=_conversationID;
- (void)_cacheMessageBodyDataIfPossible:(id)arg1;
- (id)_cachedMessageBodyData;
- (void)_cacheMessageBodyIfPossible:(id)arg1;
- (id)_cachedMessageBody;
- (void)_cacheHeaderDataIfPossible:(id)arg1;
- (id)_cachedHeaderData;
- (void)_cacheHeadersIfPossible:(id)arg1;
- (id)_cachedHeaders;
- (void)uncacheBodyAndHeader;
- (void)cacheBodyAndHeader;
- (void)appendData:(id)arg1 part:(id)arg2;
- (void)setData:(id)arg1 isPartial:(BOOL)arg2;
- (void)_calculateAttachmentInfoFromBody:(id)arg1;
- (id)messageDataIncludingFromSpace:(BOOL)arg1 newDocumentID:(id)arg2;
- (void)setRemoteID:(const char *)arg1 documentID:(id)arg2 flags:(long long)arg3 size:(unsigned long long)arg4 mailboxID:(long long)arg5 originalMailboxID:(long long)arg6 color:(char *)arg7 conversationID:(long long)arg8 conversationPosition:(int)arg9;
- (id)preferredEmailAddressToReplyWith;
- (id)account;
- (id)path;
- (id)description;
- (void)reload;
- (BOOL)endChanging:(BOOL)arg1 immediately:(BOOL)arg2;
- (void)beginChanging;
- (void)commitLater;
- (void)commit;
- (void)setColor:(id)arg1 hasBeenEvaluated:(BOOL)arg2 flags:(unsigned int)arg3 mask:(unsigned int)arg4;
- (void)setLibraryColor:(char *)arg1;
- (void)setColor:(id)arg1;
- (void)setColorHasBeenEvaluated:(BOOL)arg1;
- (void)setFlags:(long long)arg1;
- (void)setMessageFlags:(unsigned int)arg1 mask:(unsigned int)arg2;
- (id)mailboxName;
@property BOOL hasTemporaryUid;
@property BOOL partsHaveBeenCached;
- (BOOL)isPartialMessageBodyAvailable;
- (BOOL)isMessageContentsLocallyAvailable;
@property BOOL isPartial;
- (BOOL)loadOptionsSuffice:(unsigned int)arg1;
@property unsigned int options;
- (void)setUid:(unsigned int)arg1;
- (unsigned int)uid;
- (CDStruct_07ba05d6)remoteFlags;
- (void)setIMAPFlags:(CDStruct_07ba05d6)arg1;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)remoteID;
- (void)setRemoteID:(id)arg1;
- (void)_setRemoteID:(id)arg1;
- (void)_updateUID;
- (id)mailbox;
- (void)setDataSource:(id)arg1;
- (id)dataSource;
- (id)_unlockedMessageStore;
- (void)setMessageSize:(unsigned long long)arg1;
- (unsigned long long)messageSize;
- (id)inReplyToHeaderDigest;
- (id)messageIDHeaderDigest;
- (id)to;
- (BOOL)supportsSnippets;
- (id)sender;
- (id)subject;
@property(retain) MFLibraryCalendarEvent *calendarEvent;
- (void)setReferences:(id)arg1;
- (id)references;
- (BOOL)type;
- (id)originalMailboxURLString;
- (id)documentID;
- (long long)_mf_LibraryMessageLibraryID;
- (long long)libraryID;
- (id)persistentID;
@property(readonly) BOOL persistentIDType;
- (id)messageID;
- (void)dealloc;
- (id)init;
- (id)initWithLibraryID:(long long)arg1;

@end

@interface MFLibraryQueries : NSObject
{
}

+ (char *)queryToDeleteEventByMessageID:(id)arg1;
+ (int)bindUpdateEventStatement:(id)arg1 withEvent:(id)arg2 messageID:(long long)arg3;
+ (id)checkOutStatementToUpdateEvent:(id)arg1;
+ (int)bindInsertEventStatement:(id)arg1 withEvent:(id)arg2 messageID:(long long)arg3;
+ (id)checkOutStatementToInsertEvent:(id)arg1;
+ (id)checkOutStatementForEventWithMessageID:(long long)arg1 usingDB:(id)arg2;
+ (id)checkOutStatementForMailboxURLFromMailboxID:(long long)arg1 usingDB:(id)arg2;
+ (id)fromClauseForTables:(unsigned long long)arg1 startingFromTableExpression:(id)arg2;
+ (id)checkOutStatementToCompletelyUpdateMessage:(id)arg1;
+ (id)checkOutStatementToInsertMessage:(id)arg1;
+ (char *)queryToFindCopiesOfMessage:(char *)arg1 sentOn:(unsigned long long)arg2 receivedOn:(unsigned long long)arg3 withSize:(unsigned long long)arg4;
+ (char *)queryForUniquingDataForMessageNumber:(long long)arg1;

@end

@interface MFLibraryStoreMessageConsumer : NSObject <MFMessageConsumer>
{
    MFLibraryStore *_libraryStore;
    MCInvocationQueue *_callbackQueue;
    BOOL _shouldCancel;
    long long _collectorID;
}

@property BOOL shouldCancel; // @synthesize shouldCancel=_shouldCancel;
@property long long collectorID; // @synthesize collectorID=_collectorID;
- (void)finishedSendingMessages;
- (void)searchPhaseComplete;
- (id)libraryNotificationMessages;
- (id)libraryNotificationObject;
- (void)newMessagesAvailable:(id)arg1 conversationsMembersByConversationID:(id)arg2 options:(id)arg3;
- (void)dealloc;
- (void)clearLibraryStoreWeakReference;
- (id)initWithLibraryStore:(id)arg1 useCallbackQueue:(BOOL)arg2;

@end

@interface MFLibraryStore : MFMessageStore
{
    NSString *_url;
    MFMessageCriterion *_criterion;
    id _openOptionsLock;
    unsigned int _openOptions;
    NSMutableSet *_memberMessageIDs;
    NSMutableArray *_allMessagesDuringOpening;
    MFLibraryStoreMessageConsumer *_consumer;
}

+ (BOOL)storeAtPathIsWritable:(id)arg1;
+ (BOOL)createEmptyStoreForPath:(id)arg1;
+ (id)filterMessages:(id)arg1 throughSmartMailbox:(id)arg2;
+ (id)sharedInstance;
+ (unsigned int)defaultLoadOptions;
+ (void)initialize;
@property(retain) NSString *url; // @synthesize url=_url;
- (id)attachmentsDirectoryForMessage:(id)arg1;
- (BOOL)_updateFlagForMessage:(id)arg1 key:(id)arg2 value:(BOOL)arg3;
- (id)_setOrGetValue:(id)arg1 forKey:(id)arg2 inCache:(id *)arg3;
- (void)_invalidateObjectCachesForKey:(id)arg1;
- (unsigned long long)_numberOfMessagesToCache;
- (void)_rebuildTableOfContentsSynchronously;
- (void)rebuildTableOfContentsAsynchronously;
- (void)_flushAllMessageData;
- (id)criterion;
- (void)_cancelAutosave;
- (void)_setNeedsAutosave;
- (void)updateMetadata;
- (void)writeUpdatedMessageDataToDisk;
- (id)dataForMimePart:(id)arg1;
- (id)messagesForDocumentID:(id)arg1;
- (id)recentMessageWithValue:(id)arg1 forHeader:(id)arg2;
- (void)deleteLastMessageWithHeaders:(id)arg1 compactWhenDone:(BOOL)arg2;
- (id)lastMessageWithHeaders:(id)arg1 inMailbox:(id)arg2;
- (id)duplicateCopiesOfMessages:(id)arg1 withDocumentIDs:(id)arg2 excludingMessageIDs:(id)arg3;
- (id)duplicateCopiesOfMessages:(id)arg1;
- (void)doCompact;
- (BOOL)_shouldCallCompactWhenClosing;
- (BOOL)canCompact;
- (long long)undoAppendOfMessageIDs:(id)arg1;
- (long long)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 newDocumentIDsByOld:(id)arg5 flagsToSet:(id)arg6 forMove:(BOOL)arg7 error:(id *)arg8;
- (BOOL)allowsOverwrite;
- (BOOL)allowsAppend;
- (void)deleteMessagesOlderThanNumberOfDays:(long long)arg1 compact:(BOOL)arg2;
- (void)deleteMessages:(id)arg1 moveToTrash:(BOOL)arg2;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3 allowPartial:(BOOL)arg4;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 allowPartial:(BOOL)arg3;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (BOOL)hasCachedDataForMimePart:(id)arg1;
- (id)messageForMessageID:(id)arg1;
- (void)_cancelQueryAndClearConsumer:(BOOL)arg1;
- (void)cancelQuery;
- (void)cancelOpen;
- (void)cleanupSynchronously;
- (void)dealloc;
- (void)_invalidate;
- (void)_messagesUpdated:(id)arg1;
- (void)_messagesCompacted:(id)arg1;
- (void)_messageFlagsChanged:(id)arg1;
- (void)messagesWereAdded:(id)arg1 conversationsMembers:(id)arg2 duringOpen:(BOOL)arg3 options:(id)arg4;
- (void)_messagesAddedToLibrary:(id)arg1;
- (void)_setFlagsAndColorForMessages:(id)arg1;
- (void)setFlagsAndColorForMessages:(id)arg1;
- (id)async_setLocalFlagsForMessages:(id)arg1;
- (id)async_setGmailLabelsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)async_setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (void)saveSnippetsForMessages:(id)arg1;
- (id)snippetsForMessages:(id)arg1;
- (BOOL)supportsSnippets;
- (id)filterMessagesByMembership:(id)arg1;
- (id)mutableCopyOfAllMessages;
- (void)asynchronousCopyOfAllMessagesWithOptions:(id)arg1;
- (id)copyOfAllMessagesWithOptions:(unsigned int)arg1;
- (id)copyOfAllMessages;
- (unsigned long long)totalCount;
- (unsigned int)_openOptions;
- (void)cleanupAsynchronously;
- (id)openSynchronouslyUpdatingMetadata:(BOOL)arg1 returnRetainedMessages:(BOOL)arg2;
- (void)restartSearch:(id)arg1;
- (void)openSynchronouslyUpdatingMetadata:(BOOL)arg1;
- (BOOL)_shouldUpdateColorsAndAttachmentsAfterOpening;
- (void)openAsynchronouslyWithOptions:(unsigned int)arg1;
- (void)libraryFinishedSendingMessagesToLibraryStoreMessageConsumer:(id)arg1;
- (id)notificationMessagesFromOpen;
- (void)newMessagesAvailable:(id)arg1 conversationsMembers:(id)arg2 fromLibraryStoreMessageConsumer:(id)arg3 options:(id)arg4;
- (void)_updateCriterionFromMailbox:(id)arg1;
- (long long)mailboxID;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)_reset;
- (id)initWithMailbox:(id)arg1;
- (id)initWithCriterion:(id)arg1;
- (id)initWithMailbox:(id)arg1 readOnly:(BOOL)arg2;
- (id)init;
- (BOOL)_criterionContainsGmailLabelCriterion:(id)arg1;
- (id)initWithCriterion:(id)arg1 mailbox:(id)arg2 readOnly:(BOOL)arg3;
- (id)objectSpecifierForMessage:(id)arg1;

@end

@interface MFLibraryThread : NSObject <MCActivityTarget>
{
    NSMutableArray *_requests;
    MCActivityMonitor *_monitor;
    NSMapTable *_storeReqCounts;
}

+ (id)sharedInstance;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (BOOL)isAddingMessagesToStore:(id)arg1;
- (id)messagesBeingAddedToStore:(id)arg1;
- (void)addMessages:(id)arg1 toStore:(id)arg2;
- (void)_runThread;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;

@end

@interface _MFLibraryThreadRequest : NSObject
{
    BOOL _isFollowOnToProgressTask;
    NSMutableArray *_messages;
    MFRemoteStore *_store;
}

@property(nonatomic) BOOL isFollowOnToProgressTask; // @synthesize isFollowOnToProgressTask=_isFollowOnToProgressTask;
@property(readonly) MFRemoteStore *store; // @synthesize store=_store;
@property(retain, nonatomic) NSMutableArray *messages; // @synthesize messages=_messages;
- (void)dealloc;
- (id)init;
- (id)initWithStore:(id)arg1 andMessages:(id)arg2;

@end

@interface MFLibraryUpgrader : NSObject <MCActivityTarget>
{
    MFLibrary *_library;
    unsigned long long _majorVersion;
    unsigned long long _minorVersion;
    MCActivityAggregate *_activity;
    struct sqlite3 *_upgraderDB;
    MFSqliteHandle *_handle;
    BOOL _readOnly;
    BOOL _shouldRecalculateConversations;
    BOOL _shouldUpdateSubjectPrefixes;
    BOOL _shouldRecalculateMessageCounts;
    BOOL _shouldFixupSpotlightAttributesFromBackBooting;
    BOOL _shouldUpdateMailboxURLs;
    BOOL _shouldResetPasswords;
    BOOL _shouldResetHighestChangeIdentifierForLabels;
    BOOL _shouldNormalizeMailboxNamesAndPaths;
    id <MFLibraryUpgraderDelegate> _delegate;
    MCActivityMonitor *_monitor;
    NSString *_migrationDestinationPath;
    unsigned long long _initialLastWriteMinorVersion;
    id _activityToken;
}

+ (void)initialize;
@property(retain, nonatomic) id activityToken; // @synthesize activityToken=_activityToken;
@property(nonatomic) unsigned long long initialLastWriteMinorVersion; // @synthesize initialLastWriteMinorVersion=_initialLastWriteMinorVersion;
@property(nonatomic) BOOL shouldNormalizeMailboxNamesAndPaths; // @synthesize shouldNormalizeMailboxNamesAndPaths=_shouldNormalizeMailboxNamesAndPaths;
@property(nonatomic) BOOL shouldResetHighestChangeIdentifierForLabels; // @synthesize shouldResetHighestChangeIdentifierForLabels=_shouldResetHighestChangeIdentifierForLabels;
@property(nonatomic) BOOL shouldResetPasswords; // @synthesize shouldResetPasswords=_shouldResetPasswords;
@property(nonatomic) BOOL shouldUpdateMailboxURLs; // @synthesize shouldUpdateMailboxURLs=_shouldUpdateMailboxURLs;
@property(nonatomic) BOOL shouldFixupSpotlightAttributesFromBackBooting; // @synthesize shouldFixupSpotlightAttributesFromBackBooting=_shouldFixupSpotlightAttributesFromBackBooting;
@property(nonatomic) BOOL shouldRecalculateMessageCounts; // @synthesize shouldRecalculateMessageCounts=_shouldRecalculateMessageCounts;
@property(nonatomic) BOOL shouldUpdateSubjectPrefixes; // @synthesize shouldUpdateSubjectPrefixes=_shouldUpdateSubjectPrefixes;
@property(nonatomic) BOOL shouldRecalculateConversations; // @synthesize shouldRecalculateConversations=_shouldRecalculateConversations;
@property(copy) NSString *migrationDestinationPath; // @synthesize migrationDestinationPath=_migrationDestinationPath;
@property(retain, nonatomic) MCActivityMonitor *monitor; // @synthesize monitor=_monitor;
@property BOOL readOnly; // @synthesize readOnly=_readOnly;
@property id <MFLibraryUpgraderDelegate> delegate; // @synthesize delegate=_delegate;
- (void)upgradeSignaturesFromLion;
- (void)upgradeSmartMailboxesFromLion;
- (void)upgradeRulesFromLion;
- (void)upgradeMailDataIfNecessary;
- (long long)_getSQLTableCount:(const char *)arg1 usingDB:(struct sqlite3 *)arg2;
- (void)_stampCurrentMinorVersion;
- (void)_executeSQL:(id)arg1 updateMinorVersion:(unsigned long long)arg2;
- (BOOL)_needsRun;
- (BOOL)_canRun:(id *)arg1;
- (void)_bootstrapVersioningEngine;
- (void)_getVersionInfo;
- (void)_unlockWriterDB:(struct sqlite3 *)arg1;
- (struct sqlite3 *)_getWriterDB;
- (void)_unlockReaderDB:(struct sqlite3 *)arg1;
- (struct sqlite3 *)_getReaderDB;
- (id)_handle;
- (void)_setHandle:(id)arg1;
- (void)resetProgressItemsWithTotal:(unsigned long long)arg1 andStatusMessage:(id)arg2;
- (void)incrementProgressIndicatorWithThreshold:(unsigned long long)arg1;
- (void)incrementProgressIndicator;
- (void)setProgressItemTotal:(unsigned long long)arg1;
- (void)_setActivity:(id)arg1;
- (id)_activity;
- (void)_resetPasswords;
- (void)_fakeLibraryUpgraderStep;
- (void)_resetHighestChangeIdentifierForLabels;
- (void)_fixShadowEMLXFilesForAccount:(id)arg1;
- (void)_fixShadowEMLXFiles;
- (void)_resetConversationsForExistingMessages;
- (void)_resetSnippetColumn;
- (BOOL)_calculateInternationalSubjectPrefixes;
- (void)_updateMailboxURLUnicodeComposition;
- (id)_copySpotlightAttributesWithDateSent:(int)arg1 dateReceived:(int)arg2 dateLastViewed:(int)arg3 read:(int)arg4 libraryFlags:(long long)arg5 messageID:(const char *)arg6 subject:(id)arg7 displayName:(id)arg8 senderName:(id)arg9 senderAddress:(id)arg10 recipientNames:(id)arg11 recipientAddresses:(id)arg12;
- (id)_urlStringForMailboxDirectory:(id)arg1 account:(id)arg2 levelFromAccountDirectory:(unsigned long long)arg3;
- (void)_getRecipientsForMessageWithLibraryID:(long long)arg1 recipientNames:(id)arg2 recipientAddresses:(id)arg3 dbHandle:(id)arg4;
- (void)_setSpotlightAttributesForEMLXFilesInMailbox:(id)arg1 mailboxURLString:(id)arg2;
- (void)_updateSpotlightAttributes;
- (void)_normalizeMailboxPathComponentsInMboxCache;
- (void)_addAllegedChangeIdentifier:(unsigned long long)arg1;
- (id)_mailboxURLStringsForAccount:(id)arg1;
- (BOOL)_accountIsGmailAccount:(id)arg1;
- (void)_resetChangeIdentifierForGmailAccounts:(unsigned long long)arg1;
- (void)_deleteBogusTopLevelMailboxes:(unsigned long long)arg1;
- (void)_resetMailboxSource:(unsigned long long)arg1;
- (void)_addMessageIDMailboxIndex:(unsigned long long)arg1;
- (void)_removeMailboxUUIDColumn:(unsigned long long)arg1;
- (void)_removeSupportForRedundantContentCache:(unsigned long long)arg1;
- (void)_clearLabelsTable:(unsigned long long)arg1;
- (void)_addMailboxSource:(unsigned long long)arg1;
- (void)_fixGmailLabelsIndex:(unsigned long long)arg1;
- (void)_addGmailLabelsSupport:(unsigned long long)arg1;
- (void)_addConversationPosition:(unsigned long long)arg1;
- (void)_resetConversationRootColumn:(unsigned long long)arg1;
- (void)_upgradeFromMountainLionToSUMountainCalypso;
- (void)makeAppleScriptReferencesInRulesUseOnlyLastPathComponent;
- (void)_fixEWSFoldersTable;
- (void)fixMailDownloadsMigrationKey;
- (void)_startMigratorServiceForAppleScriptFilesAndRules;
- (void)upgradeAppleScriptFilesAndRules;
- (void)_startMigratorServiceForMailDownloads;
- (void)upgradeMailDownloadsFiles;
- (void)_removeDuplicateRSSAccounts;
- (void)_cleanUpSyncedData;
- (void)_removeSyncedFilesMetadata;
- (void)_moveSyncedFilesToLocal;
- (BOOL)_removeMessageTypeFromSmartMailbox:(id)arg1 localProperties:(id)arg2;
- (void)_removeMessageTypeFromSmartMailboxes;
- (void)_removeMessageTypeFromRules;
- (void)_combineVIPSendersPlists;
- (void)_addFileExtensionToSignatures;
- (void)_changeSignatureBundleLayout;
- (void)_changeSignaturesLayout;
- (void)_changeSmartMailboxesLayout;
- (void)_changeRulesLayout;
- (void)_upgradeFromLionToMountainLion;
- (void)_updateSmartMailboxUnreadMessagesForMailboxes:(id)arg1;
- (void)_updateSmartMailboxUnreadMessages;
- (void)_migrateTasksToLocalCalendar;
- (void)_upgradeFromSUSnowFeltToLion;
- (void)_upgradeFromSnowLeopardToSUSnowFelt;
- (void)_upgradeFromLeopardToSnowLeopard;
- (void)_updateCoalescedAddressReferences;
- (void)_populateRecipientPosition;
- (void)_upgradeFromTigerToLeopard;
- (void)_useWALJournalingIfPossible;
- (void)_vacuum;
- (void)_createNewDatabaseObjects;
- (void)_upgradeSchema;
- (void)_upgradeSchemaFromBackBooting;
- (void)_dropTriggers;
- (void)_firstLoginDidTimeout;
- (void)run;
- (void)_removeToDos:(unsigned long long)arg1;
- (BOOL)validateMigrationPath:(id)arg1;
- (BOOL)isComplexMigrationToV2;
- (BOOL)shouldMigrateToV2;
- (void)_evaluateAccountsForMigration;
- (BOOL)_allAccountsAreOnSameFSAsLibraryMail;
- (id)unresolvedAccountPaths;
- (void)resetEvaluationOfAccountsForMigration;
- (BOOL)_shouldDisplayDisturbingAndVagueWarningAboutMigrationToUser;
- (long long)libraryStatus;
- (void)dealloc;
- (id)init;
- (id)initWithLibrary:(id)arg1;

@end

@interface MFLocalAccount : MFMailAccount
{
}

+ (id)accountTypeString;
+ (id)defaultPathNameForAccountWithHostname:(id)arg1 username:(id)arg2;
+ (id)defaultPathNameForAccount;
+ (id)localAccount;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (BOOL)supportsAppleScript;
- (BOOL)hasTrashMailbox;
- (BOOL)isRemoteAccount;
- (BOOL)isZeroConfiguration;
- (BOOL)providesAccountInformation;
- (BOOL)canParticipateInRules;
- (BOOL)isEditableByUser;
- (id)todosMailbox;
- (id)_specialMailboxRelativePathForType:(int)arg1;
- (BOOL)synchronizesDataWithServer;
- (id)_infoForMatchingURL:(id)arg1;
- (id)_URLPersistenceScheme;
- (id)rootlessMailboxForFileSystemPath:(id)arg1;
- (void)insertInMailboxes:(id)arg1 atIndex:(unsigned long long)arg2;
- (BOOL)renameMailbox:(id)arg1 newDisplayName:(id)arg2 parent:(id)arg3;
- (id)createMailboxWithParent:(id)arg1 displayName:(id)arg2 error:(id *)arg3;
- (id)createMailboxWithParent:(id)arg1 displayName:(id)arg2 localizedDisplayName:(id)arg3;
- (id)pathForMailboxWithParent:(id)arg1 displayName:(id)arg2;
- (BOOL)deleteConvertsStoreToFolder;
- (BOOL)supportsNormalContainerOnlyMailboxes;
- (BOOL)_setChildren:(id)arg1 forMailbox:(id)arg2;
- (id)_copyMailboxWithParent:(id)arg1 name:(id)arg2 pathComponent:(id)arg3 attributes:(unsigned long long)arg4 existingMailbox:(id)arg5 uuid:(id)arg6;
- (void)_synchronouslyLoadListingForParent:(id)arg1;
- (BOOL)shouldMoveDeletedMessagesToTrash;
- (long long)emptyTrashFrequency;
- (void)_readCustomInfoFromMailboxCache:(id)arg1;
- (void)setIsWillingToGoOnline:(BOOL)arg1;
- (BOOL)isWillingToGoOnline;
- (void)setIsOffline:(BOOL)arg1;
- (BOOL)isOffline;
- (BOOL)shouldAutoFetch;
- (BOOL)canFetch;
- (void)setPassword:(id)arg1;
- (id)password;
- (void)setUsername:(id)arg1;
- (void)setHostname:(id)arg1;
- (id)displayName;
- (id)primaryMailbox;
- (id)mailboxPathExtension;
- (Class)storeClassForMailbox:(id)arg1;
- (id)uniqueId;
- (id)rootMailbox;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;

@end

@interface _MFRootlessMailbox : MFMailbox
{
}

- (id)storeForMailbox:(id)arg1 createIfNeeded:(BOOL)arg2;
- (id)tildeAbbreviatedPath;
- (id)fullPath;
- (id)displayName;

@end

@interface MFLocationManager : NSObject
{
    NSMutableArray *_locations;
    MFNetworkLocation *_current;
    MCInvocationQueue *_invocationQueue;
    BOOL _supressNotifications;
}

+ (id)currentLocation;
+ (id)sharedManager;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (id)_archivedLocations;
- (void)_unarchiveLocations:(id)arg1;
- (void)_managedLocationChanged:(id)arg1;
- (void)_determineCurrentLocation;
- (void)_networkChanged:(id)arg1;
- (id)locationForIPAddress:(id)arg1;
- (id)locationForDomain:(id)arg1;
- (void)addLocation:(id)arg1;
- (void)setCurrentLocation:(id)arg1;
- (id)currentLocation;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;
- (id)initWithUserDefaultsArray:(id)arg1;

@end

@interface MFNetworkLocation : NSObject
{
    NSMutableDictionary *_accountDefaults;
    NSMutableDictionary *_domainsBySubnet;
}

- (BOOL)isEqualToLocation:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (void)_postChanged;
- (id)bestDeliveryAccountForAccount:(id)arg1 ignoreLockedDelivery:(BOOL)arg2;
- (void)setAccount:(id)arg1 deliveryAccount:(id)arg2;
- (id)deliveryAccountForAccount:(id)arg1;
- (BOOL)isForDomain:(id)arg1;
- (BOOL)isForIPAddress:(id)arg1;
- (id)subnets;
- (id)domains;
- (void)addDomains:(id)arg1 IPAddresses:(id)arg2;
- (id)archive;
- (void)dealloc;
- (id)initWithArchive:(id)arg1;
- (id)initWithDomains:(id)arg1 IPAddresses:(id)arg2;
- (id)init;

@end

@interface MFMailAccount : MFAccount <MCAccountSetupValidatorDelegate, MCActivityTarget, MCMailAccount, MFMessageDelivererDelegate, NSFileManagerDelegate>
{
    id _mailboxLock;
    NSString *_path;
    MFMailbox *_inboxMailbox;
    MFMailbox *_rootMailbox;
    BOOL _synchronizationThreadIsRunning;
    BOOL _backgroundFetchInProgress;
    id _mailAccountLock;
    id _backgroundActivityFlagsLock;
    MFMailbox *_draftsMailbox;
    MFMailbox *_sentMessagesMailbox;
    MFMailbox *_trashMailbox;
    MFMailbox *_junkMailbox;
    MFMailbox *_notesMailbox;
    MFMailbox *_todosMailbox;
    MFMailbox *_outboxMailbox;
    MFMailbox *_archiveMailbox;
    MCError *_lastConnectionError;
    id _cacheChangeLock;
    NSTimer *_cacheWriteTimer;
    BOOL _cacheHasBeenRead;
    BOOL _mailboxListInitializationInProgress;
    BOOL _needsChecking;
    MCAccountSetupValidator *_validator;
}

+ (id)mailboxForMailboxID:(unsigned long long)arg1;
+ (id)mailboxForURL:(id)arg1 forceCreation:(BOOL)arg2 syncableURL:(BOOL)arg3;
+ (id)accountWithURLString:(id)arg1 includeInactiveAccounts:(BOOL)arg2;
+ (id)accountWithURLString:(id)arg1;
+ (id)URLForInfo:(id)arg1;
+ (id)infoForURL:(id)arg1;
+ (id)_accountForURL:(id)arg1;
+ (id)accountWithSyncableURLString:(id)arg1 includeInactiveAccounts:(BOOL)arg2;
+ (id)_accountForURL:(id)arg1 includeInactiveAccounts:(BOOL)arg2;
+ (void)deleteMailboxIfEmpty:(id)arg1;
+ (id)mailboxForFileSystemPath:(id)arg1 create:(BOOL)arg2;
+ (void)resetAllSpecialMailboxes;
+ (void)synchronouslyEmptyMailboxType:(int)arg1 inAccounts:(id)arg2;
+ (BOOL)allAccountsDeleteInPlace;
+ (long long)numberOfDaysToKeepLocalTrash;
+ (void)_clearAllAccountBackgroundFetchInProgress;
+ (id)accountsInitializingMailboxList;
+ (void)connectAllAccounts;
+ (void)disconnectAllAccounts;
+ (void)_setOnlineStateOfAllAccountsTo:(BOOL)arg1;
+ (BOOL)isAnyAccountOnline;
+ (BOOL)isAnyAccountOffline;
+ (id)defaultDeliveryAccount;
+ (id)defaultPathNameForAccountWithHostname:(id)arg1 username:(id)arg2;
+ (id)defaultPathNameForAccount;
+ (id)defaultAccountDirectory;
+ (id)defaultPathForAccountWithHostname:(id)arg1 username:(id)arg2;
+ (id)newAccountWithPath:(id)arg1;
+ (id)accountWithPath:(id)arg1;
+ (id)allMailboxes;
+ (id)archiveMailboxes;
+ (id)junkMailboxes;
+ (id)draftMailboxes;
+ (id)sentMessagesMailboxes;
+ (id)outboxMailboxes;
+ (id)trashMailboxes;
+ (id)inboxMailboxes;
+ (id)_specialMailboxesUsingSelector:(SEL)arg1;
+ (id)specialMailboxes;
+ (id)outboxMessageStore:(BOOL)arg1;
+ (id)accountThatReceivedMessage:(id)arg1 matchingEmailAddress:(id *)arg2 fullUserName:(id *)arg3;
+ (id)preferredEmailAddressToReplyToMessage:(id)arg1;
+ (id)addressesThatReceivedMessage:(id)arg1;
+ (id)accountThatMessageIsFrom:(id)arg1;
+ (id)accountUsingHeadersFromMessage:(id)arg1;
+ (id)accountForHeaders:(id)arg1 message:(id)arg2;
+ (id)accountContainingEmailAddress:(id)arg1;
+ (id)_accountContainingEmailAddress:(id)arg1 matchingAddress:(id *)arg2 fullUserName:(id *)arg3;
+ (void)resetAccountExistsForSigning;
+ (BOOL)accountExistsForSigning;
+ (void)_updateAccountExistsForSigning;
+ (BOOL)isEmailAddressInAnyAccount:(id)arg1;
+ (id)allEmailAddressesIncludingFullUserName:(BOOL)arg1;
+ (id)_urlFromObject:(id)arg1;
+ (BOOL)setAccountInfo:(id)arg1 forAccountMatchingInfo:(id)arg2;
+ (id)_accountFromArray:(id)arg1 withType:(id)arg2 hostname:(id)arg3 username:(id)arg4;
+ (id)existingAccountWithType:(id)arg1 hostname:(id)arg2 username:(id)arg3;
+ (id)_accountFromArray:(id)arg1 withUniqueId:(id)arg2;
+ (id)accountWithUniqueId:(id)arg1;
+ (void)migrateUnreadCountInMailboxCache;
+ (void)saveAccountInfoToDefaults;
+ (id)remoteAccounts;
+ (BOOL)onlyGmailAccountsActiveWithAllMail:(BOOL)arg1;
+ (id)activeAccounts;
+ (id)_activeAccountsFromArray:(id)arg1;
+ (void)_removeAccountFromSortedPaths:(id)arg1;
+ (id)syncManagedAccountWithMCXCreateIfAbsent:(BOOL)arg1;
+ (void)setTotalCountOfMessagesReceived:(unsigned long long)arg1;
+ (unsigned long long)totalCountOfMessagesReceived;
+ (void)setCountOfNewUnreadMessagesReceivedInInbox:(unsigned long long)arg1;
+ (unsigned long long)countOfNewUnreadMessagesReceivedInInbox;
+ (void)setNewUnreadMessagesReceivedInInbox:(BOOL)arg1;
+ (BOOL)newUnreadMessagesReceivedInInbox;
+ (void)accountsWereSynced;
+ (void)setIsActive:(BOOL)arg1 forAccountWithUniqueId:(id)arg2;
+ (id)removeMailAccountFromAccountStorageWithUniqueId:(id)arg1;
+ (id)uniqueDisplayNameForAccount:(id)arg1;
+ (void)addMailAccount:(id)arg1;
+ (void)_setMailAccounts:(id)arg1 reloadingFromStorage:(BOOL)arg2;
+ (void)setMailAccounts:(id)arg1;
+ (void)reloadMailAccounts;
+ (id)mailAccounts;
+ (id)allMailAccounts;
+ (id)_mailAccountsIncludingUnknownTypes;
+ (void)_setupSortedPathsForAccounts:(id)arg1;
+ (void)_addAccountToSortedPaths:(id)arg1;
+ (void)completeDeferredAccountInitialization;
+ (BOOL)haveAccountsBeenConfigured;
+ (BOOL)accountsHaveBeenInitialized;
+ (void)initialize;
+ (id)keyPathsForValuesAffecting_URLPersistenceHostname;
+ (id)_outboxMailbox;
+ (void)_setOutboxMailbox:(id)arg1;
+ (id)_mailboxNameForPathComponent:(id)arg1;
+ (id)_pathComponentForMailboxName:(id)arg1;
+ (void)_postMailAccountsHaveChanged;
+ (id)_accountWithPath:(id)arg1 relativePath:(id *)arg2;
+ (void)_enableMailboxListingNotifications:(BOOL)arg1;
+ (void)_disableMailboxListingNotifications;
+ (BOOL)_mailboxListingNotificationAreEnabled;
+ (void)setAllEmailAddresses:(id)arg1 withFullUserNames:(id)arg2;
+ (BOOL)_mailAccountsAreInitialized;
+ (void)_normalizePathComponentsInMailboxesDictionary:(id)arg1 accountClass:(Class)arg2;
+ (void)normalizeMailboxNamesInAllAccounts;
@property(retain) MCAccountSetupValidator *validator; // @synthesize validator=_validator;
- (void)messageDeliveryDidFinish:(id)arg1;
- (id)delegateApplicationName;
- (BOOL)validatorShouldPromptForInsecurePassword:(id)arg1;
- (void)validatorDidFinish:(id)arg1;
- (void)validatorDidFail:(id)arg1;
- (void)_validatorFailedToAuthenticate:(id)arg1;
- (void)validator:(id)arg1 didChangeState:(long long)arg2;
@property BOOL validationRequired;
- (BOOL)connectAndAuthenticate:(id)arg1;
- (long long)compareIAOrder:(id)arg1;
- (void)respondToHostBecomingReachable;
- (BOOL)storesUnseenCount;
- (BOOL)supportsAppleScript;
- (BOOL)hasTrashMailbox;
- (BOOL)isGmailAccount;
- (BOOL)isRemoteAccount;
- (BOOL)isZeroConfiguration;
- (BOOL)providesAccountInformation;
- (BOOL)canParticipateInRules;
- (BOOL)isEditableByUser;
- (BOOL)synchronizesDataWithServer;
- (id)syncableURLString;
- (id)URLString;
- (id)objectSpecifier;
- (id)objectSpecifierForMailbox:(id)arg1;
- (id)objectSpecifierForMessageStore:(id)arg1;
- (id)valueInMailboxesWithName:(id)arg1;
- (id)mailboxForRelativePath:(id)arg1 isFilesystemPath:(BOOL)arg2 create:(BOOL)arg3;
- (Class)storeClassForMailbox:(id)arg1;
- (id)storeForMailbox:(id)arg1 createIfNeeded:(BOOL)arg2;
- (id)storeForMailbox:(id)arg1;
- (id)_ispDomain;
- (id)connectionError;
- (void)setConnectionError:(id)arg1;
- (void)accountInfoDidChange;
@property long long portNumber;
@property(copy) NSString *hostname;
@property(copy) NSString *username;
- (void)_resetAllMailboxURLs;
- (void)invalidateChildrenOfMailbox:(id)arg1;
- (BOOL)deleteMailbox:(id)arg1 reflectToServer:(BOOL)arg2;
- (BOOL)renameMailbox:(id)arg1 newDisplayName:(id)arg2 parent:(id)arg3;
- (id)createMailboxWithParent:(id)arg1 displayName:(id)arg2 localizedDisplayName:(id)arg3;
- (id)createMailboxWithParent:(id)arg1 name:(id)arg2;
- (BOOL)deleteConvertsStoreToFolder;
- (BOOL)supportsNormalContainerOnlyMailboxes;
- (BOOL)canMailboxBeDeleted:(id)arg1;
- (BOOL)canMailboxBeRenamed:(id)arg1;
- (id)validNameForMailbox:(id)arg1 fromDisplayName:(id)arg2 error:(id *)arg3;
- (BOOL)supportsSlashesInMailboxName;
- (BOOL)canMoveMailboxes;
- (BOOL)canCreateNewMailboxes;
- (id)mailboxPathExtension;
- (void)resetSpecialMailboxes;
- (BOOL)_resetSpecialMailboxes;
- (BOOL)containsMailboxes;
- (id)displayNameForMailbox:(id)arg1;
@property(copy) NSString *displayName;
- (void)emptySpecialMailboxesThatNeedToBeEmptiedAtQuit;
- (BOOL)canMoveDeletedMessagesToTrash;
- (void)setShouldMoveDeletedMessagesToTrash:(BOOL)arg1;
- (BOOL)shouldMoveDeletedMessagesToTrash;
- (void)setEmptyTrashFrequency:(long long)arg1;
- (long long)emptyTrashFrequency;
- (void)setEmptyJunkFrequency:(long long)arg1;
- (long long)emptyJunkFrequency;
- (void)setEmptySentMessagesFrequency:(long long)arg1;
- (long long)emptySentMessagesFrequency;
- (long long)_emptyFrequencyForKey:(id)arg1 defaultValue:(long long)arg2;
- (void)_setEmptyFrequency:(long long)arg1 forKey:(id)arg2;
- (void)deleteMessagesFromMailbox:(id)arg1 olderThanNumberOfDays:(unsigned long long)arg2;
- (void)setToDosMailbox:(id)arg1;
- (void)setArchiveMailbox:(id)arg1;
- (void)setNotesMailbox:(id)arg1;
- (void)setSentMessagesMailbox:(id)arg1;
- (void)setJunkMailbox:(id)arg1;
- (void)setTrashMailbox:(id)arg1;
- (void)setDraftsMailbox:(id)arg1;
- (id)allMailboxesEvenIfInactive:(BOOL)arg1;
- (id)allMailboxes;
- (id)_outboxMailboxCreateIfNeeded:(BOOL)arg1;
- (id)archiveMailboxCreateIfNeeded:(BOOL)arg1;
- (id)trashMailboxCreateIfNeeded:(BOOL)arg1;
- (id)sentMessagesMailboxCreateIfNeeded:(BOOL)arg1;
- (id)junkMailboxCreateIfNeeded:(BOOL)arg1;
- (id)draftsMailboxCreateIfNeeded:(BOOL)arg1;
- (BOOL)rootChildrenCanBePromoted;
- (id)rootMailbox;
- (id)primaryMailbox;
- (void)incrementTotalCountOfMessagesReceived:(unsigned long long)arg1;
- (void)incrementCountOfNewUnreadMessagesReceivedInInbox:(unsigned long long)arg1;
- (void)newUnreadMessagesHaveBeenReceivedInInbox;
- (BOOL)isFetching;
- (void)fetchSynchronouslyIsAuto:(id)arg1;
- (void)fetchSynchronously;
- (void)fetchAsynchronously;
- (void)fetchAsynchronouslyIsAuto:(BOOL)arg1;
- (void)setNeedsChecking;
- (BOOL)needsChecking;
- (void)didInitializeMailboxList;
- (void)willInitializeMailboxList;
- (BOOL)isInitializingMailboxList;
- (BOOL)_supportsMailboxListInitialization;
- (void)synchronizeAllMailboxes;
- (BOOL)canBeSynchronized;
- (BOOL)canAppendMessages;
- (void)startBackgroundSynchronization;
- (id)defaultsDictionary;
- (id)remoteTaskQueue;
- (BOOL)canFetch;
- (void)setIsWillingToGoOnline:(BOOL)arg1;
- (void)setIsOffline:(BOOL)arg1;
- (void)releaseAllConnections;
- (void)setCacheIsDirty:(BOOL)arg1;
- (void)doRoutineCleanup;
- (void)saveCache;
- (void)saveCacheInBackground;
- (void)_setCacheWriteTimer:(id)arg1;
- (void)deleteAccount;
- (void)_synchronouslyInvalidateAndDelete:(BOOL)arg1;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 removingItemAtURL:(id)arg3;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 removingItemAtPath:(id)arg3;
@property BOOL disableRecentsSync;
- (void)setShouldAutoFetch:(BOOL)arg1;
- (BOOL)shouldAutoFetch;
- (id)emailAliases;
- (void)setEmailAddresses:(id)arg1;
- (void)setApplescriptEmailAddresses:(id)arg1;
- (id)applescriptEmailAddresses;
- (id)emailAddresses;
- (id)rawEmailAddresses;
- (id)firstEmailAddress;
- (void)setDeliveryAccountIsLocked:(BOOL)arg1;
- (BOOL)deliveryAccountIsLocked;
- (void)_mailboxUserInfoDidChange:(id)arg1;
- (void)_deliveryAccountWillBeRemoved:(id)arg1;
- (id)dynamicDeliveryAccount;
- (void)setDeliveryAccount:(id)arg1;
- (id)deliveryAccount;
- (void)setSMTPIdentifier:(id)arg1;
- (id)smtpIdentifier;
- (id)localizedDeliveryAccountIgnoringLockedDelivery:(BOOL)arg1;
@property(readonly) NSString *googleClientToken;
- (void)setFullUserName:(id)arg1;
- (id)fullUserName;
- (void)setApplescriptFullUserName:(id)arg1;
- (id)applescriptFullUserName;
- (id)tildeAbbreviatedPath;
- (id)accountDirectory;
- (void)setPath:(id)arg1;
- (id)path;
- (void)_setAccountInfo:(id)arg1;
- (BOOL)isValid;
- (void)completeDeferredInitialization;
- (void)dealloc;
- (id)initWithPath:(id)arg1;
- (id)initWithAccountInfo:(id)arg1;
- (id)allMailMailbox;
- (id)_notesMailboxUnlessUsingLocal;
- (id)_todosMailboxUnlessUsingLocal;
- (id)notesMailbox;
- (id)todosMailbox;
- (BOOL)cheapStoreAtPathIsEmpty:(id)arg1;
- (BOOL)hasEmailAddress:(id)arg1;
- (BOOL)isValidAccountWithError:(id)arg1 accountBeingEdited:(id)arg2 userCanOverride:(char *)arg3;
- (id)backupID;
- (void)setEmptyJunkOnQuit:(BOOL)arg1;
- (BOOL)emptyJunkOnQuit;
- (void)setEmptySentMessagesOnQuit:(BOOL)arg1;
- (BOOL)emptySentMessagesOnQuit;
- (void)setEmptyTrashOnQuit:(BOOL)arg1;
- (BOOL)emptyTrashOnQuit;
- (void)removeFromMailboxesAtIndex:(unsigned long long)arg1;
- (void)insertInMailboxes:(id)arg1;
- (void)insertInMailboxes:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)replaceInMailboxes:(id)arg1 atIndex:(unsigned long long)arg2;
- (id)mailboxes;
- (id)indicesOfObjectsByEvaluatingObjectSpecifier:(id)arg1;
- (BOOL)_validateIfNeeded;
- (id)iaSettingsIncludingPassword:(BOOL)arg1;
- (id)rootMailboxEvenIfInactive:(BOOL)arg1;
- (id)_mailboxPathPrefix:(BOOL)arg1;
- (id)_URLForInfo:(id)arg1;
- (id)_URLPersistenceHostname;
- (id)_URLExternalConnectionScheme;
- (id)_URLInternalConnectionScheme;
- (id)_URLPersistenceScheme;
- (id)_infoForMatchingURL:(id)arg1;
- (BOOL)_shouldLogDeleteActivity;
- (BOOL)_canEmptyMessagesFromMailbox:(id)arg1;
- (id)_specialMailboxWithType:(int)arg1 create:(BOOL)arg2;
- (id)_specialMailboxRelativePathForType:(int)arg1;
- (void)_setSpecialMailbox:(id)arg1 forType:(int)arg2;
- (void)_setSpecialMailboxRelativePath:(id)arg1 forType:(int)arg2;
- (BOOL)_assignSpecialMailboxToAppropriateIvar:(id)arg1 forType:(int)arg2;
- (id)_defaultSpecialMailboxRelativePathForType:(int)arg1;
- (void)_clearAllPathBasedCachesAndDelete:(BOOL)arg1;
- (void)_emptySpecialMailboxesIfNeededForQuit:(BOOL)arg1;
- (void)_emptySpecialMailboxesIfNeeded;
- (void)_backgroundFetchCompleted;
- (void)backgroundFetchCompletedCount:(unsigned long long)arg1;
- (void)_fetchSynchronouslyIfNeeded;
- (id)description;
- (BOOL)_deleteMailbox:(id)arg1 reflectToServer:(BOOL)arg2;
- (BOOL)_setChildren:(id)arg1 addedChild:(id)arg2 forMailbox:(id)arg3;
- (BOOL)_setChildren:(id)arg1 forMailbox:(id)arg2;
- (id)_insertMailbox:(id)arg1 intoParent:(id)arg2 withDisplayName:(id)arg3;
- (void)_writeMailboxCache;
- (void)_loadEntriesFromFileSystemPath:(id)arg1 parent:(id)arg2;
- (void)_finishSynchronizingMailboxesAfterImport;
- (void)_synchronizeMailboxListWithFileSystemBeforeImport;
- (void)_synchronizeMailboxListWithFileSystem;
- (void)_synchronizeMailboxListWithFileSystemBeforeImport:(BOOL)arg1;
- (BOOL)_readMailboxCache;
- (BOOL)_usesMailboxCache;
- (void)_mailboxesWereRemovedFromTree:(id)arg1 withFileSystemPaths:(id)arg2;
- (void)_loadMailboxListingIntoCache:(id)arg1 parent:(id)arg2 addedMailboxes:(id)arg3 removedMailboxes:(id)arg4;
- (void)_synchronouslyLoadListingForParent:(id)arg1;
- (id)_copyMailboxWithParent:(id)arg1 name:(id)arg2 pathComponent:(id)arg3 attributes:(unsigned long long)arg4 existingMailbox:(id)arg5;
- (void)_writeCustomInfoToMailboxCache:(id)arg1;
- (void)_readCustomInfoFromMailboxCache:(id)arg1;
- (void)_postMailAccountsHaveChangedIfNeeded;
- (void)setIsActive:(BOOL)arg1;
- (BOOL)_setPath:(id)arg1;

// Remaining properties
@property(readonly) NSString *accountTypeString;
@property(readonly) NSString *appleAuthenticationToken;
@property(readonly) NSString *applePersonID;
@property BOOL configureDynamically;
@property(copy) NSString *externalHostname;
@property(copy) NSString *password;
@property(retain) MCAuthScheme *preferredAuthScheme;
@property(readonly) BOOL requiresAuthentication;
@property(readonly) NSString *saslProfileName;
@property long long securityLayerType;
@property(readonly) NSArray *standardPorts;
@property(readonly) NSArray *standardSSLPorts;
@property(readonly) NSURL *subscriptionURL;
@property(readonly) NSString *subscriptionURLLabel;
@property BOOL usesSSL;

@end

@interface MFMailbox : NSObject <MCGmailLabel, MCMailbox, MFUIMailbox>
{
    NSString *_mailboxName;
    unsigned long long _attributes;
    int _type;
    BOOL _needsToSaveMailboxName;
    MFMailAccount *_account;
    NSMutableSet *_reservedPathComponents;
    id _countsLock;
    unsigned long long _displayCount;
    unsigned long long _unseenCount;
    unsigned long long _deletedCount;
    BOOL _countsWereLoaded;
    struct __CFTree *_tree;
    NSString *_pendingNameChange;
    BOOL _isSmartMailbox;
    MCSafeValueCache *_criteriaCache;
    BOOL _allCriteriaMustBeSatisfied;
    NSString *_realFullPath;
    unsigned long long _numberOfVisibleChildren;
    NSMutableIndexSet *_visibleChildrenIndexes;
    NSArray *_sortedChildren;
    BOOL _sortedChildrenAreUpToDate;
    BOOL _failedToOpen;
    MCError *_openFailureError;
    id _displayIndexLock;
    unsigned long long _displayIndex;
    BOOL _isManuallySorted;
    BOOL _isVisibleFlaggedMailbox;
    BOOL _isPublicOrShared;
    id _dontIndexFlagLock;
    BOOL _dontIndexFlagWritten;
    id _typeAndRepresentedAccountLock;
    MFMailAccount *_representedAccount;
    NSString *_uuid;
    id _attributesLock;
    BOOL _storeIsReadOnly;
    BOOL _uuidUpdatedInDatabase;
    BOOL _respectsMailboxExclusions;
    long long _smartMailboxVersion;
    NSString *_syncId;
    NSString *_pathComponent;
    long long _unreadCountQueryObserverID;
    MFMessageStore *_searchStore;
}

+ (void)queueUpdateCountsForMailboxes:(id)arg1;
+ (void)setCanMarkUserInfoAsDirty:(BOOL)arg1;
+ (void)setShouldIndexJunk:(BOOL)arg1;
+ (void)reimportJunk;
+ (void)setShouldIndexTrash:(BOOL)arg1;
+ (BOOL)typeIsGeneric:(int)arg1;
+ (id)displayNameForMessage:(id)arg1 mailboxCriteroa:(id)arg2;
+ (id)mailboxFromPath:(id)arg1;
+ (id)mailboxWithPersistentIdentifier:(id)arg1;
+ (BOOL)mailboxTypeAllowsDeduplication:(int)arg1;
+ (BOOL)mailboxTypeIsAlwaysUnread:(int)arg1;
+ (BOOL)mailboxTypeAllowsConversations:(int)arg1;
+ (BOOL)isSmartMailboxDictionaryCompatible:(id)arg1;
+ (id)smartMailboxesEnumeratorIncludingFlagMailboxes:(BOOL)arg1 VIPSenderMailboxes:(BOOL)arg2;
+ (id)smartMailboxWithIdentifier:(id)arg1;
+ (id)_smartMailboxWithIdentifier:(id)arg1 inArray:(id)arg2;
+ (void)removeAllSmartMailboxPlaceholders;
+ (void)addSmartMailboxPlaceholder:(id)arg1;
+ (id)smartMailboxPlaceholders;
+ (void)setSmartMailboxes:(id)arg1;
+ (id)smartMailboxes;
+ (void)setRefreshUnreadCountOnSelect:(BOOL)arg1;
+ (BOOL)refreshUnreadCountOnSelect;
+ (BOOL)logMailboxUUIDErrors;
+ (void)initialize;
@property(copy) NSString *uuid; // @synthesize uuid=_uuid;
@property MFMessageStore *searchStore; // @synthesize searchStore=_searchStore;
@property BOOL respectsMailboxExclusions; // @synthesize respectsMailboxExclusions=_respectsMailboxExclusions;
@property BOOL uuidUpdatedInDatabase; // @synthesize uuidUpdatedInDatabase=_uuidUpdatedInDatabase;
@property long long unreadCountQueryObserverID; // @synthesize unreadCountQueryObserverID=_unreadCountQueryObserverID;
@property(copy) NSString *primitiveMailboxName; // @synthesize primitiveMailboxName=_mailboxName;
@property(copy) NSString *primitivePathComponent; // @synthesize primitivePathComponent=_pathComponent;
@property BOOL storeIsReadOnly; // @synthesize storeIsReadOnly=_storeIsReadOnly;
@property(retain) NSString *syncId; // @synthesize syncId=_syncId;
@property long long smartMailboxVersion; // @synthesize smartMailboxVersion=_smartMailboxVersion;
- (void)_addressBookDidChange:(id)arg1;
- (BOOL)isEqualToSmartMailbox:(id)arg1;
- (BOOL)isValidDestinationMailbox;
- (BOOL)isPlaceholder;
- (BOOL)allowsMoveDeletedMessagesToTrash;
- (id)copyWithZone:(id)arg1;
- (void)setFailedToOpen:(BOOL)arg1 error:(id)arg2;
- (id)openFailureError;
- (BOOL)failedToOpen;
- (BOOL)isStoreReadOnlyCreateIfNeeded:(BOOL)arg1;
- (id)storeCreateIfNeeded:(BOOL)arg1;
- (id)store;
- (void)setMessageCounts:(id)arg1;
@property(readonly) unsigned long long deletedCount;
- (void)setDisplayCount:(unsigned long long)arg1;
- (unsigned long long)displayCount;
- (BOOL)_isNormalMailbox;
- (void)setAllCriteriaMustBeSatisfied:(BOOL)arg1;
- (BOOL)allCriteriaMustBeSatisfied;
- (BOOL)criteriaAreValid:(id *)arg1;
- (id)_abGroupsUsedInCriteria;
- (void)setCriteria:(id)arg1;
- (id)modifiedVIPCriterionForInboxOnly;
@property(readonly) MFCriterion *criterion;
- (id)_mailboxExclusionCriteria;
- (id)_updatedCriteria:(id)arg1;
- (id)criteria;
- (id)_ancestralAccount;
- (void)setUserInfoIsDirty:(BOOL)arg1;
- (BOOL)_userInfoIsDirty;
- (void)_saveMailboxesWithDirtyUserInfoWithDelay;
- (void)_saveMailboxesWithDirtyUserInfo;
- (void)setUserInfoWithDictionary:(id)arg1;
- (id)userInfoDictionary;
- (void)saveUserInfo;
- (void)assignNewUUID;
- (void)forceSaveUserInfo;
- (void)setUserInfoBool:(BOOL)arg1 forKey:(id)arg2;
- (BOOL)userInfoBoolForKey:(id)arg1;
- (void)setUserInfoObject:(id)arg1 forKey:(id)arg2;
- (id)userInfoObjectForKey:(id)arg1;
- (void)_userInfoDidLoad:(id)arg1;
- (id)_loadUserInfo;
- (void)_updateDontIndexFlagFile;
- (BOOL)isIndexable;
@property unsigned long long attributes;
- (BOOL)isVisible;
- (BOOL)preferredMessageType;
@property int type;
- (id)description;
- (BOOL)isStoreConvertibleToFolder;
- (BOOL)isDescendantOfMailboxWithType:(int)arg1;
- (BOOL)isDescendantOfMailbox:(id)arg1;
- (long long)indexToInsertChildMailbox:(id)arg1;
- (id)_URLStringIsSyncable:(BOOL)arg1;
- (id)syncableURLString;
- (id)URLString;
- (id)_URLStringWithAccount:(id)arg1;
- (id)URL;
- (id)pathRelativeToMailbox:(id)arg1;
- (id)tildeAbbreviatedPath;
- (id)realFullPath;
- (id)fullPath;
- (id)accountRelativeFilesystemPath;
- (id)accountRelativePath;
- (id)_stringByAppendingPathComponentsToAccountPath:(id)arg1 relativeToTree:(struct __CFTree *)arg2 generateFileSystemPath:(BOOL)arg3;
- (BOOL)isAllMailMailbox;
- (BOOL)isGmailImportantLabel;
- (BOOL)isPlainSmartMailbox;
- (BOOL)isSpecialMailbox;
- (BOOL)isStore;
- (BOOL)isContainer;
- (void)invalidate;
- (BOOL)isValid;
- (id)applescriptAccount;
- (id)accountURLString;
- (id)account;
- (id)representedAccount;
- (void)setRepresentedAccount:(id)arg1;
- (id)deepCopy;
- (void)_saveMailboxNameIfNeeded;
- (void)flushCriteria;
- (BOOL)hasAlternateParent;
- (void)setParent:(id)arg1;
- (id)parent;
- (void)sortChildren;
- (void)invalidateChildren;
- (BOOL)setChildren:(id)arg1;
- (void)_deleteChildrenWithURLsIfInvalid:(id)arg1 fullPaths:(id)arg2;
- (id)mailboxComparatorWithAccount:(SEL)arg1;
- (id)mutableCopyOfChildrenIncludingHiddenChildren:(BOOL)arg1 hidingGmail:(BOOL)arg2;
- (id)mutableCopyOfChildren;
- (id)unusedChildPathComponent:(id)arg1;
- (id)childWithPathComponent:(id)arg1;
- (id)childWithName:(id)arg1;
- (unsigned long long)indexOfChild:(id)arg1;
- (BOOL)isValidGmailLabel;
- (BOOL)isGmailWhiteMailboxOrDescendant:(BOOL)arg1;
- (id)_gmailWhiteMailboxChild;
- (id)sortedChildAtIndex:(unsigned long long)arg1 hidingGmail:(BOOL)arg2;
- (id)visibleChildAtIndex:(unsigned long long)arg1;
- (id)childAtIndex:(unsigned long long)arg1;
- (unsigned long long)numberOfChildren;
- (id)depthFirstEnumerator;
- (id)childEnumeratorIncludingHiddenChildren:(BOOL)arg1;
- (id)childEnumerator;
- (unsigned long long)numberOfSortedChildrenHidingGmail:(BOOL)arg1;
- (unsigned long long)numberOfVisibleChildrenHidingGmail:(BOOL)arg1;
- (void)_updateSortedChildrenIfNeeded;
- (unsigned long long)suggestedDisplayIndexForChildMailbox:(id)arg1 hidingGmail:(BOOL)arg2;
@property BOOL isVisibleFlaggedMailbox;
@property BOOL isManuallySorted;
- (BOOL)displayIndexCanBeModified;
@property unsigned long long displayIndex;
- (void)_invalidateVisibleChildrenCaches;
- (BOOL)hasChildren;
- (id)children;
@property(readonly) BOOL hasMessages;
- (unsigned long long)unseenCount;
- (BOOL)unseenCountIsKnown;
- (void)notifyForUnreadCount:(unsigned long long)arg1 andOldUnreadCount:(unsigned long long)arg2;
- (void)_enqueueUnreadCountChangeNotification;
- (void)setIsPublicOrShared:(BOOL)arg1;
- (BOOL)isPublicOrShared;
- (void)setName:(id)arg1 pathComponent:(id)arg2;
- (id)name;
@property(readonly) NSString *pathComponent;
- (BOOL)canBeRenamed;
- (void)setPendingNameChange:(id)arg1;
- (id)labelName;
- (id)genericDisplayName;
- (id)displayName;
- (id)displayNameUsingAccountNameIfSpecial:(BOOL)arg1;
- (id)extendedDisplayName;
- (void)cancelUnreadCountQuery;
- (id)representedMailbox;
- (id)dictionaryRepresentation;
- (id)persistentIdentifier;
- (id)initWithDictionaryRepresentation:(id)arg1 copyUUID:(BOOL)arg2;
- (id)initWithMailbox:(id)arg1;
- (id)initWithName:(id)arg1 pathComponent:(id)arg2 attributes:(unsigned long long)arg3 forAccount:(id)arg4;
- (id)initWithName:(id)arg1 attributes:(unsigned long long)arg2 forAccount:(id)arg3;
- (id)initWithAccount:(id)arg1;
- (id)init;
- (void)dealloc;
- (BOOL)isSmartMailboxExpressibleInTigerSchema;
- (long long)smartMailboxEncodingVersion;
- (void)_registerForSmartMailboxNotification;
@property BOOL isSmartMailbox;
- (id)backupID;
- (long long)backupType;
- (BOOL)isPointedToBySmartMailbox:(id)arg1;
- (BOOL)isPointedToBySmartMailbox:(id)arg1 traversedMailboxes:(id)arg2;
- (BOOL)isPointedToByCriterion:(id)arg1 traversedMailboxes:(id)arg2;
- (id)valueInMessagesWithUniqueID:(id)arg1;
- (void)setMailboxName:(id)arg1;
- (id)mailboxName;
- (void)removeFromMessagesAtIndex:(unsigned long long)arg1;
- (id)messages;
- (id)applescriptChildren;
- (id)applescriptContainer;
- (id)objectSpecifier;

@end

@interface _MFMailboxEnumerator : NSEnumerator
{
    struct __CFTree *_startTree;
    struct __CFTree *_lastTree;
}

- (id)nextObject;
- (void)dealloc;
- (id)init;
- (id)initWithTree:(struct __CFTree *)arg1;

@end

@interface _MFSmartMailboxesEnumerator : NSEnumerator
{
    NSArray *_smartMailboxes;
    unsigned long long _nextMailboxIndex;
    NSEnumerator *_currentMailboxEnumerator;
}

- (id)nextObject;
- (void)dealloc;
- (id)init;
- (id)initWithSmartMailboxes:(id)arg1;

@end

@interface _MFMailboxChildrenEnumerator : NSEnumerator
{
    struct __CFTree *_root;
    struct __CFTree *_currentTree;
    BOOL _includeHidden;
}

- (id)nextObject;
- (void)dealloc;
- (id)init;
- (id)initWithTree:(struct __CFTree *)arg1 includeHiddenChildren:(BOOL)arg2;

@end

@interface MFMessageCounts : NSObject
{
    unsigned long long _totalCount;
    unsigned long long _unreadCount;
    unsigned long long _unseenCount;
    unsigned long long _deletedCount;
    unsigned long long _unreadAdjustedForDuplicates;
}

@property(readonly, nonatomic) unsigned long long unreadAdjustedForDuplicates; // @synthesize unreadAdjustedForDuplicates=_unreadAdjustedForDuplicates;
@property(readonly, nonatomic) unsigned long long deletedCount; // @synthesize deletedCount=_deletedCount;
@property(readonly, nonatomic) unsigned long long unseenCount; // @synthesize unseenCount=_unseenCount;
@property(readonly, nonatomic) unsigned long long unreadCount; // @synthesize unreadCount=_unreadCount;
@property(readonly, nonatomic) unsigned long long totalCount; // @synthesize totalCount=_totalCount;
- (id)description;
- (id)initWithTotal:(unsigned long long)arg1 unread:(unsigned long long)arg2 unseen:(unsigned long long)arg3 deleted:(unsigned long long)arg4 unreadAdjustedForDuplicates:(unsigned long long)arg5;

@end

@interface MFMailboxDirectoryScanner : NSObject
{
}

+ (void)enumerateMailboxesAtDirectory:(id)arg1 usingBlock:(id)arg2;

@end

@interface MFMailMigrator : NSObject <NSFileManagerDelegate>
{
    NSString *_supportDirectory;
    NSString *_destinationSupportDirectory;
    NSString *_tempSupportDirectoryV2;
    NSString *_supportDirectoryV2;
    NSString *_mailDataDirectoryV2;
    NSString *_migrationSuccessfulFilepath;
    NSString *_v1ItemsToMigrateFilepath;
    NSString *_logDirectory;
    NSMutableDictionary *_lostItems;
    NSString *_lostItemsFilepath;
    NSString *_lostAndFoundDirectory;
    BOOL _isComplex;
    BOOL _isUsingAlternateDestination;
    MFLibraryUpgrader *_progressDelegate;
    unsigned long long _progressChunkSize;
    unsigned long long _messagesProgressCount;
    unsigned long long _v1CleanupCount;
    BOOL _isTrackingCleanupProgress;
    unsigned long long _emlxCountPreMigration;
    unsigned long long _emlxCountPostMigration;
    unsigned long long _lostAndFoundEmlxCount;
    unsigned long long _messageCountPreMigration;
    NSMutableSet *_nonFatalAttachmentErrorLibraryIDs;
    NSFileManager *_fileManager;
}

+ (BOOL)path:(id)arg1 hasPrefixInArray:(id)arg2;
+ (BOOL)isMigrating;
+ (BOOL)migrateFromV1ToV2Layout:(id)arg1 isComplex:(BOOL)arg2 progressDelegate:(id)arg3;
@property(retain, nonatomic) NSFileManager *fileManager; // @synthesize fileManager=_fileManager;
- (BOOL)_copyWithCompressionFromPath:(id)arg1 toPath:(id)arg2;
- (void)_savePlistFiles:(id)arg1 destinationPath:(id)arg2;
- (void)_saveSubpathsWithAttributesOfDirectoryAtPath:(id)arg1 destinationPath:(id)arg2 symbolicLinks:(id)arg3 mboxCacheFiles:(id)arg4 infoPlistFiles:(id)arg5 outEmlxCount:(unsigned long long *)arg6 outLostFoundEmlxCount:(unsigned long long *)arg7 shouldPersist:(BOOL)arg8;
- (void)_captureDiagnosticsForMigrationOutEmlxCount:(unsigned long long *)arg1 outLostFoundEmlxCount:(unsigned long long *)arg2;
- (BOOL)_migrateFromV1ToV2Layout;
- (BOOL)_shouldIgnoreFilename:(id)arg1;
- (void)_migrateMailboxesFromDirectory:(id)arg1 toDirectory:(id)arg2 baseDirectory:(id)arg3 usingUUID:(id)arg4 mailboxCacheDictionary:(id)arg5 accountPrefix:(id)arg6;
- (id)_accountPrefixes;
- (id)_mailboxSuffixes;
- (id)_lostItemsForBaseDirectory:(id)arg1;
- (BOOL)fileManager:(id)arg1 shouldRemoveItemAtPath:(id)arg2;
- (BOOL)fileManager:(id)arg1 shouldProceedAfterError:(id)arg2 removingItemAtPath:(id)arg3;
- (void)_handleAttachmentsMigrationResult:(BOOL)arg1 error:(id)arg2 message:(id)arg3 libraryID:(long long)arg4;
- (id)_stringByAppendingV2MailboxSuffix:(id)arg1;
- (BOOL)_directoryExistsAtPath:(id)arg1;
- (BOOL)_string:(id)arg1 hasSuffixInSet:(id)arg2;
- (BOOL)_string:(id)arg1 hasPrefixInSet:(id)arg2;
- (id)_prefixOfString:(id)arg1 fromSet:(id)arg2;
- (void)_messageTraceLibraryData;
- (unsigned long long)_numberOfMessagesInDB;
- (unsigned long long)_numberOfEmlxFiles;
- (unsigned long long)_numberOfEmlxFilesInLostAndFound;
- (void)dealloc;
- (id)initWithDestinationPath:(id)arg1 isComplex:(BOOL)arg2 progressDelegate:(id)arg3;

@end

@interface _MFZipStream : NSObject
{
    struct __sFILE {
        char *_field1;
        int _field2;
        int _field3;
        short _field4;
        short _field5;
        struct __sbuf _field6;
        int _field7;
        void *_field8;
        void *_field9;
        void *_field10;
        void *_field11;
        void *_field12;
        struct __sbuf _field13;
        struct __sFILEX *_field14;
        int _field15;
        unsigned char _field16[3];
        unsigned char _field17[1];
        struct __sbuf _field18;
        int _field19;
        long long _field20;
    } *_destination;
    struct z_stream_s _zipStream;
    unsigned char inBuffer[32768];
    unsigned char outBuffer[32768];
    BOOL _closed;
}

- (void)closeStream;
- (void)appendData:(id)arg1;
- (void)dealloc;
- (id)initWithDestinationPath:(id)arg1;

@end

@interface MFMessageAddressee : NSObject
{
    NSString *_displayName;
    NSString *_address;
    NSString *_type;
    id _message;
}

- (void)setMessage:(id)arg1;
- (id)objectSpecifier;
- (id)_keyForType;
- (void)setAddress:(id)arg1;
- (id)address;
- (void)setDisplayName:(id)arg1;
- (id)displayName;
- (id)formattedAddress;
- (BOOL)isEqual:(id)arg1;
- (void)dealloc;
- (id)initWithDisplayName:(id)arg1 address:(id)arg2 type:(id)arg3 message:(id)arg4;

@end

@interface MFMessageContext : NSObject
{
    NSOperationQueue *_fsQueue;
    NSOperationQueue *_waitingQueue;
}

+ (id)sharedContext;
- (id)filesystemQueue;
- (id)async_cacheHeaderAndBodyForMessage:(id)arg1 monitor:(id)arg2;
- (id)async_setJunkMailLevel:(long long)arg1 forMessages:(id)arg2;
- (id)async_setFlagWithKey:(id)arg1 state:(BOOL)arg2 forMessages:(id)arg3;
- (id)async_setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface MFMessageCriterion : MFCriterion
{
    NSString *_originalGroupUniqueID;
    long long _specialMailboxTypeCode;
    NSString *_groupUniqueID;
}

+ (id)stringForCriterionType:(long long)arg1;
+ (long long)criterionTypeForString:(id)arg1;
+ (void)_updateAddressDisplayNames:(id)arg1;
+ (id)messagesInConversationCriterionWithConversationIDs:(id)arg1;
+ (void)initialize;
@property(copy) NSString *groupUniqueID; // @synthesize groupUniqueID=_groupUniqueID;
@property long long specialMailboxTypeCode; // @synthesize specialMailboxTypeCode=_specialMailboxTypeCode;
- (BOOL)containsAddressBookCriteria;
- (BOOL)containsRelativeDateCriteria;
- (BOOL)containsMessageIsNotInATrashMailboxCriterion;
- (BOOL)containsIncludeConversationsCriterion;
- (BOOL)containsLastViewedDateCriterion;
- (BOOL)_containsCriterion:(long long)arg1;
- (id)criterionByExpandingSpecialMailboxCriterion;
- (id)criterionByExpandingGroup;
- (id)emailAddressesForGroupCriterion;
- (id)emailAddressesForVIPCriterion;
- (BOOL)containsSpotlightCriterion;
- (BOOL)isValid:(id *)arg1 options:(unsigned int)arg2;
- (BOOL)hasQualifier;
- (BOOL)allowsEmptyExpression;
- (BOOL)hasExpression;
- (BOOL)evaluateMessage:(id)arg1;
- (BOOL)_evaluateMessage:(id)arg1;
- (BOOL)doesMessageSatisfyRuleEvaluationCriterion:(id)arg1;
- (BOOL)_evaluateFlaggedStatusCriterion:(id)arg1;
- (BOOL)_evaluateSpecialMailboxCriterion:(id)arg1;
- (BOOL)_mailboxURLString:(id)arg1 satisfiesQualifier:(long long)arg2 forExpression:(id)arg3;
- (BOOL)_evaluateGmailLabelCriterion:(id)arg1;
- (BOOL)_evaluateMailboxCriterion:(id)arg1;
- (BOOL)_evaluateFlagCriterion:(id)arg1;
- (BOOL)_evaluateCompoundCriterion:(id)arg1;
- (BOOL)_evaluateAttachmentTypeCriterion:(id)arg1;
- (BOOL)_evaluateAttachmentCriterion:(id)arg1;
- (BOOL)_evaluateJunkMailCriterion:(id)arg1;
- (BOOL)_evaluateJunkMailHeaders:(id)arg1;
- (BOOL)_evaluatePriorityIsLowCriterion:(id)arg1;
- (BOOL)_evaluatePriorityIsHighCriterion:(id)arg1;
- (BOOL)_evaluatePriorityIsNormalCriterion:(id)arg1;
- (BOOL)_evaluateMessageTypeCriterion:(id)arg1;
- (BOOL)_evaluateIsEncryptedCriterion:(id)arg1;
- (BOOL)_evaluateIsDigitallySignedCriterion:(id)arg1;
- (BOOL)_evaluateFullNameCriterion:(id)arg1;
- (BOOL)_evaluateAddressHistoryCriterion:(id)arg1;
- (BOOL)_evaluateAccountCriterion:(id)arg1;
- (BOOL)_evaluateMemberOfVIPSendersCriterion:(id)arg1;
- (BOOL)_evaluateMemberOfGroupCriterion:(id)arg1;
- (BOOL)_doesGroup:(id)arg1 containSender:(id)arg2;
- (BOOL)_evaluateAddressBookCriterion:(id)arg1;
- (BOOL)_evaluateBodyCriterion:(id)arg1;
- (BOOL)_evaluateHeaderCriterion:(id)arg1;
- (BOOL)_evaluateDateCriterion:(id)arg1;
- (void)addHeadersRequiredForRoutingToArray:(id)arg1;
- (id)_headersRequiredForEvaluation;
- (id)recursiveGroupUniqueIDs;
- (void)setCriterionIdentifier:(id)arg1;
- (id)dictionaryRepresentation;
- (BOOL)isEquivalent:(id)arg1;
- (BOOL)isEqual:(id)arg1;
@property(readonly) NSString *originalGroupUniqueID;
- (void)dealloc;
- (id)initWithDictionary:(id)arg1 andRemoveRecognizedKeysIfMutable:(BOOL)arg2;
- (id)SQLExpressionWithContext:(CDStruct_c53ccb4e *)arg1 depth:(unsigned long long)arg2 enclosingSmartMailboxes:(id)arg3;
- (BOOL)isExpressibleInTigerSchema;
- (BOOL)hasNumberCriterion;
- (id)criterionByMergingSpotlightCriteria;
- (id)fixOnceWithExpandedSmartMailboxes:(id)arg1 forSpotlight:(BOOL)arg2;
- (void)setRuleExpression:(id)arg1;
- (id)ruleExpression;
- (void)setRuleQualifier:(unsigned int)arg1;
- (unsigned int)ruleQualifier;
- (void)setRuleHeader:(id)arg1;
- (id)ruleHeader;
- (void)setRuleType:(unsigned int)arg1;
- (unsigned int)ruleType;

@end

@interface MFMessageDeliverer : NSObject <MCActivityTarget>
{
    MCMessage *_message;
    MFDeliveryAccount *_account;
    long long _status;
    id <MFMessageDelivererDelegate> _delegate;
    id <MCMessageDataSource> _messageStore;
    BOOL _askForReadReceipt;
}

+ (BOOL)deliverMessage:(id)arg1;
+ (BOOL)deliverMessage:(id)arg1 askForReadReceipt:(BOOL)arg2;
+ (id)newWithMessage:(id)arg1;
- (long long)deliverMessageHeaderData:(id)arg1 bodyData:(id)arg2 toRecipients:(id)arg3;
- (long long)deliverSynchronously;
- (void)deliverAsynchronously;
- (id)_headersForDeliveryFromHeaders:(id)arg1;
- (id)headersForDelivery;
- (long long)deliveryStatus;
- (void)setAskForReadReceipt:(BOOL)arg1;
- (BOOL)askForReadReceipt;
- (void)setAccount:(id)arg1;
- (id)account;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (id)message;
- (void)dealloc;
- (id)initWithMessage:(id)arg1;

@end

@interface MFMessageReplyGenerator : NSObject
{
    MUIWebDocumentView *_documentView;
    id _completionHandler;
    NSString *_contentToAdd;
    NSString *_attributionLine;
    MCMutableMessageHeaders *_messageHeaders;
    MFMessageReplyGenerator *_me;
}

@property(retain, nonatomic) MFMessageReplyGenerator *me; // @synthesize me=_me;
@property(retain, nonatomic) MCMutableMessageHeaders *messageHeaders; // @synthesize messageHeaders=_messageHeaders;
@property(copy, nonatomic) NSString *attributionLine; // @synthesize attributionLine=_attributionLine;
@property(copy, nonatomic) NSString *contentToAdd; // @synthesize contentToAdd=_contentToAdd;
@property(copy, nonatomic) id completionHandler; // @synthesize completionHandler=_completionHandler;
@property(retain, nonatomic) MUIWebDocumentView *documentView; // @synthesize documentView=_documentView;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)generateMessageWithType:(unsigned long long)arg1 originalMessage:(id)arg2 newContent:(id)arg3 forwardHeaders:(id)arg4 completionHandler:(id)arg5;
- (void)dealloc;

@end

@interface MFMessageRouter : NSObject <MCActivityTarget>
{
    MFMessageStore *_store;
    NSMutableArray *_queuedMessages;
    NSConditionLock *_queuedMessagesFull;
    NSConditionLock *_queuedMessagesEmpty;
    NSConditionLock *_queuedMessagesRouting;
    unsigned long long _bytesInQueue;
    unsigned long long _queueSize;
    BOOL _routingThreadShouldQuit;
    unsigned long long _numMessagesRoutedSoFar;
    unsigned long long _numMessagesToBeRouted;
    BOOL _isUserAction;
}

+ (void)saveRulesIfNeeded;
+ (id)syncedRulesSyncedFile;
+ (void)addInvitationsToCalendarFromMessages:(id)arg1;
+ (void)setAddInvitationsToCalendarAutomatically:(BOOL)arg1;
+ (BOOL)_addICalRule;
+ (BOOL)addInvitationsToCalendarAutomatically;
+ (void)applyRulesAsynchronouslyToMailboxes:(id)arg1;
+ (void)_applyRulesToMailboxes:(id)arg1;
+ (id)junkMailHeaderFlags;
+ (void)setJunkMailTrustHeaders:(BOOL)arg1;
+ (BOOL)junkMailTrustHeaders;
+ (void)setJunkMailEvaluationAfterRules:(BOOL)arg1;
+ (BOOL)junkMailEvaluationAfterRules;
+ (void)reloadRules;
+ (id)defaultJunkMailRule;
+ (id)userJunkMailRule;
+ (void)setJunkMailRule:(id)arg1;
+ (id)junkMailRule;
+ (id)_junkMailRuleForBehavior:(long long)arg1 abCriterion:(BOOL)arg2 ahCriterion:(BOOL)arg3 fnCriterion:(BOOL)arg4;
+ (void)routeJunkMessagesInMailboxes:(id)arg1;
+ (void)_ensureJunkRuleBehaviorMatchesPreference;
+ (void)evaluateJunkMailBehaviorFromRules;
+ (void)setJunkMailBehavior:(long long)arg1;
+ (long long)junkMailBehavior;
+ (id)colorForMessage:(id)arg1 highlightTextUsingColor:(char *)arg2;
+ (void)putRulesThatWantsToHandleMessage:(id)arg1 intoArray:(id)arg2 colorRulesOnly:(BOOL)arg3;
+ (void)headersRequiredForRoutingDidChange;
+ (id)headersRequiredForRouting;
+ (void)_mailboxListingChanged:(id)arg1;
+ (void)loadDestinationMailboxes;
+ (void)tryToReconnectAutoDeactivatedRules;
+ (void)_updateUnrecognizedRulesAfterRemovingIndex:(unsigned long long)arg1;
+ (void)_updateUnrecognizedRulesAfterAddingIndex:(unsigned long long)arg1;
+ (void)removeRule:(id)arg1;
+ (void)addRule:(id)arg1;
+ (void)insertRule:(id)arg1 atIndex:(unsigned long long)arg2;
+ (void)removeRuleAtIndex:(unsigned long long)arg1;
+ (id)ruleAtIndex:(unsigned long long)arg1;
+ (unsigned long long)numberOfRules;
+ (id)rules;
+ (void)_synchronouslyWriteRulesToDisk;
+ (void)_writeRulesToDiskInBackground;
+ (id)_readRulesFromDisk;
+ (void)_setupSortRules;
+ (id)_sortRuleDictionaryRepresentations;
+ (id)_sortRulesFromDictionaryRepresentations:(id)arg1 junkRule:(id *)arg2 iCalRule:(id *)arg3;
+ (BOOL)_setICalRule:(id)arg1;
+ (id)iCalRule;
+ (id)_defaultSortRules;
+ (id)defaultAppleEmailAddresses;
+ (void)_mailboxWasRenamed:(id)arg1;
+ (void)_accountWillBeDeleted:(id)arg1;
+ (void)_mailboxBecameInvalid:(id)arg1;
+ (void)mailboxWillBeRenamedOrInvalidated;
+ (void)ruleDidChange:(id)arg1;
+ (void)ruleAffectingColorsDidChange:(id)arg1;
+ (BOOL)colorsUpdateDynamically;
+ (BOOL)_colorRuleExistsAfterRule:(id)arg1;
+ (void)enqueueColorRulesDidChange;
+ (void)setColorChangeCounter:(long long)arg1;
+ (long long)colorChangeCounter;
+ (BOOL)_hasColorRules;
+ (void)_iCalSettingChangedFromICal:(id)arg1;
+ (void)_setupAddInvitationDefault;
+ (void)_updateICalRule:(BOOL)arg1;
+ (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
+ (void)_unScheduleWriteRules;
+ (void)scheduleWriteRules;
+ (void)setWriteRulesTimer:(id)arg1;
+ (id)writeRulesTimer;
+ (void)initialize;
- (void)setIsUserAction:(BOOL)arg1;
- (void)dealloc;
- (void)setEstimatedNumberOfMessagesToRoute:(unsigned long long)arg1;
- (void)setStore:(id)arg1;
- (void)waitForRoutingToFinish;
- (void)_routeQueuedMessages;
- (void)asynchronouslyRouteMessages:(id)arg1;
- (id)routeMessages:(id)arg1 fromStores:(id)arg2;
- (BOOL)_routeMessagesIndividually;

@end

@interface MFMessageRouterUtilities : NSObject
{
}

+ (void)resetShouldSpotlightIndexJunkLevel;
+ (BOOL)shouldSpotlightIndexJunkLevel;
+ (id)rulesActiveStatePath;
+ (id)unsyncedRulesPath;
+ (id)syncedRulesPath;
+ (id)sortRulesPath;
+ (id)rulesConflictResolver;

@end

@interface MFMessageRule : NSObject <NSCopying>
{
    NSMutableArray *_criteria;
    unsigned int _flags;
    NSString *_uniqueId;
    NSString *_ruleName;
    NSDictionary *_otherInfo;
    NSNumber *_isActiveSyncState;
    MFMailbox *_copyDestinationMailbox;
    NSString *_copyDestinationMailboxURL;
    MFMailbox *_destinationMailbox;
    NSString *_destinationMailboxURL;
    NSColor *_color;
    NSString *_soundPath;
    NSString *_appleScriptPath;
    NSArray *_recipients;
    NSString *_responseMessage;
    int _autoResponseType;
    BOOL _isJunkMailRule;
    BOOL _isCalendarRule;
    BOOL _didChange;
    unsigned int _isActive:1;
    unsigned int _ruleWasAutoDeactivated:1;
    unsigned int _allCriteriaMustBeSatisfied:1;
    unsigned int _shouldTransferMessage:1;
    unsigned int _shouldCopyMessage:1;
    unsigned int _shouldStopEvaluatingRules:1;
    unsigned int _highlightTextUsingColor:1;
    unsigned int _shouldNotifyUser:1;
    unsigned int _addInvitationAttachmentToCalendar:1;
    unsigned int _shouldSendNotification:1;
}

+ (BOOL)isRuleDictionaryCompatible:(id)arg1;
+ (id)appleScriptLock;
+ (void)initialize;
- (id)objectSpecifier;
- (BOOL)isEqualToRule:(id)arg1;
- (void)setShouldSendNotification:(BOOL)arg1;
- (BOOL)shouldSendNotification;
@property(nonatomic) BOOL isCalendarRule;
- (void)setAddInvitationAttachmentToCalendar:(BOOL)arg1;
- (BOOL)addInvitationAttachmentToCalendar;
- (void)setShouldNotifyUser:(BOOL)arg1;
- (BOOL)shouldNotifyUser;
- (void)setShouldStopEvaluatingRules:(BOOL)arg1;
- (BOOL)shouldStopEvaluatingRules;
- (void)setSoundPath:(id)arg1;
- (id)soundPath;
- (void)setResponseMessage:(id)arg1;
- (void)handleDidChange;
- (void)handleDidChangeIfNeeded;
- (id)responseMessage;
- (void)setAutoResponseRecipients:(id)arg1;
- (id)autoResponseRecipients;
- (void)setAutoResponseType:(int)arg1;
- (int)autoResponseType;
- (BOOL)affectsColorEvaluation;
- (void)setHighlightTextUsingColor:(BOOL)arg1;
- (BOOL)highlightTextUsingColor;
- (void)setColor:(id)arg1;
- (id)color;
- (void)setAppleScriptPath:(id)arg1;
- (id)appleScriptPath;
- (void)setFlagsToApply:(unsigned int)arg1;
- (unsigned int)flagsToApply;
- (void)setAppleScriptDestinationMailbox:(id)arg1;
- (void)setAppleScriptCopyDestinationMailbox:(id)arg1;
- (void)_evaluateIfNeeded:(id)arg1 andSetUsingSelector:(SEL)arg2;
- (id)appleScriptCopyDestinationMailbox;
- (id)appleScriptDestinationMailbox;
- (BOOL)invalidateDestinationMailboxesForURLString:(id)arg1;
- (void)tryToReconnectDestinationIfNeeded;
- (id)_tryToGetMailboxForURLString:(id)arg1;
- (void)setCopyDestinationMailbox:(id)arg1;
- (id)copyDestinationMailbox;
- (id)_copyDestinationMailboxCreateIfNeeded:(BOOL)arg1;
- (void)setDestinationMailbox:(id)arg1;
- (id)destinationMailbox;
- (id)_destinationMailboxCreateIfNeeded:(BOOL)arg1;
- (void)_setDestinationIvar:(id *)arg1 toDestinationMailbox:(id)arg2 destinationURLIvar:(id *)arg3;
- (id)_destinationMailbox:(id)arg1 withURL:(id)arg2 setUsingSelector:(SEL)arg3 createIfNeeded:(BOOL)arg4;
- (void)setShouldCopyMessage:(BOOL)arg1;
- (BOOL)shouldCopyMessage;
- (void)setShouldTransferMessage:(BOOL)arg1;
- (BOOL)shouldTransferMessage;
- (void)setCriteria:(id)arg1;
- (id)criteria;
- (void)setAllCriteriaMustBeSatisfied:(BOOL)arg1;
- (BOOL)allCriteriaMustBeSatisfied;
- (void)setIsActiveSyncState:(BOOL)arg1;
- (BOOL)isActiveSyncState;
@property(nonatomic) BOOL isActive;
@property(nonatomic) BOOL isJunkMailRule;
- (BOOL)isTerminalAction;
- (long long)version;
- (void)setRuleName:(id)arg1;
- (id)ruleName;
- (void)performPostSyncingValidation;
- (BOOL)isValid:(id *)arg1 options:(unsigned int)arg2;
- (BOOL)doesMessageSatisfyCriteria:(id)arg1;
- (void)addHeadersRequiredForRoutingToArray:(id)arg1;
- (void)_performAddInvitationAttachmentToCalendarActionOnMessages:(id)arg1;
- (void)_performAppleScriptActionWithMessages:(id)arg1;
- (void)_performAutoResponseActionOnMessages:(id)arg1;
- (id)_performAutoResponseActionOnMessage:(id)arg1 encrypt:(BOOL)arg2 includeOrignalMessageText:(BOOL)arg3;
- (void)_performUserNotificationAction:(id)arg1;
- (void)performActionsOnMessages:(id)arg1 sourceStores:(id)arg2 destinationStores:(id)arg3 rejectedMessages:(id)arg4 messagesToBeDeleted:(id)arg5;
- (void)_appendMessages:(id)arg1 fromSourceMailbox:(id)arg2 toDestinationMailbox:(id)arg3 destinationStores:(id)arg4 rejectedMessages:(id)arg5 messagesToBeDeleted:(id)arg6;
- (void)_updateDefaultAppleEmailAddressRule;
- (id)dictionaryRepresentation;
- (id)initWithDictionaryRepresentation:(id)arg1;
- (id)mailboxPathForMailboxURL:(id)arg1 createIfNeeded:(BOOL)arg2;
- (id)mailboxURLStringForMailbox:(id)arg1;
- (id)initWithRule:(id)arg1;
- (id)init;
- (void)setUniqueId:(id)arg1;
- (id)uniqueId;
- (BOOL)isEquivalentExceptForTitleAndIDs:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)setAddress:(id)arg1 forResponseType:(int)arg2;
- (void)removeFromCriteriaAtIndex:(unsigned long long)arg1;
- (void)insertInCriteria:(id)arg1;
- (void)insertInCriteria:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)setRuleDescription:(id)arg1;
- (id)ruleDescription;
- (void)setActionRunApplescript:(id)arg1;
- (id)actionRunApplescript;
- (void)setActionReplyText:(id)arg1;
- (id)actionReplyText;
- (void)setActionRedirectToAddress:(id)arg1;
- (id)actionRedirectToAddress;
- (void)setActionPlaySound:(id)arg1;
- (id)actionPlaySound;
- (void)setActionMarkAsRead:(BOOL)arg1;
- (BOOL)actionMarkAsRead;
- (void)setActionMarkAsFlaggedStatus:(long long)arg1;
- (long long)actionMarkAsFlaggedStatus;
- (void)setActionMarkAsFlagged:(BOOL)arg1;
- (BOOL)actionMarkAsFlagged;
- (void)setActionForwardText:(id)arg1;
- (id)actionForwardText;
- (void)setActionForwardToAddress:(id)arg1;
- (id)actionForwardToAddress;
- (void)setActionDeleteMessage:(BOOL)arg1;
- (BOOL)actionDeleteMessage;
- (unsigned int)highlightColorValue:(id)arg1;
- (void)setActionColorMessage:(unsigned int)arg1;
- (unsigned int)actionColorMessage;
- (void)updateIsActive;

@end

@interface MFMessageRuleCriterion : MFMessageCriterion
{
    MFMessageRule *_rule;
}

+ (id)conversationsCriterion;
+ (id)noSentCriterion;
+ (id)noTrashCriterion;
+ (id)noJunkCriterion;
- (BOOL)performPostSyncingValidation;
- (id)objectSpecifier;
- (void)setCriterionIdentifier:(id)arg1;
- (void)setMessageRule:(id)arg1;
- (void)setRuleExpression:(id)arg1;
- (void)setRuleQualifier:(unsigned int)arg1;
- (void)setRuleType:(unsigned int)arg1;

@end

@interface MFMessageSortingInformation : NSObject
{
    BOOL _isSortedAscending;
    BOOL _skipAutomaticSecondarySort;
    id <MFMessageSortContext> _sortContext;
    NSDictionary *_sortValues;
}

@property(copy, nonatomic) NSDictionary *sortValues; // @synthesize sortValues=_sortValues;
@property(retain, nonatomic) id <MFMessageSortContext> sortContext; // @synthesize sortContext=_sortContext;
@property(nonatomic) BOOL skipAutomaticSecondarySort; // @synthesize skipAutomaticSecondarySort=_skipAutomaticSecondarySort;
@property(nonatomic) BOOL isSortedAscending; // @synthesize isSortedAscending=_isSortedAscending;
- (void)dealloc;

@end

@interface MFMessageSortingValue : NSObject <MCMessageSortingInterface>
{
}

+ (void)removeEverythingExceptMessages:(id)arg1 fromSortData:(id)arg2;
+ (void)addMessages:(id)arg1 toSortData:(id)arg2 withDelegate:(id)arg3;
+ (void)addMessage:(id)arg1 toSortData:(id)arg2 withDelegate:(id)arg3;
+ (void)removeMessage:(id)arg1 fromSortData:(id)arg2;
+ (id)mutableCopyOfSortData:(id)arg1;
+ (id)copySortDataForMessages:(id)arg1 sortOrders:(id)arg2 withDelegate:(id)arg3;
+ (void)addSortData:(id)arg1 forMessages:(id)arg2 sortOrder:(id)arg3 withDelegate:(id)arg4;
+ (id)equivalentSortsForSort:(id)arg1;
- (long long)libraryID;
- (unsigned int)uidForSort;
- (id)mailbox;
- (double)dateSentAsTimeIntervalSince1970;
- (double)dateReceivedAsTimeIntervalSince1970;
- (id)to;
- (id)subjectAndPrefixLength:(unsigned long long *)arg1;
- (id)subject;
- (unsigned long long)numberOfAttachments;
- (unsigned long long)messageSize;
- (id)senderDisplayName;
- (unsigned int)messageFlags;
- (double)dateLastViewedAsTimeIntervalSince1970;
- (int)colorForSort;

@end

@interface _MFMessageSortingValueSender : MFMessageSortingValue
{
    NSString *_senderDisplayName;
}

- (id)description;
- (void)setSenderDisplayName:(id)arg1;
- (id)senderDisplayName;
- (void)dealloc;

@end

@interface _MFMessageSortingValueColor : MFMessageSortingValue
{
    int _colorForSort;
}

- (id)description;
- (void)setColorForSort:(int)arg1;
- (int)colorForSort;

@end

@interface _MFMessageSortingValueDateLastViewed : MFMessageSortingValue
{
    double _dateLastViewedAsTimeIntervalSince1970;
}

- (id)description;
- (void)setDateLastViewedAsTimeIntervalSince1970:(double)arg1;
- (double)dateLastViewedAsTimeIntervalSince1970;

@end

@interface _MFMessageSortingValueMessageFlags : MFMessageSortingValue
{
    unsigned int _messageFlags;
}

- (id)description;
- (void)setMessageFlags:(unsigned int)arg1;
- (unsigned int)messageFlags;

@end

@interface _MFMessageSortingValueMessageSize : MFMessageSortingValue
{
    unsigned long long _messageSize;
}

- (id)description;
- (void)setMessageSize:(unsigned long long)arg1;
- (unsigned long long)messageSize;

@end

@interface _MFMessageSortingValueNumberOfAttachments : MFMessageSortingValue
{
    unsigned long long _numberOfAttachments;
}

- (id)description;
- (void)setNumberOfAttachments:(unsigned long long)arg1;
- (unsigned long long)numberOfAttachments;

@end

@interface _MFMessageSortingValueSubject : MFMessageSortingValue
{
    NSString *_subject;
    unsigned char _subjectPrefixLength;
}

- (id)description;
- (id)subjectAndPrefixLength:(unsigned long long *)arg1;
- (void)setSubjectPrefixLength:(unsigned char)arg1;
- (void)setSubject:(id)arg1;
- (id)subject;
- (void)dealloc;

@end

@interface _MFMessageSortingValueTo : MFMessageSortingValue
{
    NSArray *_to;
}

- (id)description;
- (void)setTo:(id)arg1;
- (id)to;
- (void)dealloc;

@end

@interface _MFMessageSortingValueDateReceived : MFMessageSortingValue
{
    double _dateReceivedAsTimeIntervalSince1970;
}

- (id)description;
- (void)setDateReceivedAsTimeIntervalSince1970:(double)arg1;
- (double)dateReceivedAsTimeIntervalSince1970;

@end

@interface _MFMessageSortingValueDateSent : MFMessageSortingValue
{
    double _dateSentAsTimeIntervalSince1970;
}

- (id)description;
- (void)setDateSentAsTimeIntervalSince1970:(double)arg1;
- (double)dateSentAsTimeIntervalSince1970;

@end

@interface _MFMessageSortingValueMailbox : MFMessageSortingValue
{
    MFMailbox *_mailbox;
}

- (id)description;
- (void)setMailbox:(id)arg1;
- (id)mailbox;
- (void)dealloc;

@end

@interface _MFMessageSortingValueUid : MFMessageSortingValue
{
    unsigned int _uidForSort;
}

- (id)description;
- (void)setUidForSort:(unsigned int)arg1;
- (unsigned int)uidForSort;

@end

@interface _MFMessageSortingValueLibraryID : MFMessageSortingValue
{
    long long _libraryID;
}

- (id)description;
- (void)setLibraryID:(long long)arg1;
- (long long)libraryID;

@end

@interface MFCachedMailboxInfo : NSObject
{
    int _mailboxType;
    long long _mailboxID;
    MFMailbox *_mailbox;
}

@property(retain, nonatomic) MFMailbox *mailbox; // @synthesize mailbox=_mailbox;
@property(nonatomic) int mailboxType; // @synthesize mailboxType=_mailboxType;
@property(nonatomic) long long mailboxID; // @synthesize mailboxID=_mailboxID;
- (void)updateWithMessage:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MFMessageStore : NSObject <MCMessageDataSource>
{
    id _retainCountLock;
    MFMailbox *_mailbox;
    NSMutableArray *_allMessages;
    MFMailAccount *_account;
    NSMutableSet *_uniqueStrings;
    BOOL _isReadOnly;
    BOOL _compactOnClose;
    BOOL _haveOpenLockFile;
    BOOL _isWritingChangesToDisk;
    BOOL _isTryingToClose;
    id _cacheLock;
    NSCache *_headerDataCache;
    NSCache *_headerCache;
    NSCache *_bodyDataCache;
    NSCache *_bodyCache;
    int _storeState;
    NSTimer *_timer;
    MCActivityMonitor *_openMonitor;
    NSMutableDictionary *_fetchLockMap;
    BOOL _hasUnsavedChangesToMessageData;
    BOOL _forceInvalidation;
    NSOperationQueue *_deleteQueue;
}

+ (void)_autosaveMessageStore:(id)arg1;
+ (long long)copyMessages:(id)arg1 toMailbox:(id)arg2 shouldDelete:(BOOL)arg3;
+ (id)succesfulMessagesFromMessages:(id)arg1 unsuccessfulOnes:(id)arg2;
+ (BOOL)cheapStoreAtPathIsEmpty:(id)arg1;
+ (BOOL)storeAtPathIsWritable:(id)arg1;
+ (BOOL)createEmptyStoreForPath:(id)arg1;
+ (BOOL)createEmptyStoreIfNeededForPath:(id)arg1 notIndexable:(BOOL)arg2;
+ (void)removeStoreFromCache:(id)arg1;
+ (void)registerAvailableStore:(id)arg1 forMailbox:(id)arg2;
+ (id)currentlyAvailableStoresForAccount:(id)arg1;
+ (id)currentlyAvailableStoreForMailbox:(id)arg1;
+ (id)_copyRawAvailableStoreForMailbox:(id)arg1 wantsCreate:(BOOL)arg2 shouldCreate:(char *)arg3;
+ (id)_storeCreationMarker;
+ (id)descriptionOfOpenStores;
+ (unsigned long long)numberOfCurrentlyOpenStores;
+ (void)initialize;
@property(readonly, nonatomic) NSOperationQueue *deleteQueue; // @synthesize deleteQueue=_deleteQueue;
@property BOOL forceInvalidation; // @synthesize forceInvalidation=_forceInvalidation;
@property BOOL hasUnsavedChangesToMessageData; // @synthesize hasUnsavedChangesToMessageData=_hasUnsavedChangesToMessageData;
@property(retain) MCActivityMonitor *openMonitor; // @synthesize openMonitor=_openMonitor;
@property BOOL isReadOnly; // @synthesize isReadOnly=_isReadOnly;
- (id)dataForMimePart:(id)arg1;
- (void)setNumberOfAttachments:(unsigned int)arg1 isSigned:(BOOL)arg2 isEncrypted:(BOOL)arg3 forMessage:(id)arg4;
- (id)attachmentsDirectoryForMessage:(id)arg1;
- (BOOL)_updateFlagColor:(BOOL)arg1 forMessage:(id)arg2;
- (BOOL)_updateFlagForMessage:(id)arg1 key:(id)arg2 value:(BOOL)arg3;
- (void)messagesWereAdded:(id)arg1 conversationsMembers:(id)arg2 duringOpen:(BOOL)arg3 options:(id)arg4;
- (void)_setFlagsAndColorForMessages:(id)arg1;
- (void)_setBackgroundColorForMessages:(id)arg1 textColorForMessages:(id)arg2;
- (void)updateMessages:(id)arg1 updateColor:(BOOL)arg2 updateNumberOfAttachments:(BOOL)arg3;
- (void)updateMessageColorsSynchronouslyForMessages:(id)arg1 postingNotification:(BOOL)arg2;
- (id)_cachedHeaderDataForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (id)_cachedBodyDataForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (id)_cachedHeadersForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (id)_cachedBodyForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (id)_setOrGetValue:(id)arg1 forKey:(id)arg2 inCache:(id *)arg3;
- (void)_invalidateObjectCachesForKey:(id)arg1;
- (id)_setOrGetBody:(id)arg1 forMessage:(id)arg2 updateFlags:(BOOL)arg3;
- (void)_rebuildTableOfContentsSynchronously;
- (void)_flushAllMessageData;
- (void)flushAllCaches;
- (void)_removeLockFile;
- (BOOL)_acquireLockFile;
- (id)_lockFilePath;
- (void)_invalidateInBackground;
- (void)_invalidate;
- (int)storeState;
- (BOOL)setStoreState:(int)arg1 fromState:(int)arg2;
- (BOOL)_isReadyToBeInvalidated;
- (BOOL)_shouldCallCompactWhenClosing;
- (id)_fetchBodyForMessage:(id)arg1 updateFlags:(BOOL)arg2;
- (id)_fetchBodyForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 updateFlags:(BOOL)arg3 allowPartial:(BOOL)arg4;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3 allowPartial:(BOOL)arg4;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 allowPartial:(BOOL)arg3;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (void)_setNeedsAutosave;
- (void)_cancelAutosave;
- (void)invalidateMessages:(id)arg1;
- (void)invalidateMessage:(id)arg1;
- (BOOL)isSortedAscending;
- (id)sortOrder;
- (void)suggestSortOrder:(id)arg1 ascending:(BOOL)arg2;
- (void)invalidateSyncEngine;
- (void)fetchSynchronouslyForKnownChanges;
- (void)fetchSynchronously;
- (id)status;
- (void)sendResponseType:(BOOL)arg1 forMeetingMessage:(id)arg2;
- (id)async_setJunkMailLevel:(long long)arg1 forMessages:(id)arg2 trainJunkMailDatabase:(BOOL)arg3 userRecorded:(BOOL)arg4;
- (id)async_setJunkMailLevel:(long long)arg1 forMessages:(id)arg2 trainJunkMailDatabase:(BOOL)arg3;
- (id)async_setJunkMailLevel:(long long)arg1 forMessages:(id)arg2;
- (void)updateMessageColorsSynchronouslyForMessages:(id)arg1;
- (void)updateNumberOfAttachmentsAndColorsForMessages:(id)arg1;
- (void)updateNumberOfAttachmentsForMessages:(id)arg1;
- (void)startSynchronization;
- (void)setColor:(id)arg1 highlightTextOnly:(BOOL)arg2 forMessages:(id)arg3;
- (id)async_setFlagWithKey:(id)arg1 state:(BOOL)arg2 forMessages:(id)arg3;
- (id)async_setLocalFlagsForMessages:(id)arg1;
- (id)async_setGmailLabelsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)async_setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)setPrimitiveFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (void)saveSnippetsForMessages:(id)arg1;
- (id)snippetsForMessages:(id)arg1;
- (BOOL)supportsSnippets;
- (id)colorForMessage:(id)arg1;
- (id)uniquedString:(id)arg1;
- (BOOL)hasCachedDataForMimePart:(id)arg1;
- (id)headersForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)headersForMessage:(id)arg1;
- (void)updateBodyFlagsForMessage:(id)arg1 body:(id)arg2;
- (id)bodyForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 updateFlags:(BOOL)arg3 allowPartial:(BOOL)arg4;
- (id)bodyForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 updateFlags:(BOOL)arg3;
- (id)bodyForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)fullBodyDataForMessage:(id)arg1;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)bodyDataForMessage:(id)arg1;
- (id)bodyDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)bodyDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 allowPartial:(BOOL)arg3;
- (id)headerDataForMessage:(id)arg1 allowPartial:(BOOL)arg2;
- (id)headerDataForMessage:(id)arg1;
- (id)headerDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)headerDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 allowPartial:(BOOL)arg3;
- (unsigned long long)_numberOfMessagesToCache;
- (id)messageForMessageID:(id)arg1;
- (id)messagesForDocumentID:(id)arg1;
- (id)recentMessageWithValue:(id)arg1 forHeader:(id)arg2;
- (long long)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2;
- (long long)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3;
- (long long)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4;
- (long long)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 forMove:(BOOL)arg5;
- (long long)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 flagsToSet:(id)arg5;
- (long long)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 flagsToSet:(id)arg5 forMove:(BOOL)arg6;
- (long long)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 flagsToSet:(id)arg5 forMove:(BOOL)arg6 error:(id *)arg7;
- (long long)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 newDocumentIDsByOld:(id)arg5 flagsToSet:(id)arg6 forMove:(BOOL)arg7 error:(id *)arg8;
- (void)finishCopyOfMessages:(id)arg1 fromStore:(id)arg2 originalsWereDeleted:(BOOL)arg3;
- (long long)undoAppendOfMessageIDs:(id)arg1;
- (BOOL)allowsDeleteInPlace;
- (BOOL)allowsOverwrite;
- (BOOL)allowsAppend;
- (void)deleteLastMessageWithHeaders:(id)arg1 compactWhenDone:(BOOL)arg2;
- (void)undeleteMessages:(id)arg1;
- (id)undeleteMessages:(id)arg1 movedToStore:(id)arg2 newMessageIDs:(id)arg3;
- (void)deleteMessages:(id)arg1 moveToTrash:(BOOL)arg2;
- (id)async_deleteMessages:(id)arg1 moveToTrash:(BOOL)arg2;
- (void)deleteMessagesOlderThanNumberOfDays:(long long)arg1 compact:(BOOL)arg2;
- (void)doCompact;
- (BOOL)canCompact;
- (void)rebuildTableOfContentsAsynchronously;
- (BOOL)canRebuild;
- (id)routeMessages:(id)arg1 isUserAction:(BOOL)arg2;
- (id)finishRoutingMessages:(id)arg1 routed:(id)arg2;
- (id)routeMessages:(id)arg1;
- (id)_defaultRouterDestination;
- (void)addMessagesToAllMessages:(id)arg1;
- (id)copyOfAllMessagesWithOptions:(unsigned int)arg1;
- (id)mutableCopyOfAllMessages;
- (id)copyOfAllMessages;
- (unsigned long long)totalCount;
- (void)messagesWereUpdated:(id)arg1;
- (void)messagesWereCompacted:(id)arg1;
- (void)messagesWereAdded:(id)arg1;
- (void)structureDidChange;
- (void)messageFlagsDidChange:(id)arg1 flags:(id)arg2;
- (BOOL)isTrash;
- (id)description;
- (const char *)displayNameForLogging;
- (id)displayName;
- (BOOL)isOpened;
- (id)allMailboxRepresentations;
- (BOOL)isSmartMailbox;
- (id)mailbox;
- (id)account;
- (void)invalidateSavingChanges:(BOOL)arg1;
- (void)saveChanges;
- (void)writeUpdatedMessageDataToDisk;
- (void)cancelOpen;
- (void)didOpenWithMessages:(id)arg1;
- (void)willOpen;
- (void)cleanupSynchronously;
- (void)_cleanupSynchronouslyIfCancelOpenPosted;
- (void)cleanupAsynchronously;
- (void)updateMetadata;
- (void)updateMetadataAsynchronously;
- (void)openSynchronouslyUpdatingMetadata:(BOOL)arg1;
- (void)openSynchronously;
- (void)openAsynchronouslyWithOptions:(unsigned int)arg1;
- (void)openAsynchronously;
- (void)reset;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_messageStoreCommonInit;
- (id)initWithMailbox:(id)arg1 readOnly:(BOOL)arg2;
- (id)init;
- (id)willDeallocPerformingInStoreCacheLock:(char *)arg1;
- (void)queueSaveChangesInvocation;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (id)objectSpecifierForMessage:(id)arg1;
- (id)objectSpecifier;

@end

@interface MFMessageThread : MCMessage
{
    NSMutableArray *_filteredMessages;
    NSString *_formattedUnreadMessageCount;
    NSMutableDictionary *_pendingChanges;
    MCMessage *_newestMessage;
    MCMessage *_oldestMessage;
    MCMessage *_realNewestMessage;
    MCMessage *_newestReceivedMessage;
    MCMessage *_newestSentMessage;
    MCMessage *_snippetMessage;
    MCMessage *_messageWithHighestLibraryID;
    MCMessage *_messageWithHighestRemoteID;
    MCMessage *_messageWithHighestNumberWithinStores;
    unsigned int _unreadMessageCount;
    unsigned int _flaggedMessageCount;
    unsigned int _junkMessageCount;
    unsigned int _attachmentCount;
    BOOL _updateSubjectEtcUponClosing;
    BOOL _isThreadOpen;
    BOOL _showDateInSubject;
}

+ (id)findMessageWithHighestRemoteIDInMessages:(id)arg1;
+ (id)findMessageWithHighestLibraryIDInMessages:(id)arg1;
+ (id)findSnippetMessageInMessages:(id)arg1;
+ (id)findNewestSentMessageInMessages:(id)arg1;
+ (id)findNewestReceivedMessageInMessages:(id)arg1;
+ (id)findNewestMessageInMessages:(id)arg1;
+ (id)_storeForMailbox:(id)arg1 fromStores:(id)arg2 cache:(id)arg3;
+ (BOOL)_isNewSnippetMessage:(id)arg1 currentSnippetDate:(double *)arg2 newestReadDate:(double *)arg3 threadHasReadMessages:(char *)arg4;
+ (id)_newestFirstEnumerator:(id)arg1;
+ (id)messagesByExpandingThreads:(id)arg1;
@property BOOL showDateInSubject; // @synthesize showDateInSubject=_showDateInSubject;
@property BOOL isThreadOpen; // @synthesize isThreadOpen=_isThreadOpen;
- (id)gmailLabels;
- (id)mailbox;
- (id)messageWithHighestNumberWithinStores:(id)arg1;
- (unsigned int)uidForSort;
- (id)messageWithHighestRemoteID;
- (id)_unlockedMessageWithHighestRemoteID;
- (id)messageWithHighestLibraryID;
- (id)_unlockedMessageWithHighestLibraryID;
- (void)_setJunkFlags;
- (id)snippetMessage;
- (id)newestSentMessage;
- (id)newestMessage;
- (id)oldestMessage;
- (void)invertOrderOfMessagesMakePending:(BOOL)arg1;
- (void)sortMessagesUsingComparator:(id)arg1 makePending:(void)arg2;
- (BOOL)willBeDeletedIfMessagesAreDeleted:(id)arg1;
- (void)setIsOpen:(BOOL)arg1;
- (BOOL)isOpen;
- (BOOL)isThread;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)numberOfAttachments;
- (unsigned long long)messageSize;
- (id)messageBody;
- (id)dataSource;
- (id)messageID;
- (id)senderDisplayName;
- (id)sender;
- (double)dateLastViewedAsTimeIntervalSince1970;
- (double)dateSentAsTimeIntervalSince1970;
- (double)dateReceivedAsTimeIntervalSince1970;
- (id)subject;
- (id)to;
- (void)setOldestMessage:(id)arg1;
- (void)setNewestSentMessage:(id)arg1;
- (void)setNewestReceivedMessage:(id)arg1;
- (void)setNewestMessage:(id)arg1;
- (unsigned long long)numberOfUnreadMessages;
- (id)pendingFilteredMessages;
- (unsigned long long)numberOfPendingFilteredMessages;
- (unsigned long long)numberOfFilteredMessages;
- (id)formattedUnreadMessageCount;
- (void)updateSubjectEtc:(BOOL)arg1;
- (BOOL)flagsHaveChanged;
- (void)discardPendingChangesForSeriesID:(id)arg1;
- (BOOL)commitPendingChangesForSeriesID:(id)arg1;
- (void)deleteMessages:(id)arg1 makePending:(BOOL)arg2;
- (void)addMessages:(id)arg1 usingComparator:(id)arg2 makePending:(void)arg3;
- (id)_filteredMessagesEnumerator;
- (id)filteredMessages;
@property(readonly) unsigned int options;
@property(readonly) long long conversationID;
- (id)appliedFlagColors;
- (void)dealloc;
- (id)init;
- (id)initWithMessages:(id)arg1;

@end

@interface MFNeXTStore : MFMessageStore
{
    NSData *_mboxData;
    MFTableOfContents *_toc;
    BOOL _mboxIsOnSMB;
    BOOL _haveUpdatedMetadata;
    BOOL _importMode;
    NSData *_incomingMboxData;
    BOOL _rebuildingTOC;
}

+ (BOOL)cheapStoreAtPathIsEmpty:(id)arg1;
+ (BOOL)storeAtPathIsWritable:(id)arg1;
+ (BOOL)createEmptyStoreForPath:(id)arg1;
@property BOOL rebuildingTOC; // @synthesize rebuildingTOC=_rebuildingTOC;
- (BOOL)_shouldCallCompactWhenClosing;
- (BOOL)isSortedAscending;
- (id)sortOrder;
- (void)suggestSortOrder:(id)arg1 ascending:(BOOL)arg2;
- (long long)_writeMessagesToIncomingMail:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3;
- (void)_incorporateMailFromIncoming;
- (long long)undoAppendOfMessageIDs:(id)arg1;
- (long long)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 flagsToSet:(id)arg5 forMove:(BOOL)arg6 error:(id *)arg7;
- (BOOL)allowsAppend;
- (long long)_appendMessages:(id)arg1 successes:(id *)arg2 failures:(id *)arg3 mboxName:(id)arg4 tableOfContents:(id)arg5;
- (void)_addIDsForAppendedMessages:(id)arg1 toArray:(id)arg2;
- (id)_appendMessage:(id)arg1 toFile:(id)arg2;
- (void)_deleteAttachments:(id)arg1;
- (void)doCompact;
- (void)_compactMessageAtIndex:(unsigned long long)arg1;
- (BOOL)canCompact;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3 allowPartial:(BOOL)arg4;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 allowPartial:(BOOL)arg3;
- (id)messageForMessageID:(id)arg1;
- (void)_resetAllMessages;
- (BOOL)tableOfContents:(id)arg1 loadedMessages:(id)arg2;
- (void)_flushAllMessageData;
- (void)_rebuildTableOfContentsSynchronously;
- (BOOL)canRebuild;
- (void)writeUpdatedMessageDataToDisk;
- (void)_invalidate;
- (id)_lockFilePath;
- (void)updateMetadata;
- (id)messagesForImporter;
- (id)incomingMessages;
- (void)openSynchronouslyUpdatingMetadata:(BOOL)arg1;
- (void)_releaseMboxData;
- (void)dealloc;
- (id)init;

@end

@interface MFParentalControlAccount : MFLocalAccount
{
}

+ (id)_mailboxNameForAccount:(id)arg1;
+ (id)storeForAccount:(id)arg1;
+ (id)storeForMailbox:(id)arg1;
+ (id)mailboxForAccount:(id)arg1;
+ (id)allMailboxes;
+ (id)originalAccountForIncomingMailbox:(id)arg1;
+ (id)parentalControlAccount;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (id)mailboxPathExtension;
- (Class)storeClassForMailbox:(id)arg1;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;

@end

@interface MFParentalControlManager : NSObject <MCActivityTarget>
{
    NSMutableSet *_pcStores;
    MCInvocationQueue *_tasks;
    NSDate *_lastCleanupDate;
    NSMutableArray *_recentRequests;
    BOOL _isDirty;
    BOOL _recentRequestsDirty;
    NSMutableSet *_pendingRequests;
}

+ (id)sharedManager;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (void)_saveChangesWithDelay;
@property BOOL isDirty;
- (void)_approveEmailListChanged:(id)arg1;
- (BOOL)isEmail:(id)arg1 inEmailList:(id)arg2;
- (BOOL)rejectRequest:(id)arg1;
- (BOOL)approveRequest:(id)arg1;
- (BOOL)_respondToRequest:(id)arg1 approve:(BOOL)arg2;
- (void)_deliverResponseMessage:(id)arg1 requestMessage:(id)arg2;
- (id)_makeResponseMessageToRequest:(id)arg1 approve:(BOOL)arg2;
- (void)saveChanges;
- (BOOL)requestApprovalForOutgoingMessage:(id)arg1;
- (void)_requestApprovalForOutgoingMessage:(id)arg1 srcStore:(id)arg2;
- (void)_deliverApprovalRequestMessage:(id)arg1 forOutgoingMessage:(id)arg2;
- (BOOL)haveEmailsBeenApproved:(id)arg1 unapprovedOnes:(id)arg2;
- (BOOL)processIncomingMessage:(id)arg1 messageIsParentResponse:(char *)arg2;
- (void)_cleanupPCStores;
- (void)_reallyCleanupPCStores;
- (void)_cleanupPCStore:(id)arg1;
- (void)_rejectAddresses:(id)arg1 responseFromAccount:(id)arg2;
- (void)_approveAddresses:(id)arg1 responseFromAccount:(id)arg2;
- (void)_reallyRequestApprovalForIncomingMessage:(id)arg1 srcStore:(id)arg2 pcStore:(id)arg3 messageInPCStore:(id)arg4;
- (void)_requestApprovalForIncomingMessage:(id)arg1 srcStore:(id)arg2 pcStore:(id)arg3 messageInPCStore:(id)arg4;
- (BOOL)_hasPendingRequestForSender:(id)arg1;
- (void)_removeSendersFromRecentRequests:(id)arg1;
- (BOOL)_hasRecentlySentPermissionRequestForSender:(id)arg1;
- (id)_recentRequestsNoLock;
- (id)_recentRequestsFilePath;
- (id)_deliverMessage:(id)arg1;
- (id)_makeRequestMessageForMessage:(id)arg1 isOutgoingMessage:(BOOL)arg2;
- (id)_openPCStoreForAccount:(id)arg1;
- (id)_openStoreForPCMailbox:(id)arg1;
- (id)_openStoreForPCMailbox:(id)arg1 keepOpen:(BOOL)arg2;
- (void)_rejectSenders:(id)arg1 sourcePCMailbox:(id)arg2;
- (void)_approveSenders:(id)arg1 sourcePCMailbox:(id)arg2 destinationAccount:(id)arg3;
- (void)_cleanupPCStoresAfterDelay:(id)arg1;
- (void)deleteAccount:(id)arg1;
- (id)headersRequiredForParentalControl;
- (BOOL)isParentEmailAvailable;
- (id)parentalControlDirectory;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface MFParentalControlSettings : NSObject
{
}

+ (BOOL)isEmail:(id)arg1 inEmailList:(id)arg2;
+ (id)sharedInstance;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (double)parentalControlEnabledTimeIntervalSince1970;
- (id)rejectEmails:(id)arg1;
- (BOOL)_rejectEmail:(id)arg1;
- (id)approveEmails:(id)arg1;
- (BOOL)_approveEmail:(id)arg1;
- (id)_dictionaryFromEmail:(id)arg1;
- (BOOL)haveEmailsBeenApproved:(id)arg1 unapprovedOnes:(id)arg2;
- (BOOL)hasEmailBeenApproved:(id)arg1;
- (id)_approvedEmails;
- (BOOL)_isSelfEmail:(id)arg1;
- (BOOL)isParentEmail:(id)arg1;
- (id)parentEmails;
- (BOOL)isParentalControlEnabled;
- (void)_approveEmailListChanged:(id)arg1;
- (void)_defaultsDidChange;
- (void)_reallyHandleDefaultsChange;
- (void)_updateCachedDataForEnabledState:(BOOL)arg1 approvedList:(BOOL)arg2 postNotification:(BOOL)arg3;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface MFParentalControlStore : MFNeXTStore
{
}

- (void)saveChanges;
- (void)setParentalControlMessageState:(long long)arg1 forMessages:(id)arg2;
- (void)setParentalControlMessageState:(long long)arg1 forMessage:(id)arg2;
- (id)realAccount;
- (id)_defaultRouterDestination;
- (BOOL)_shouldCallCompactWhenClosing;

@end

@interface MFPOPAccount : MFMailAccount
{
    MFPOPStore *_fetcher;
    MCActivityMonitor *_fetchMonitor;
    NSLock *_connectionActivityLock;
    id _seenMessagesManagerLock;
    BOOL _fetcherNeedsReset;
    BOOL _deletingMessages;
    BOOL _hasDoneBackgroundSynchronization;
}

+ (id)accountTypeString;
- (id)storeForMailbox:(id)arg1 createIfNeeded:(BOOL)arg2;
- (id)_infoForMatchingURL:(id)arg1;
- (id)_URLPersistenceScheme;
- (void)_addAccountAndSeenMessagesToMessageManager;
- (id)newSeenMessagesManager;
- (id)authSchemesForConnection:(id)arg1;
- (BOOL)canAuthenticateWithScheme:(id)arg1 connection:(id)arg2;
- (id)archiveMailboxCreateIfNeeded:(BOOL)arg1;
- (void)relinquishConnectionActivityLock;
- (void)acquireConnectionActivityLock;
- (void)insertInMailboxes:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)deleteSeenMessagesNow;
- (void)deleteMessagesNow:(id)arg1;
- (BOOL)deletingMessages;
- (void)setDelayedMessageDeletionInterval:(long long)arg1;
- (long long)delayedMessageDeletionInterval;
- (void)setMessageDeletionPolicy:(long long)arg1;
- (long long)messageDeletionPolicy;
- (void)setDidTryUpgradingToAPOP:(BOOL)arg1;
- (BOOL)didTryUpgradingToAPOP;
- (void)setBigMessageWarningSize:(long long)arg1;
- (long long)bigMessageWarningSize;
- (BOOL)_setPath:(id)arg1;
- (BOOL)canMailboxBeRenamed:(id)arg1;
- (BOOL)canCreateNewMailboxes;
- (BOOL)containsMailboxes;
- (id)primaryMailbox;
- (id)mailboxPathExtension;
- (Class)storeClassForMailbox:(id)arg1;
- (BOOL)requiresAuthentication;
- (void *)keychainProtocol;
- (id)saslProfileName;
- (long long)defaultSecurePortNumber;
- (long long)defaultPortNumber;
- (id)standardSSLPorts;
- (id)standardPorts;
- (void)_readCustomInfoFromMailboxCache:(id)arg1;
- (void)setIsOffline:(BOOL)arg1;
- (BOOL)canGoOffline;
- (id)iaServiceType;
- (void)releaseAllConnections;
- (void)resetFetcher;
- (void)fetchSynchronously;
- (BOOL)_configureFetcherObject;
- (BOOL)connectAndAuthenticate:(id)arg1;
- (id)authenticatedConnection;
- (id)newConnectedConnectionDiscoveringBestSettings:(BOOL)arg1 withConnectTimeout:(double)arg2 readWriteTimeout:(double)arg3;
- (void)dealloc;
- (id)initWithAccountInfo:(id)arg1;
- (id)valueInMailboxesWithName:(id)arg1;
- (id)objectSpecifierForMailbox:(id)arg1;
- (id)mailboxes;
- (void)setDeleteMessagesOnServer:(BOOL)arg1;
- (BOOL)deleteMessagesOnServer;
- (void)setDeleteMessagesWhenMovedFromInbox:(BOOL)arg1;
- (BOOL)deleteMessagesWhenMovedFromInbox;

@end

@interface MFPOPConnection : MCConnection
{
    NSMutableData *_sendBuffer;
    NSMapTable *_listResults;
    NSMapTable *_serverMessageIdsByNumber;
    unsigned long long _numberOfMessagesAvailable;
    id <MFPOPConnectionDelegate> _delegate;
    NSData *_apopTimeStamp;
    NSArray *_capabilities;
    BOOL _capaCommandFailed;
    BOOL _connectionShouldPrefetchMessages;
    BOOL _currentlyFetchingMessage;
    id _context;
    unsigned long long _numberOfMessagesToFetch;
    unsigned long long _numberOfMessagesFetched;
    unsigned long long _totalBytesToFetch;
    unsigned long long _totalBytesReceived;
    long long _activityMonitorKey;
}

@property(nonatomic) long long activityMonitorKey; // @synthesize activityMonitorKey=_activityMonitorKey;
@property(nonatomic) BOOL currentlyFetchingMessage; // @synthesize currentlyFetchingMessage=_currentlyFetchingMessage;
@property(nonatomic) unsigned long long totalBytesReceived; // @synthesize totalBytesReceived=_totalBytesReceived;
@property(nonatomic) unsigned long long totalBytesToFetch; // @synthesize totalBytesToFetch=_totalBytesToFetch;
@property(nonatomic) unsigned long long numberOfMessagesFetched; // @synthesize numberOfMessagesFetched=_numberOfMessagesFetched;
@property(nonatomic) unsigned long long numberOfMessagesToFetch; // @synthesize numberOfMessagesToFetch=_numberOfMessagesToFetch;
@property(retain, nonatomic) id context; // @synthesize context=_context;
- (long long)_pass:(id)arg1;
- (long long)_user:(id)arg1;
- (long long)_apopWithUsername:(id)arg1 password:(id)arg2;
- (long long)_getStatusFromReply;
- (void)_parsePOPErrorFromData:(id)arg1 error:(id)arg2;
- (id)_copyReplyLineData;
- (id)_copyReplyLineDataWithError:(id *)arg1;
- (long long)_sendCommand:(const char *)arg1 dontLogIndex:(long long)arg2 withArguments:(id)arg3;
- (long long)_readMultilineResponseWithMaxSize:(unsigned long long)arg1 intoMutableData:(id)arg2 informDelegate:(BOOL)arg3;
- (BOOL)_startTLS;
@property MFPOPAccount *account;
- (void)setDelegate:(id)arg1 context:(id)arg2;
- (long long)deleteMessagesOnServer:(id)arg1;
- (long long)fetchMessages:(id)arg1 totalBytes:(unsigned long long)arg2;
- (unsigned long long)numberOfMessagesAvailable;
- (BOOL)messagesAvailable;
- (unsigned long long)sizeOfMessageNumber:(unsigned long long)arg1;
- (void)getTopOfMessageNumber:(unsigned long long)arg1 intoMutableData:(id)arg2;
- (id)newMessageHeaderForMessageNumber:(unsigned long long)arg1;
- (long long)dele:(unsigned long long)arg1;
- (long long)_retr:(unsigned long long)arg1;
- (id)_newDataForMessage:(unsigned long long)arg1 ofSize:(unsigned long long)arg2 informDelegate:(BOOL)arg3;
- (void)setMessageID:(id)arg1 forMessageNumber:(unsigned long long)arg2;
- (id)messageIDForMessageNumber:(unsigned long long)arg1;
- (long long)getMessageNumbers:(id *)arg1 andMessageIdsByNumber:(id *)arg2;
- (long long)_getListResults;
- (long long)doStat;
- (BOOL)supportsAPOP;
- (BOOL)supportsUSER;
- (long long)_quit;
- (void)quit;
- (BOOL)_authenticateWithUsername:(id)arg1 password:(id)arg2;
- (BOOL)_apopAuthenticateWithUsername:(id)arg1 password:(id)arg2;
- (BOOL)_authenticateWithAuthenticator:(id)arg1;
- (BOOL)authenticate;
- (BOOL)_completeConnectionWithResult:(BOOL)arg1;
- (id)authenticationMechanisms;
- (id)capabilities;
- (void)dealloc;
- (id)init;

@end

@interface MFPOPMessage : MCMessage
{
    unsigned long long _messageNumber;
    NSString *_messageID;
    NSData *_messageData;
}

- (id)originalMailboxURLString;
- (id)remoteMailboxURLString;
- (void)setMessageID:(id)arg1;
- (id)messageID;
- (id)messageDataIncludingFromSpace:(BOOL)arg1 newDocumentID:(id)arg2;
- (unsigned long long)messageSize;
- (void)setDataSource:(id)arg1;
- (id)dataSource;
- (id)mailbox;
- (id)account;
- (void)setMessageData:(id)arg1;
- (id)messageData;
- (void)setMessageNumber:(unsigned long long)arg1;
- (unsigned long long)messageNumber;
- (void)dealloc;
- (id)initWithPOP3FetchStore:(id)arg1;

@end

@interface MFPOPSizeEngine : MFSizeEngine
{
    NSMutableDictionary *_infoByMessageID;
}

- (void)_messageFlagsChanged:(id)arg1;
- (void)_deleteServerMessagesCompleted:(id)arg1;
- (void)_fetchCompleted:(id)arg1;
- (BOOL)_prepareToRefresh;
- (void)_runWorkerThread;
- (id)_remoteMailboxURL;
- (id)_newMessageInfoFromMessageHeaders:(id)arg1;
- (id)infoWithKey:(id)arg1 forMessageWithID:(id)arg2;
- (id)allMessageIDs;
- (void)dealloc;
- (id)initWithAccount:(id)arg1;

@end

@interface MFPOPStore : MFMessageStore <MFPOPConnectionDelegate, MFRouterStore>
{
    NSMutableSet *_skippedMessageIds;
    NSMutableIndexSet *_messageNumbersToDelete;
    BOOL _lastConnectionFailed;
    BOOL _routerCancelled;
}

@property BOOL routerCancelled; // @synthesize routerCancelled=_routerCancelled;
- (void)messagesWereRouted:(id)arg1;
- (void)messagesWillBeRouted:(id)arg1;
- (id)_defaultRouterDestination;
- (void)cancel;
- (void)connection:(id)arg1 didRetrieveData:(id)arg2 forMessageNumber:(unsigned long long)arg3;
- (long long)connection:(id)arg1 willRetrieveMessageNumber:(unsigned long long)arg2 header:(id)arg3 size:(unsigned long long)arg4;
- (void)connection:(id)arg1 receivedNumberOfBytes:(unsigned long long)arg2;
- (BOOL)connectionShouldPrefetchMessages;
- (void)messageFlagsDidChange:(id)arg1 flags:(id)arg2;
- (void)_cancelAutosave;
- (void)_setNeedsAutosave;
- (void)writeUpdatedMessageDataToDisk;
- (id)messageForMessageID:(id)arg1;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)_fetchBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3 allowPartial:(BOOL)arg4;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)_fetchHeaderDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 allowPartial:(BOOL)arg3;
- (id)displayName;
- (BOOL)isOpened;
- (id)mailbox;
- (id)_copyMessageNumbersToDelete;
- (void)_clearMessageNumbersToDelete;
- (void)_addMessageNumberToDelete:(unsigned long long)arg1;
- (long long)_closeConnection:(id)arg1;
- (void)_deleteMessagesMarkedForDeletionUsingManager:(id)arg1;
- (void)_removeDeletedMessagesWithNumbers:(id)arg1 fromSeenMessageManager:(id)arg2 connection:(id)arg3;
- (BOOL)_shouldDeleteSeenMessage:(id)arg1 messageID:(id)arg2 deletionPolicy:(long long)arg3 cutoffDate:(id)arg4 url:(id)arg5 inbox:(id)arg6;
- (id)_messageIDForNumber:(unsigned long long)arg1 serverIdsByNumber:(id)arg2 connection:(id)arg3;
- (BOOL)_firstAndLast:(unsigned long long)arg1 onConnection:(id)arg2 alreadySeen:(id)arg3;
- (void)_backgroundFetchFailed:(id)arg1;
- (id)_authenticatedConnection;
- (BOOL)_createDirectoryIfNeeded;
- (void)fetchSynchronously;
- (void)deleteMessages:(id)arg1;
- (id)account;
- (void)dealloc;
- (id)initWithMailbox:(id)arg1 readOnly:(BOOL)arg2;
- (id)init;
- (id)initWithPOPAccount:(id)arg1;

@end

@interface MFPreparedStatement : NSObject
{
    struct sqlite3_stmt *_compiled;
}

@property(readonly, nonatomic) struct sqlite3_stmt *compiled; // @synthesize compiled=_compiled;
- (int)reset;
- (void)sqliteFinalize;
- (void)dealloc;
- (id)initWithString:(const char *)arg1 andDb:(struct sqlite3 *)arg2;

@end

@interface MFQuoteParser : NSObject
{
    NSString *_quoteBlockHtmlPrefix;
    NSString *_quoteBlockHtmlSuffix;
}

- (void)reset;
- (id)escapedQuoteBlockWithHtml:(id)arg1;
- (id)strippedQuoteBlockWithHtml:(id)arg1;
- (id)_finalHtmlContentWithBlockQuoteChangesIfNeededForHtml:(id)arg1 startIndex:(unsigned long long)arg2 quoteProcessingStyle:(long long)arg3 allowMultipleQuoteBlocks:(BOOL)arg4;
- (void)dealloc;
- (id)initWithHtmlQuoteBlockHtmlPrefix:(id)arg1 quoteBlockHtmlSuffix:(id)arg2;

@end

@interface MFRecoveredMessage : MCMessage
{
    NSString *_path;
    NSString *_remoteID;
    NSString *_remoteMailboxURL;
    NSString *_originalMailboxURL;
    NSArray *_gmailLabelIDs;
    MCMessageHeaders *_headers;
    unsigned long long _size;
    CDStruct_07ba05d6 _remoteFlags;
    NSData *_bodyData;
    NSData *_allData;
    BOOL _loadedFileData;
}

+ (id)spotlightAttributesForBodyData:(id)arg1 plistData:(id)arg2;
- (id)spotlightAttributes;
- (id)description;
- (BOOL)setMessageID:(long long)arg1 directory:(id)arg2;
- (void)flushCachedData;
- (CDStruct_76a5ddda)moreMessageFlags;
- (unsigned int)messageFlags;
- (CDStruct_07ba05d6)remoteFlags;
- (void)setDataSource:(id)arg1;
- (id)dataSource;
- (id)mailbox;
- (id)account;
- (id)messageBodyIfAvailableUpdatingFlags:(BOOL)arg1;
- (id)messageBodyForIndexingAttachments;
- (id)messageBodyUpdatingFlags:(BOOL)arg1;
- (id)messageBodyFetchIfNotAvailable:(BOOL)arg1 allowPartial:(BOOL)arg2;
- (id)messageBodyIfAvailable;
- (id)messageBody;
- (BOOL)hasCachedDataForMimePart:(id)arg1;
- (id)dataForMimePart:(id)arg1;
- (id)bodyDataFetchIfNotAvailable:(BOOL)arg1 allowPartial:(BOOL)arg2;
- (id)bodyData;
- (id)messageDataIncludingFromSpace:(BOOL)arg1 newDocumentID:(id)arg2;
- (id)headersIfAvailable;
- (id)headers;
- (id)headerDataFetchIfNotAvailable:(BOOL)arg1 allowPartial:(BOOL)arg2;
- (id)originalMailboxURLString;
- (id)remoteMailboxURLString;
- (id)messageID;
- (void)_parseBodyDataWithPList:(id)arg1;
- (void)_parseFileData:(id)arg1;
- (void)_loadFileDataIfNeeded;
- (id)_extendedAttributes;
- (void)dealloc;
- (id)initWithURL:(id)arg1;
- (id)init;
- (id)_initWithBodyData:(id)arg1;
- (id)initWithPath:(id)arg1;

@end

@interface MFRecoveredStore : MFMessageStore
{
    NSArray *_pathsToImport;
}

- (id)messagesForImporter;
- (void)writeUpdatedMessageDataToDisk;
- (void)dealloc;
- (id)initWithMailbox:(id)arg1 readOnly:(BOOL)arg2;
- (id)init;
- (id)initWithMailbox:(id)arg1 readOnly:(BOOL)arg2 pathsToImport:(id)arg3;

@end

@interface MFRedundantContentMarkup : NSObject
{
    BOOL _matchedEntireAncestorContiguously;
    BOOL _messageContainsRedundantText;
    MCMessage *_message;
    MCParsedMessage *_parsedMessage;
    MCMessage *_ancestorUsedForComparison;
    NSString *_messageBodyWithRedundantTextMarkers;
    NSString *_redundantContentSenderName;
}

@property(readonly, nonatomic) BOOL messageContainsRedundantText; // @synthesize messageContainsRedundantText=_messageContainsRedundantText;
@property(readonly, nonatomic) BOOL matchedEntireAncestorContiguously; // @synthesize matchedEntireAncestorContiguously=_matchedEntireAncestorContiguously;
@property(readonly, nonatomic) NSString *redundantContentSenderName; // @synthesize redundantContentSenderName=_redundantContentSenderName;
@property(readonly, nonatomic) NSString *messageBodyWithRedundantTextMarkers; // @synthesize messageBodyWithRedundantTextMarkers=_messageBodyWithRedundantTextMarkers;
@property(readonly, nonatomic) MCMessage *ancestorUsedForComparison; // @synthesize ancestorUsedForComparison=_ancestorUsedForComparison;
@property(readonly, nonatomic) MCParsedMessage *parsedMessage; // @synthesize parsedMessage=_parsedMessage;
@property(readonly, nonatomic) MCMessage *message; // @synthesize message=_message;
- (id)description;
- (void)dealloc;
- (id)initWithMessage:(id)arg1 parsedMessage:(id)arg2 ancestorUsedForComparison:(id)arg3 messageBodyWithRedundantTextMarkers:(id)arg4 messageContainsRedundantText:(BOOL)arg5 matchedEntireAncestorContiguously:(BOOL)arg6;

@end

@interface _MFRedundantTextIdentifierAttachmentContext : NSObject
{
    BOOL _attachmentIsDownloaded;
    NSString *_attachmentName;
    NSString *_attachmentExtension;
    unsigned long long _attachmentSize;
}

@property(readonly, nonatomic) BOOL attachmentIsDownloaded; // @synthesize attachmentIsDownloaded=_attachmentIsDownloaded;
@property(readonly, nonatomic) unsigned long long attachmentSize; // @synthesize attachmentSize=_attachmentSize;
@property(readonly, nonatomic) NSString *attachmentExtension; // @synthesize attachmentExtension=_attachmentExtension;
@property(readonly, nonatomic) NSString *attachmentName; // @synthesize attachmentName=_attachmentName;
- (BOOL)isEqualTo:(id)arg1;
- (id)description;
- (void)dealloc;
- (id)initWithAttachmentName:(id)arg1 attachmentSize:(unsigned long long)arg2 attachmentIsDownloaded:(BOOL)arg3;

@end

@interface _MFRedundantTextIdentifierParseContext : NSObject
{
    BOOL _searchInForwardDirection;
    BOOL _startTagCharacter;
    BOOL _endTagCharacter;
    BOOL _startEntityCharacter;
    BOOL _endEntityCharacter;
    BOOL _isParsingEntity;
    BOOL _isParsingAttachment;
    BOOL _attachmentIsTag;
    unsigned short _entityValueCharacter;
    CDStruct_f9502b4c *_buffer;
    unsigned long long _bufferStartIndex;
    unsigned long long _bufferLength;
    long long _currentIndex;
    long long _startMatchIndexForCurrentLine;
    long long _entityStartIndex;
    _MFRedundantTextIdentifierAttachmentContext *_attachmentContext;
    long long _attachmentStartIndex;
    long long _attachmentEndIndex;
    NSDictionary *_attachmentContextsByURL;
}

+ (void)normalizeEntitiesInString:(id)arg1;
+ (id)normalizedStringForEntity:(id)arg1;
@property(readonly, nonatomic) NSDictionary *attachmentContextsByURL; // @synthesize attachmentContextsByURL=_attachmentContextsByURL;
@property(nonatomic) BOOL attachmentIsTag; // @synthesize attachmentIsTag=_attachmentIsTag;
@property(nonatomic) long long attachmentEndIndex; // @synthesize attachmentEndIndex=_attachmentEndIndex;
@property(nonatomic) long long attachmentStartIndex; // @synthesize attachmentStartIndex=_attachmentStartIndex;
@property(retain, nonatomic) _MFRedundantTextIdentifierAttachmentContext *attachmentContext; // @synthesize attachmentContext=_attachmentContext;
@property(nonatomic) BOOL isParsingAttachment; // @synthesize isParsingAttachment=_isParsingAttachment;
@property(nonatomic) long long entityStartIndex; // @synthesize entityStartIndex=_entityStartIndex;
@property(nonatomic) unsigned short entityValueCharacter; // @synthesize entityValueCharacter=_entityValueCharacter;
@property(nonatomic) BOOL isParsingEntity; // @synthesize isParsingEntity=_isParsingEntity;
@property(readonly, nonatomic) BOOL endEntityCharacter; // @synthesize endEntityCharacter=_endEntityCharacter;
@property(readonly, nonatomic) BOOL startEntityCharacter; // @synthesize startEntityCharacter=_startEntityCharacter;
@property(readonly, nonatomic) BOOL endTagCharacter; // @synthesize endTagCharacter=_endTagCharacter;
@property(readonly, nonatomic) BOOL startTagCharacter; // @synthesize startTagCharacter=_startTagCharacter;
@property(nonatomic) BOOL searchInForwardDirection; // @synthesize searchInForwardDirection=_searchInForwardDirection;
@property(nonatomic) long long startMatchIndexForCurrentLine; // @synthesize startMatchIndexForCurrentLine=_startMatchIndexForCurrentLine;
@property(nonatomic) long long currentIndex; // @synthesize currentIndex=_currentIndex;
@property(readonly, nonatomic) unsigned long long bufferLength; // @synthesize bufferLength=_bufferLength;
@property(readonly, nonatomic) unsigned long long bufferStartIndex; // @synthesize bufferStartIndex=_bufferStartIndex;
@property(readonly, nonatomic) CDStruct_f9502b4c *buffer; // @synthesize buffer=_buffer;
- (id)parseAndSanitizeAttributionLineInRange:(struct _NSRange *)arg1;
- (void)resetCurrentIndex;
- (long long)advanceToEndOfLine:(char *)arg1;
- (long long)advanceToEndOfLine;
- (BOOL)advanceToEndOfAttachmentPlaceholderIfExists;
- (unsigned short)readAndAdvanceToEndOfEntityIfExists;
- (long long)advancePastNonContentTagsAndWhitespaceParsingAttachmentPlaceholders:(BOOL)arg1;
- (unsigned short)charFromBufferAtIndex:(unsigned long long)arg1;
- (unsigned short)nextCharacterToMatch;
- (unsigned short)currentCharFromBuffer;
- (void)incrementCurrentIndexBy:(unsigned long long)arg1;
- (void)incrementCurrentIndex;
- (BOOL)isBlockLevelTag:(char *)arg1 size:(unsigned long long)arg2;
- (BOOL)advanceToClosingTagMatchingOpenTag:(char *)arg1 openTagSize:(unsigned long long)arg2;
- (BOOL)advanceToEndOfCommentIfExists;
- (BOOL)parseAttachmentFilenameFromAttribute:(const char *)arg1;
- (unsigned long long)readElement:(char *)arg1 isCloseElement:(char *)arg2 shouldParseAttachmentTags:(BOOL)arg3;
- (unsigned long long)readAndAdvanceToEndOfTag:(char *)arg1 isCloseTag:(char *)arg2 shouldParseAttachmentTags:(BOOL)arg3;
- (unsigned long long)remainingCharacters;
- (id)charactersInMessageWithCurrentIndexMarked;
- (id)description;
- (void)dealloc;
- (id)initWithBuffer:(CDStruct_f9502b4c *)arg1 bufferStartIndex:(unsigned long long)arg2 bufferLength:(unsigned long long)arg3 searchInForwardDirection:(BOOL)arg4 attachmentContextsByURL:(id)arg5;

@end

@interface MFRedundantTextIdentifier : NSObject
{
    MFRedundantContentMarkup *_redundantContentMarkup;
}

+ (id)_htmlMarkerForContentType:(long long)arg1;
+ (void)initialize;
@property(readonly, nonatomic) MFRedundantContentMarkup *redundantContentMarkup; // @synthesize redundantContentMarkup=_redundantContentMarkup;
- (id)_attachmentContextsByURLforAttachmentsByURL:(id)arg1;
- (void)dealloc;
- (id)initWithMessage:(id)arg1 parsedMessage:(id)arg2 ancestorMessage:(id)arg3 ancestorParsedMessage:(id)arg4;

@end

@interface _MFRedundantTextIdentifierSolutionContext : NSObject
{
    BOOL _searchInForwardDirection;
    BOOL _matchedEntireOriginalContiguously;
    CDStruct_f9502b4c *_replyBuffer;
    unsigned long long _replyStartIndex;
    unsigned long long _replyLength;
    CDStruct_f9502b4c *_originalBuffer;
    unsigned long long _originalStartIndex;
    unsigned long long _originalLength;
    NSDictionary *_originalAttachmentContextsByURL;
    NSDictionary *_replyAttachmentContextsByURL;
    NSMutableArray *_redundantRanges;
    NSMutableIndexSet *_redundantAttachmentStartIndexes;
    NSMutableArray *_attributionLineRanges;
    unsigned long long _startingIndexForRedundantRanges;
    unsigned long long _startingIndexForAttributionLineRanges;
    long long _lastIndexMatchedInOriginal;
    long long _lastIndexMatchedInReply;
}

@property(nonatomic) BOOL matchedEntireOriginalContiguously; // @synthesize matchedEntireOriginalContiguously=_matchedEntireOriginalContiguously;
@property(nonatomic) BOOL searchInForwardDirection; // @synthesize searchInForwardDirection=_searchInForwardDirection;
@property(nonatomic) long long lastIndexMatchedInReply; // @synthesize lastIndexMatchedInReply=_lastIndexMatchedInReply;
@property(nonatomic) long long lastIndexMatchedInOriginal; // @synthesize lastIndexMatchedInOriginal=_lastIndexMatchedInOriginal;
@property(nonatomic) unsigned long long startingIndexForAttributionLineRanges; // @synthesize startingIndexForAttributionLineRanges=_startingIndexForAttributionLineRanges;
@property(nonatomic) unsigned long long startingIndexForRedundantRanges; // @synthesize startingIndexForRedundantRanges=_startingIndexForRedundantRanges;
@property(retain, nonatomic) NSMutableArray *attributionLineRanges; // @synthesize attributionLineRanges=_attributionLineRanges;
@property(retain, nonatomic) NSMutableIndexSet *redundantAttachmentStartIndexes; // @synthesize redundantAttachmentStartIndexes=_redundantAttachmentStartIndexes;
@property(retain, nonatomic) NSMutableArray *redundantRanges; // @synthesize redundantRanges=_redundantRanges;
@property(readonly, nonatomic) NSDictionary *replyAttachmentContextsByURL; // @synthesize replyAttachmentContextsByURL=_replyAttachmentContextsByURL;
@property(readonly, nonatomic) NSDictionary *originalAttachmentContextsByURL; // @synthesize originalAttachmentContextsByURL=_originalAttachmentContextsByURL;
@property(readonly, nonatomic) unsigned long long originalLength; // @synthesize originalLength=_originalLength;
@property(nonatomic) unsigned long long originalStartIndex; // @synthesize originalStartIndex=_originalStartIndex;
@property(readonly, nonatomic) CDStruct_f9502b4c *originalBuffer; // @synthesize originalBuffer=_originalBuffer;
@property(readonly, nonatomic) unsigned long long replyLength; // @synthesize replyLength=_replyLength;
@property(nonatomic) unsigned long long replyStartIndex; // @synthesize replyStartIndex=_replyStartIndex;
@property(readonly, nonatomic) CDStruct_f9502b4c *replyBuffer; // @synthesize replyBuffer=_replyBuffer;
- (BOOL)location:(unsigned long long)arg1 isInRangeArray:(id)arg2 startingIndex:(unsigned long long *)arg3;
- (long long)contentTypeForIndex:(unsigned long long)arg1;
- (void)addRangeWithStart:(long long)arg1 end:(long long)arg2 toArray:(id)arg3;
- (void)computeAttributionRangesInReply;
- (void)computeRedundantRangesInReply;
- (id)description;
- (void)dealloc;
- (id)initWithReply:(CDStruct_f9502b4c *)arg1 replyStartIndex:(unsigned long long)arg2 replyLength:(unsigned long long)arg3 replyAttachmentContextsByURL:(id)arg4 original:(CDStruct_f9502b4c *)arg5 originalStartIndex:(unsigned long long)arg6 originalLength:(unsigned long long)arg7 originalAttachmentContextsByURL:(id)arg8 searchInForwardDirection:(BOOL)arg9;

@end

@interface _MFRedundantTextIdentifierSolutionGenerator : NSObject
{
    CDStruct_f9502b4c *_replyBuffer;
    CDStruct_f9502b4c *_originalBuffer;
    unsigned long long _replyLength;
    unsigned long long _originalLength;
    NSDictionary *_replyAttachmentContextsByURL;
    NSDictionary *_originalAttachmentContextsByURL;
}

@property(readonly, nonatomic) NSDictionary *originalAttachmentContextsByURL; // @synthesize originalAttachmentContextsByURL=_originalAttachmentContextsByURL;
@property(readonly, nonatomic) NSDictionary *replyAttachmentContextsByURL; // @synthesize replyAttachmentContextsByURL=_replyAttachmentContextsByURL;
@property(readonly, nonatomic) unsigned long long originalLength; // @synthesize originalLength=_originalLength;
@property(readonly, nonatomic) unsigned long long replyLength; // @synthesize replyLength=_replyLength;
@property(readonly, nonatomic) CDStruct_f9502b4c *originalBuffer; // @synthesize originalBuffer=_originalBuffer;
@property(readonly, nonatomic) CDStruct_f9502b4c *replyBuffer; // @synthesize replyBuffer=_replyBuffer;
- (id)generateBestSolutionInForwardDirection:(BOOL)arg1 replyStartIndex:(unsigned long long)arg2 originalStartIndex:(unsigned long long)arg3;
- (id)generateBestSolution;
- (void)dealloc;
- (id)initWithReply:(CDStruct_f9502b4c *)arg1 replyLength:(unsigned long long)arg2 replyAttachmentContextsByURL:(id)arg3 original:(CDStruct_f9502b4c *)arg4 originalLength:(unsigned long long)arg5 originalAttachmentContextsByURL:(id)arg6;

@end

@interface MFRemoteAppendMessagesContext : NSObject
{
    BOOL someMsgsWentToServer;
    BOOL _forMove;
    unsigned int _destUidNext;
    NSArray *_messages;
    NSArray *_flagsToSet;
    NSMutableArray *_missedMessages;
    NSMutableArray *_addedMessageIDs;
    NSMutableArray *_addedMessages;
    NSMutableDictionary *_addedDocumentIDsByOld;
    unsigned long long _unreadCountDelta;
}

@property(nonatomic) BOOL forMove; // @synthesize forMove=_forMove;
@property(nonatomic) unsigned int destUidNext; // @synthesize destUidNext=_destUidNext;
@property(nonatomic) unsigned long long unreadCountDelta; // @synthesize unreadCountDelta=_unreadCountDelta;
@property(retain, nonatomic) NSMutableDictionary *addedDocumentIDsByOld; // @synthesize addedDocumentIDsByOld=_addedDocumentIDsByOld;
@property(retain, nonatomic) NSMutableArray *addedMessages; // @synthesize addedMessages=_addedMessages;
@property(retain, nonatomic) NSMutableArray *addedMessageIDs; // @synthesize addedMessageIDs=_addedMessageIDs;
@property(retain, nonatomic) NSMutableArray *missedMessages; // @synthesize missedMessages=_missedMessages;
@property(nonatomic) BOOL someMsgsWentToServer; // @synthesize someMsgsWentToServer;
@property(copy, nonatomic) NSArray *flagsToSet; // @synthesize flagsToSet=_flagsToSet;
@property(copy, nonatomic) NSArray *messages; // @synthesize messages=_messages;
- (id)description;
- (void)dealloc;

@end

@interface MFRemoteStore : MFLibraryStore
{
}

- (void)undeleteMessagesWithDetails:(id)arg1;
- (void)deleteMessagesOlderThanNumberOfDays:(long long)arg1 compact:(BOOL)arg2;
- (long long)_appendToServerWithContext:(id)arg1 error:(id *)arg2;
- (long long)_doAppend:(id)arg1 fromStore:(id)arg2 error:(id *)arg3;
- (long long)appendMessages:(id)arg1 unsuccessfulOnes:(id)arg2 newMessageIDs:(id)arg3 newMessages:(id)arg4 newDocumentIDsByOld:(id)arg5 flagsToSet:(id)arg6 forMove:(BOOL)arg7 error:(id *)arg8;
- (long long)updateMessagesLocally:(id)arg1 missedMessages:(id)arg2 newMessageIDs:(id)arg3;
- (id)messageWithLibraryID:(long long)arg1 options:(unsigned int)arg2;
- (void)compactMessages:(id)arg1;
- (id)messagesForMailbox:(id)arg1 olderThanNumberOfDays:(long long)arg2;
- (id)addMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(BOOL)arg3 isInitialImport:(BOOL)arg4 oldMessagesByNewMessage:(id)arg5 remoteIDs:(id)arg6 setFlags:(long long)arg7 clearFlags:(long long)arg8 messageFlagsForMessages:(id)arg9 copyFiles:(BOOL)arg10;
- (id)addMessages:(id)arg1 withMailbox:(id)arg2 fetchBodies:(BOOL)arg3 oldMessagesByNewMessage:(id)arg4;
- (void)enqueuedMessageChangesInExistingRequest;
- (void)didAddMessages;
- (void)willAddMessages;
- (id)_cachedHeaderDataForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (id)_cachedBodyDataForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (id)_cachedHeadersForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (id)_cachedBodyForMessage:(id)arg1 valueIfNotPresent:(id)arg2;
- (BOOL)_shouldUpdateColorsAndAttachmentsAfterOpening;
- (id)URLString;
- (void)forceResync;
- (id)account;

@end

@interface MFRemoteStoreAccount : MFMailAccount <MCRemoteStoreAccount>
{
    NSMutableArray *_mailboxesToSynchronize;
    BOOL _addedEAToAccountFolder;
}

+ (BOOL)cachePoliciesNeedUpdating;
@property BOOL addedEAToAccountFolder; // @synthesize addedEAToAccountFolder=_addedEAToAccountFolder;
- (void)presentOverQuotaAlert;
- (id)offlineCacheDirectory;
- (void)_checkForNewMessagesInStore:(id)arg1;
- (void)_synchronizeMailboxesSynchronously;
- (BOOL)_shouldSynchronizeMailbox:(id)arg1;
- (BOOL)_addMailboxesToSynchronize:(id)arg1;
- (void)_synchronizeMailboxes:(id)arg1;
- (void)didSynchronizeMailboxCachesAndFoundChanges:(BOOL)arg1;
- (BOOL)synchronizesDataWithServer;
- (BOOL)_synchronizeMailboxListHighPriority:(BOOL)arg1;
- (void)_synchronizeAccountWithServerHighPriority:(id)arg1;
- (void)resetNeedToSynchronizeMailboxCaches;
- (BOOL)needToSynchronizeMailboxCaches;
- (void)_startBackgroundSynchronizationHighPriority:(BOOL)arg1;
- (void)startBackgroundSynchronization;
- (void)considerSynchronizingNow;
- (BOOL)canBeSynchronized;
- (BOOL)_shouldCacheAggressively;
- (void)_writeMailboxCache;
- (BOOL)_canEmptyMessagesFromMailbox:(id)arg1;
- (void)_setSpecialMailbox:(id)arg1 forType:(int)arg2;
- (id)_specialMailboxWithType:(int)arg1 create:(BOOL)arg2 isLocal:(BOOL)arg3;
- (id)_specialMailboxWithType:(int)arg1 create:(BOOL)arg2;
- (id)_localMailboxRelativePathForType:(int)arg1 usingDisplayName:(id)arg2;
- (void)_renameLocalSpecialMailboxesToName:(id)arg1;
- (BOOL)_setStoreSpecialMailboxType:(int)arg1 onServer:(BOOL)arg2;
- (BOOL)_isMailboxTypeStoredLocally:(int)arg1;
@property BOOL storeTrashOnServer;
@property BOOL storeSentMessagesOnServer;
@property(readonly) BOOL storeJunkOnServerDefault;
@property BOOL storeJunkOnServer;
@property BOOL storeDraftsOnServer;
- (long long)_storedCachePolicy;
- (void)setCachePolicy:(long long)arg1 permanently:(BOOL)arg2;
- (long long)cachePolicy;
- (BOOL)canGoOffline;
- (void)fetchSynchronously;
- (id)_infoForMatchingURL:(id)arg1;
@property(copy) NSString *displayName;
- (void)dealloc;
- (id)initWithAccountInfo:(id)arg1;

// Remaining properties
@property(readonly) NSString *accountTypeString;
@property(readonly) NSString *appleAuthenticationToken;
@property(readonly) NSString *applePersonID;
@property BOOL configureDynamically;
@property(copy) NSString *externalHostname;
@property(readonly) NSString *googleClientToken;
@property(copy) NSString *hostname;
@property(copy) NSString *password;
@property long long portNumber;
@property(retain) MCAuthScheme *preferredAuthScheme;
@property(readonly) BOOL requiresAuthentication;
@property(readonly) NSString *saslProfileName;
@property long long securityLayerType;
@property(readonly) NSArray *standardPorts;
@property(readonly) NSArray *standardSSLPorts;
@property(readonly) NSURL *subscriptionURL;
@property(readonly) NSString *subscriptionURLLabel;
@property(copy) NSString *username;
@property BOOL usesSSL;

@end

@interface MFRemoteStoreSizeEngine : MFSizeEngine
{
    NSMutableDictionary *_usageByMailbox;
    NSMutableSet *_mailboxesToSize;
}

- (void)_handleMailboxSizeChanged:(id)arg1;
- (void)_refetchListing:(id)arg1;
- (BOOL)_shouldStartWorkerThread;
- (BOOL)_prepareToRefresh;
- (id)usageForMailbox:(id)arg1;
- (void)dealloc;
- (id)initWithAccount:(id)arg1;
- (void)_mailboxBecameInvalid:(id)arg1;
- (void)_mailboxSizeChanged:(id)arg1;
- (void)_sizeChangedForMailbox:(id)arg1;
- (BOOL)_changeUsageInfo:(CDStruct_1dee9796 *)arg1 forMailbox:(id)arg2 refetchQuotas:(BOOL)arg3;
- (void)_getSizeForMailbox:(id)arg1;

@end

@interface MFSeenMessage : NSManagedObject
{
}

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
- (void)setIsOnServer:(BOOL)arg1;
- (BOOL)isOnServer;
- (void)setShouldDeleteFromServer:(BOOL)arg1;
- (BOOL)shouldDeleteFromServer;
- (void)setMessageID:(id)arg1;
- (id)messageID;
- (void)setDateSeen:(id)arg1;
- (id)dateSeen;
- (void)setAccount:(id)arg1;

@end

@interface MFSeenMessagesManager : NSObject
{
    id _account;
    NSManagedObjectContext *_managedObjectContext;
}

@property(retain) NSManagedObjectContext *managedObjectContext; // @synthesize managedObjectContext=_managedObjectContext;
@property(retain) id account; // @synthesize account=_account;
- (void)_configureManagedObjectContext;
- (void)saveChanges;
- (void)removeMessagesNotOnServer:(id)arg1;
- (void)removeServerDeletedMessages;
- (id)messagesToBeDeletedFromServer;
- (id)seenMessages;
- (void)removeMessageIDs:(id)arg1;
- (id)addMessageID:(id)arg1 dateSeen:(id)arg2;
- (unsigned long long)countOfSeenMessages;
- (id)seenMessageForMessageID:(id)arg1;
- (id)_addAccountWithID:(id)arg1;
- (id)_accountForAccountID:(id)arg1;
- (void)dealloc;
- (id)initWithAccountID:(id)arg1 createAccount:(BOOL)arg2;

@end

@interface _MFSeenMessagesStore : NSObject
{
    NSPersistentStoreCoordinator *_coordinator;
    NSString *_storePath;
    NSEntityDescription *_accountEntity;
    NSEntityDescription *_seenMessageEntity;
}

+ (id)sharedInstance;
+ (id)allocWithZone:(struct _NSZone *)arg1;
@property(retain) NSEntityDescription *seenMessageEntity; // @synthesize seenMessageEntity=_seenMessageEntity;
@property(retain) NSEntityDescription *accountEntity; // @synthesize accountEntity=_accountEntity;
@property(retain) NSString *persistentStorePath; // @synthesize persistentStorePath=_storePath;
@property(readonly) NSPersistentStoreCoordinator *persistentStoreCoordinator; // @synthesize persistentStoreCoordinator=_coordinator;
- (id)_managedObjectModel;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface MFSizeEngine : NSObject <MCActivityTarget>
{
    MFMailAccount *_account;
    MCQuotaUsage *_totalUsage;
    MCActivityMonitor *_monitor;
    BOOL _isActive;
    long long _monitorAccessKey;
}

- (void)stop;
- (void)start;
- (void)cancel;
- (void)refresh;
- (id)totalUsage;
- (id)account;
- (void)dealloc;
- (id)init;
- (id)initWithAccount:(id)arg1;
- (void)_postChangeNotificationWithUserInfo:(id)arg1;
- (BOOL)_shouldStartWorkerThread;
- (BOOL)_prepareToRefresh;
- (void)_runWorkerThread;
- (void)_workerThreadFinished:(id)arg1;
- (void)_startWorkerThreadIfNeeded;

@end

@interface MFSmartMailboxUnreadCountManager : NSObject <MCActivityTarget>
{
    NSMutableArray *_smartMailboxes;
    NSMutableDictionary *_smartMailboxesOpenDates;
    BOOL _updateNeededAfterOpeningMailboxes;
    NSMutableDictionary *_unreadMessagesBySmartMailbox;
    NSMutableDictionary *_smartMailboxesUpdates;
    NSConditionLock *_watchedMessagesLock;
    NSMutableDictionary *_watchedMessages;
    NSMutableDictionary *_messagesNeedingToBeIndexed;
    NSConditionLock *_isUpdatingStateLock;
    NSConditionLock *_isDirtyStateLock;
    NSConditionLock *_obsoleteMessageKeysLock;
    NSMutableSet *_obsoleteMessageKeys;
    _MFNonContentSmartMailboxUnreadCountManager *_nonContentSmartMailboxUnreadCountManager;
    NSOperationQueue *_spotlightQueue;
    BOOL _suspendSmartMailboxUnreadCountCalculations;
    double _lastModificationToUpdate;
    long long _unreadQueryCount;
}

+ (id)sharedInstance;
+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (void)initialize;
@property long long unreadQueryCount; // @synthesize unreadQueryCount=_unreadQueryCount;
@property BOOL suspendSmartMailboxUnreadCountCalculations; // @synthesize suspendSmartMailboxUnreadCountCalculations=_suspendSmartMailboxUnreadCountCalculations;
@property double lastModificationToUpdate; // @synthesize lastModificationToUpdate=_lastModificationToUpdate;
- (void)_updateObsoleteMessageKeys;
- (void)_addObsoleteMessageKeys:(id)arg1;
- (id)_messageKeysWaitingToBeIndexes;
- (BOOL)_isMessageIndexed:(id)arg1;
- (void)_addMessagesWaitingToBeIndexed:(id)arg1;
- (void)_updateSmartMailboxUnreadCountsByRemovingMessagesWithKeys:(id)arg1;
- (void)_updateSmartMailboxUnreadCountsWithMessages:(id)arg1;
- (id)_filterMessages:(id)arg1 matchingCriterion:(id)arg2;
- (void)_updateUnreadCountsWithWatchedMessages;
- (void)_performUpdateNow;
- (void)_performDelayedUpdate:(id)arg1;
- (void)_watchMessages:(id)arg1 withUnreadState:(BOOL)arg2 onDate:(id)arg3;
- (unsigned long long)_uniqueCountOfMessages:(id)arg1;
- (void)_setUnreadMessages:(id)arg1 forSmartMailbox:(id)arg2 onDate:(id)arg3;
- (void)_searchedMailboxPreferencesChanged:(id)arg1;
- (void)_smartMailboxesDidSaveToDisk:(id)arg1;
- (void)_smartMailboxesWillSaveToDisk:(id)arg1;
- (void)_storeDidOpen:(id)arg1;
- (void)_storeWillOpen:(id)arg1;
- (void)_mailboxesDeleted:(id)arg1;
- (void)_messagesCompacted:(id)arg1;
- (void)_messageFlagsChanged:(id)arg1;
- (void)_messagesAdded:(id)arg1;
- (void)_stopObservingNotifications;
- (void)_startObservingNotifications;
- (BOOL)_isObservingSmartMailbox:(id)arg1;
- (void)_setSmartMailboxesWithSpotlightCriterion:(id)arg1;
- (id)_pathForMessage:(id)arg1;
- (void)_decomposeMessageKey:(id)arg1 intoRowID:(id *)arg2 messageIDHeader:(id *)arg3;
- (id)_keyForMessage:(id)arg1;
- (id)_keyForMailbox:(id)arg1;
- (void)_setIsDirty:(BOOL)arg1;
- (void)_setIsUpdating:(BOOL)arg1;
- (void)smartMailbox:(id)arg1 willReturnDictionaryRepresentation:(id)arg2;
- (void)smartMailbox:(id)arg1 didInitializeWithDictionaryRepresentation:(id)arg2;
- (void)setSmartMailboxes:(id)arg1;
- (void)updateMailboxesUnreadCountUsingSpotlight:(id)arg1 useTotalCount:(BOOL)arg2;
- (void)_libraryMessagesFlagsChanged:(id)arg1;
- (void)_updateSmartMailboxUnreadCountUsingSpotlight:(id)arg1 useTotalCount:(BOOL)arg2;
- (BOOL)_canCreateQuery;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface _MFNonContentSmartMailboxUnreadCountManager : NSObject
{
    NSOperationQueue *_workQueue;
    NSMutableDictionary *_unreadLibraryIDsByMessageIDHeaderByMailbox;
    double _lastDisplayUpdateTime;
    BOOL _isObserving;
    NSTimer *_relativeDateTimer;
}

- (void)_updateSmartMailbox:(id)arg1 withCompleteMessageList:(id)arg2 setDisplayCounts:(BOOL)arg3;
- (void)_smartMailboxLoaded:(id)arg1;
- (void)_refreshRelativeDateMailboxes:(id)arg1;
- (void)_messagesNeedRefresh:(id)arg1;
- (void)_messagesCompacted:(id)arg1;
- (void)_messagesChanged:(id)arg1;
- (void)_refreshForMailboxes:(id)arg1;
- (void)_setDisplayCounts;
- (void)_stopObservingNotifications;
- (void)_startObservingNotifications;
- (void)updateSmartMailboxes;
- (id)_messageIDHeaderKeyForMessage:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MFSMTPAccount : MFDeliveryAccount
{
    MFSMTPConnection *_connection;
    id _smtpAccountLock;
    NSTimer *_timer;
    long long _lastTimerSetTime;
}

+ (id)accountTypeString;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (void)releaseAllConnections;
- (void)_disconnect:(id)arg1;
- (void)_connectionExpired:(id)arg1;
- (void)_setTimer;
- (id)authSchemesForConnection:(id)arg1;
- (BOOL)canAuthenticateWithScheme:(id)arg1 connection:(id)arg2;
- (void)checkInConnection:(id)arg1;
- (BOOL)connectAndAuthenticate:(id)arg1;
- (id)authenticatedConnection;
- (id)newConnectedConnectionDiscoveringBestSettings:(BOOL)arg1 withConnectTimeout:(double)arg2 readWriteTimeout:(double)arg3;
- (id)googleClientToken;
- (void)setPreferredAuthScheme:(id)arg1;
- (id)preferredAuthScheme;
@property BOOL shouldTryDefaultPorts;
- (void)setConfigureDynamically:(BOOL)arg1;
- (BOOL)configureDynamically;
- (BOOL)_portNumberIsADefaultPortNumber;
- (void *)keychainProtocol;
- (id)saslProfileName;
- (long long)defaultPortNumber;
- (id)standardSSLPorts;
- (id)standardPorts;
- (Class)delivererClass;
- (void)dealloc;
- (id)initWithAccountInfo:(id)arg1;
- (id)objectSpecifier;

@end

@interface MFSMTPConnection : MCConnection
{
    double _originalSocketTimeout;
    double _lastCommandTimestamp;
    int _lastReplyCode;
    id _lastResponse;
    NSMutableArray *_serviceExtensions;
    NSMutableData *_mdata;
    NSString *_domainName;
    long long _greeting;
    _MFSMTPEnhancedStatusCode *_lastStatusCode;
}

@property(readonly, nonatomic) _MFSMTPEnhancedStatusCode *lastStatusCode; // @synthesize lastStatusCode=_lastStatusCode;
- (long long)sendDatas:(id)arg1;
- (long long)rcptTo:(id)arg1;
- (long long)mailFrom:(id)arg1;
- (unsigned long long)maximumMessageBytes;
- (BOOL)_hasParameter:(id)arg1 forKeyword:(id)arg2;
- (id)_domainName;
- (long long)_sendHELOWithClientDomainName:(id)arg1;
- (long long)_sendEHLOWithClientDomainName:(id)arg1;
- (long long)_doHandshakeTryHELOIfEHLOFails:(BOOL)arg1;
- (long long)noop;
- (void)quit;
- (void)_readResponseRange:(struct _NSRange *)arg1 isContinuation:(char *)arg2;
- (long long)_getReply;
- (long long)_sendDataDontLogBytesInRange:(struct _NSRange)arg1;
- (long long)_sendCommand:(const char *)arg1 length:(unsigned long long)arg2 argument:(id)arg3 dontLogArgumentRange:(struct _NSRange)arg4 trailer:(unsigned char)arg5;
- (double)timeLastCommandWasSent;
- (id)lastResponse;
- (long long)_state;
- (id)_makeInvalidCredentialsError;
- (id)_getErrorFromFailedAuthentication;
- (BOOL)_authenticateWithAuthenticator:(id)arg1;
- (BOOL)authenticate;
- (id)authenticationMechanisms;
- (BOOL)_completeConnectionWithResult:(BOOL)arg1;
- (BOOL)_startTLS;
- (BOOL)connectDiscoveringBestSettings:(BOOL)arg1;
- (void)_setupConnection;
@property MFSMTPAccount *account;
- (void)dealloc;
- (id)init;

@end

@interface _MFSMTPEnhancedStatusCode : NSObject
{
    int _classStatus;
    int _subject;
    int _detail;
}

@property(nonatomic) int detail; // @synthesize detail=_detail;
@property(nonatomic) int subject; // @synthesize subject=_subject;
@property(nonatomic) int classStatus; // @synthesize classStatus=_classStatus;
@property(readonly, nonatomic) long long interpretedStatusCode;
- (id)description;

@end

@interface MFSMTPDeliverer : MFMessageDeliverer
{
}

- (long long)deliverMessageHeaderData:(id)arg1 bodyData:(id)arg2 toRecipients:(id)arg3;

@end

@interface MFSnippetManager : NSObject
{
    MCInvocationQueue *_snippetQueue;
    NSMutableSet *_messagesNeedingSnippets;
    NSMutableSet *_watchList;
    MFQuoteParser *_quoteParser;
}

+ (id)sharedInstance;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (id)generateSnippetFromHTML:(id)arg1 stripQuoted:(BOOL)arg2;
- (void)_calculateSnippetForMessages;
- (id)snippetForMessage:(id)arg1;
- (void)snippetDataIsAvailableForMessage:(id)arg1;
- (void)_scheduleSnippetCalculationForMessages:(id)arg1;
- (void)scheduleSnippetCalculation;
- (id)fetchSnippetsForMessages:(id)arg1;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface MFSpecialMailbox : MFMailbox
{
}

+ (id)visibleFlagMailboxes;
+ (void)updateVisibleFlagMailboxes;
+ (id)flagMailboxes;
+ (id)VIPSendersMailbox;
+ (id)flagsMailbox;
+ (id)archiveMailbox;
+ (id)trashMailbox;
+ (id)outboxMailbox;
+ (id)junkMailbox;
+ (id)draftsMailbox;
+ (id)sentMessagesMailbox;
+ (id)inboxMailbox;
+ (id)specialMailboxForMailboxType:(int)arg1;
+ (id)specialMailboxWithIdentifier:(id)arg1;
+ (id)appleScriptNameForMailboxType:(int)arg1;
- (void)_updateDontIndexFlagFile;
- (void)saveUserInfo;
- (id)_loadUserInfo;
- (id)_viewerAttributesKey;
- (id)tildeAbbreviatedPath;
- (void)setAllCriteriaMustBeSatisfied:(BOOL)arg1;
- (BOOL)allCriteriaMustBeSatisfied;
- (void)setCriteria:(id)arg1;
- (id)criteria;
- (unsigned long long)displayCount;
- (long long)indexToInsertChildMailbox:(id)arg1;
- (unsigned long long)indexOfChild:(id)arg1;
- (id)sortedChildAtIndex:(unsigned long long)arg1 hidingGmail:(BOOL)arg2;
- (unsigned long long)numberOfSortedChildrenHidingGmail:(BOOL)arg1;
- (unsigned long long)numberOfVisibleChildrenHidingGmail:(BOOL)arg1;
- (unsigned long long)numberOfChildren;
- (id)visibleChildAtIndex:(unsigned long long)arg1;
- (id)childAtIndex:(unsigned long long)arg1;
- (id)mutableCopyOfChildrenIncludingHiddenChildren:(BOOL)arg1 hidingGmail:(BOOL)arg2;
- (id)childEnumeratorIncludingHiddenChildren:(BOOL)arg1;
- (id)children;
- (id)account;
- (id)name;
- (id)displayName;
- (id)criterion;
- (id)_initWithName:(id)arg1 type:(int)arg2 uuid:(id)arg3;
- (id)messages;
- (id)objectSpecifier;
- (id)appleScriptKey;

@end

@interface MFSpotlightManager : NSObject <MCActivityTarget>
{
    NSConditionLock *_attachmentIndexingLock;
    NSMutableSet *_messsagesScheduledForAttachmentIndexing;
    MCInvocationQueue *_indexQueue;
    NSMutableDictionary *_queryObserverDictionary;
}

+ (id)sharedInstance;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (id)acquireQueryObserver:(long long)arg1;
- (void)unregisterQueryObserver:(long long)arg1;
- (long long)registerQueryObserver:(id)arg1;
- (void)immediatelyIndexAttachmentsForMessage:(id)arg1;
- (void)immediatelyIndexAttachmentsForMessages:(id)arg1;
- (void)indexAttachmentsForMessage:(id)arg1;
- (void)indexAttachmentsForMessages:(id)arg1;
- (void)_indexAttachmentsForScheduledMessages;
- (void)_triggerNowAttachmentIndexing;
- (void)_triggerDelayedAttachmentIndexing;
- (void)_scheduleAttachmentIndexingForMessages:(id)arg1;
- (void)_synchronouslyIndexAttachmentsForMessages:(id)arg1;
- (void)_synchronouslyIndexAttachmentsForMessage:(id)arg1;
- (BOOL)_shouldIndexAttachmentsForMessage:(id)arg1;
- (void)setAttributeForFileAtPath:(id)arg1 name:(id)arg2 value:(id)arg3;
- (void)_setAttributeForFileAtPath:(id)arg1 name:(id)arg2 value:(id)arg3;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface MFSpotlightResultCollector : NSObject
{
    struct __MDQuery *_query;
    BOOL _queryIsCancelled;
    BOOL _async;
    BOOL _checkWhereFromsPaths;
    unsigned int _options;
    MFMessageCriterion *_criterion;
    NSString *_expression;
    id <MFMessageConsumer> _target;
    long long _nextIndexToProcess;
    double _queryStartTime;
    double _timeSpentInCallback;
    unsigned long long _totalResultsCount;
    double _firstCallbackTime;
    NSArray *_excludedMailboxURLs;
}

@property(retain, nonatomic) NSArray *excludedMailboxURLs; // @synthesize excludedMailboxURLs=_excludedMailboxURLs;
@property(nonatomic) BOOL checkWhereFromsPaths; // @synthesize checkWhereFromsPaths=_checkWhereFromsPaths;
@property(nonatomic) double firstCallbackTime; // @synthesize firstCallbackTime=_firstCallbackTime;
@property(nonatomic) unsigned long long totalResultsCount; // @synthesize totalResultsCount=_totalResultsCount;
@property(nonatomic) double timeSpentInCallback; // @synthesize timeSpentInCallback=_timeSpentInCallback;
@property(nonatomic) double queryStartTime; // @synthesize queryStartTime=_queryStartTime;
@property(nonatomic) BOOL async; // @synthesize async=_async;
@property(nonatomic) BOOL queryIsCancelled; // @synthesize queryIsCancelled=_queryIsCancelled;
@property(nonatomic) long long nextIndexToProcess; // @synthesize nextIndexToProcess=_nextIndexToProcess;
@property(nonatomic) unsigned int options; // @synthesize options=_options;
@property(retain, nonatomic) id <MFMessageConsumer> target; // @synthesize target=_target;
@property(retain, nonatomic) NSString *expression; // @synthesize expression=_expression;
@property(retain, nonatomic) MFMessageCriterion *criterion; // @synthesize criterion=_criterion;
- (void)dealloc;
- (struct __MDQuery *)query;
- (id)initWithCriterion:(id)arg1 target:(id)arg2 query:(struct __MDQuery *)arg3 expression:(id)arg4;
- (id)init;

@end

@interface MFStringUniquer : NSObject
{
    NSMapTable *_stringsTable;
}

- (void)dealloc;
- (id)description;
- (void)setUniquedString:(id)arg1 forIndex:(long long)arg2;
- (id)copyUniquedStringForIndex:(long long)arg1;
- (id)init;

@end

@interface MFSyncedFile : NSObject <NSFilePresenter>
{
    NSURL *_cloudURL;
    id _cloudURLLock;
    NSURL *_url;
    id _conflictResolver;
    unsigned long long _syncState;
}

+ (id)_metadataURL;
+ (id)_metadata;
+ (id)_currentiCloudAccount;
+ (void)stopPersistingSyncedFileForURL:(id)arg1;
+ (id)syncedFileForURL:(id)arg1 withConflictResolver:(id)arg2;
+ (void)initialize;
@property unsigned long long syncState; // @synthesize syncState=_syncState;
@property(copy) id conflictResolver; // @synthesize conflictResolver=_conflictResolver;
@property(readonly) NSURL *URL; // @synthesize URL=_url;
- (void)_handleIdentityChange:(id)arg1;
- (void)_resolveConflicts;
- (void)_setCloudURL;
@property(readonly) NSURL *cloudURL;
- (id)_ubiquitousFileName;
- (id)_ubiquitousFileURL;
- (BOOL)_fileExistsInCloud;
- (BOOL)_writeDataToCloud:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (BOOL)_syncWithCloudPostNotification:(BOOL)arg1 error:(id *)arg2;
- (BOOL)synchronouslyWritePlist:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (id)synchronouslyReadPlistWithOptions:(unsigned long long)arg1 error:(id *)arg2;
- (BOOL)_deleteFileLocallyPostingNotification:(BOOL)arg1 error:(id *)arg2;
- (void)deleteFile;
- (id)_readPlistWithOptions:(unsigned long long)arg1 error:(id *)arg2;
- (id)readPlistWithOptions:(unsigned long long)arg1;
- (void)writePlist:(id)arg1 options:(unsigned long long)arg2;
- (id)readDataWithOptions:(unsigned long long)arg1;
- (BOOL)_writeDataLocally:(id)arg1 options:(unsigned long long)arg2 setMetadata:(BOOL)arg3 postNotification:(BOOL)arg4 error:(id *)arg5;
- (BOOL)_writeDataAfterResolvingConflict:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (BOOL)_writeData:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (void)writeData:(id)arg1 options:(unsigned long long)arg2;
- (void)_clearMetadata;
- (BOOL)_signedInState;
- (void)_setiCloudAccount;
- (id)_iCloudAccount;
- (void)presentedItemDidResolveConflictVersion:(id)arg1;
- (void)presentedItemDidMoveToURL:(id)arg1;
- (void)presentedItemDidGainVersion:(id)arg1;
- (void)presentedItemDidChange;
- (void)accommodatePresentedItemDeletionWithCompletionHandler:(id)arg1;
@property(readonly) NSOperationQueue *presentedItemOperationQueue;
@property(readonly) NSURL *presentedItemURL;
- (void)dealloc;
- (id)init;
- (id)initWithURL:(id)arg1 withConflictResolver:(id)arg2;

// Remaining properties
@property(readonly) NSURL *primaryPresentedItemURL;

@end

@interface MFTableOfContents : NSObject
{
    BOOL _isValid;
    NSMutableArray *_messages;
    NSString *_path;
    NSData *_data;
    unsigned long long _pos;
    CDStruct_c4d47a41 _header;
    NSMutableDictionary *_messageIDMap;
    BOOL _isDirty;
}

- (void)sort;
- (BOOL)isSortedByDateReceived;
- (BOOL)isSortedAscending;
- (void)setSortOrder:(id)arg1 ascending:(BOOL)arg2;
- (id)sortOrder;
- (id)messageForMessageID:(id)arg1;
- (BOOL)flushToFile;
- (id)description;
- (void)addMessages:(id)arg1;
- (void)addMessage:(id)arg1;
- (void)_addMessageToMap:(id)arg1;
- (void)removeMessage:(id)arg1;
- (id)messages;
- (int)count;
- (void)rebuildCacheFromMessages:(id)arg1;
- (id)storePath;
- (void)forceValidityToYES;
- (BOOL)isValid;
- (BOOL)isDirty;
- (void)dealloc;
- (id)initWithPath:(id)arg1;
- (id)init;
- (void)setTimeStamp:(int)arg1;
- (id)appendCachedDataToData:(id)arg1;
- (void)appendHeader:(CDStruct_c4d47a41)arg1 toData:(id)arg2;
- (BOOL)loadCacheFromFileUsingUniqueStrings:(id)arg1 messageStore:(id)arg2;
- (BOOL)loadCacheFromFileUsingUniqueStrings:(id)arg1;
- (void)_checkHeader;

@end

@interface MFTOCMessage : MCMessage
{
    struct _NSRange _mboxRange;
    NSString *_attachments;
    NSString *_messageID;
    BOOL _isInIncomingMail;
}

+ (id)messageIDForSender:(id)arg1 subject:(id)arg2 dateAsTimeInterval:(double)arg3;
@property(nonatomic) BOOL isInIncomingMail; // @synthesize isInIncomingMail=_isInIncomingMail;
- (id)remoteID;
- (id)description;
- (unsigned long long)messageSize;
- (id)messageID;
- (id)attachment;
- (void)setDataSource:(id)arg1;
- (id)dataSource;
- (void)setMboxRange:(struct _NSRange)arg1;
- (struct _NSRange)mboxRange;
- (id)mailbox;
- (id)account;
- (id)cachedData;
- (unsigned long long)loadCachedInfoFromBytes:(const char *)arg1 length:(unsigned long long)arg2 isDirty:(char *)arg3 usingUniqueStrings:(id)arg4;
- (void)dealloc;
- (id)initWithMessage:(id)arg1;

@end

@interface MFUnreadCountQueryObserver : NSObject
{
    struct __MDQuery *_query;
    MFMailbox *_mailbox;
    NSMutableDictionary *_seenIDs;
    NSMutableDictionary *_messageIDsFromAttachments;
    BOOL _queryIsCancelled;
    BOOL _useTotalCount;
    BOOL _checkWhereFromsPaths;
    long long _nextIndexToProcess;
}

@property(nonatomic) BOOL checkWhereFromsPaths; // @synthesize checkWhereFromsPaths=_checkWhereFromsPaths;
@property BOOL useTotalCount; // @synthesize useTotalCount=_useTotalCount;
@property long long nextIndexToProcess; // @synthesize nextIndexToProcess=_nextIndexToProcess;
@property BOOL queryIsCancelled; // @synthesize queryIsCancelled=_queryIsCancelled;
@property(readonly, nonatomic) NSMutableDictionary *messageIDsFromAttachments;
@property(readonly, nonatomic) NSMutableDictionary *seenIDs;
- (void)clearMailbox;
- (id)mailbox;
- (struct __MDQuery *)query;
- (void)dealloc;
- (id)initWithMailbox:(id)arg1 query:(struct __MDQuery *)arg2 useTotalCount:(BOOL)arg3;

@end

@interface MFUsageCounter : NSObject
{
    NSMutableDictionary *_counts;
    NSCalendar *_gregorianCalendar;
    NSDate *_referenceDate;
    BOOL _isDirty;
}

+ (void)setGatherJunkMailUsageCounts:(BOOL)arg1;
+ (BOOL)gatherJunkMailUsageCounts;
+ (id)sharedInstance;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (void)incrementCountForKey:(id)arg1 byCount:(unsigned long long)arg2;
- (void)incrementCountForKey:(id)arg1;
- (void)removeCountForKey:(id)arg1;
- (unsigned long long)countForKey:(id)arg1 includeToday:(BOOL)arg2;
- (unsigned long long)countForKey:(id)arg1;
- (long long)numberOfDaysAvailableForKey:(id)arg1;
- (void)saveDefaults;
- (id)_dictionaryForKey:(id)arg1 createIfNeeded:(BOOL)arg2;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface MFVIPSendersController : NSObject
{
    NSMutableArray *_VIPSendersMailboxes;
    NSUbiquitousKeyValueStore *_store;
    NSOperationQueue *_operationQueue;
    NSSet *_VIPSendersAddresses;
}

+ (id)sharedInstance;
+ (id)allocWithZone:(struct _NSZone *)arg1;
@property(retain) NSSet *VIPSendersAddresses; // @synthesize VIPSendersAddresses=_VIPSendersAddresses;
@property(readonly) NSOperationQueue *operationQueue; // @synthesize operationQueue=_operationQueue;
@property(readonly) NSUbiquitousKeyValueStore *store; // @synthesize store=_store;
- (id)_keyForVIP:(id)arg1;
- (void)_mergeVIPs;
- (void)_updateLocalWithCloud:(id)arg1 refresh:(BOOL)arg2;
- (void)_storeChanged:(id)arg1;
- (void)_updateCloudWithLocal:(id)arg1;
- (void)_addressBookDidChange:(id)arg1;
- (id)addressesForVIPSenders;
- (BOOL)isVIPForPerson:(id)arg1 orAddress:(id)arg2;
- (void)removeVIPSenderWithAddress:(id)arg1;
- (void)removeVIPSenderWithMailboxes:(id)arg1;
- (void)addNewVIPSenderWithAddress:(id)arg1 name:(id)arg2;
- (id)VIPSendersMailboxes;
- (id)_vipsPlistPath;
- (void)_updateMailboxesAndPostNotificationsOnMainThread;
- (void)_readVIPSenders;
- (void)_saveVIPSendersAndUpdateMailboxes:(BOOL)arg1;
- (void)save;
- (id)_addressBookRecordsForFirstName:(id)arg1 lastName:(id)arg2 withAddressBook:(id)arg3;
- (id)_ABPersonForName:(id)arg1 withAddressBook:(id)arg2;
- (id)_ABPersonForName:(id)arg1 emailAddresses:(id)arg2 withAddressBook:(id)arg3;
- (id)_combineAddresses:(id)arg1 withAddresses:(id)arg2;
- (BOOL)_canCreateNewVIP;
- (id)_mailboxWithName:(id)arg1 addresses:(id)arg2 uuid:(id)arg3;
- (id)_addressesForMailboxCriteria:(id)arg1;
- (id)_mailboxCriteriaForAddresses:(id)arg1;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface MFWebMessageDocument : NSObject
{
    NSMutableDictionary *_attachmentsByURL;
    NSMutableDictionary *_backgroundImageAttachments;
    NSDictionary *_mimePartsByURL;
    NSMutableDictionary *_headerAttachmentsByURL;
    MCMimeBody *_mimeBody;
    MCMimePart *_htmlPart;
    MCParsedMessage *_parsedMessage;
    int _uniqueId;
    BOOL _shouldDownloadRemoteURLs;
    BOOL _containsRemoteContent;
    BOOL _messageIsFromMicrosoft;
    BOOL _collapseQuotedBlocks;
    NSURL *_baseURL;
}

+ (void)documentWillClose:(id)arg1;
+ (id)documentWithUniqueIdentifier:(unsigned long long)arg1;
+ (void)document:(id *)arg1 attachment:(id *)arg2 forURL:(id)arg3;
+ (void)document:(id *)arg1 attachmentController:(id *)arg2 mimePart:(id *)arg3 forURL:(id)arg4;
+ (void)document:(id *)arg1 attachmentController:(id *)arg2 forURL:(id)arg3;
+ (id)invalidBaseURL;
+ (id)openDocuments;
+ (void)initialize;
@property(retain) NSURL *baseURL; // @synthesize baseURL=_baseURL;
- (BOOL)collapseQuotedBlocks;
- (void)setCollapseQuotedBlocks:(BOOL)arg1;
- (BOOL)messageIsFromMicrosoft;
- (void)setMessageIsFromMicrosoft:(BOOL)arg1;
- (BOOL)containsRemoteContent;
- (void)setContainsRemoteContent:(BOOL)arg1;
- (BOOL)shouldDownloadRemoteURLs;
- (void)setShouldDownloadRemoteURLs:(BOOL)arg1;
- (id)parsedMessageFromRange:(id)arg1;
- (id)parsedMessage;
- (unsigned long long)uniqueIdentifier;
- (id)mimeBody;
- (void)clearAttachmentsByURL;
- (id)attachmentsByURL;
- (id)attachments;
- (BOOL)hasAttachments;
- (id)userAttachments;
- (BOOL)hasAttachmentViewController:(id)arg1;
- (void)removeAttachmentForURL:(id)arg1;
- (void)addAttachments:(id)arg1;
- (void)addAttachment:(id)arg1 forURL:(id)arg2;
- (void)addAttachment:(id)arg1 forURL:(id)arg2 inHeaderView:(BOOL)arg3;
- (id)attachmentForURL:(id)arg1;
- (id)attachmentForURL:(id)arg1 inHeaderView:(BOOL)arg2;
- (id)mimePartForURL:(id)arg1;
- (void)dealloc;
- (id)init;
- (id)initForDisplay:(BOOL)arg1;
- (id)initWithMimeBody:(id)arg1 forDisplay:(BOOL)arg2;

@end

@interface MCAttachment (ScriptingSupport) <MCActivityTarget>
- (id)objectSpecifier;
- (id)uniqueID;
- (id)appleScriptApproximateSize;
- (id)handleSaveAttachmentCommand:(id)arg1;
@end

@interface MCAttachment (ScriptingInternal)
- (void)_finishSaveAttachmentCommand:(id)arg1;
- (void)_fetchDataForCommand:(id)arg1;
@end

@interface MCMessage (ScriptingSupport) <MCActivityTarget>
- (id)valueInAppleScriptAttachmentsWithUniqueID:(id)arg1;
- (id)appleScriptAttachments;
- (id)appleScriptHeaders;
- (void)setBackgroundColor:(unsigned int)arg1;
- (unsigned int)backgroundColor;
- (unsigned int)actionColorMessage;
- (id)allHeaders;
- (id)rawSource;
- (id)messageIDHeader;
- (void)_performBackgroundSetContainer:(id)arg1 command:(id)arg2;
- (void)setContainer:(id)arg1;
- (id)container;
- (id)bccRecipients;
- (id)ccRecipients;
- (id)toRecipients;
- (id)recipients;
- (void)_addRecipientsForKey:(id)arg1 toArray:(id)arg2;
- (id)_performBackgroundGetContent;
- (id)content;
- (id)scriptedMessageSize;
- (id)replyTo;
- (void)setFlaggedStatus:(long long)arg1;
- (long long)flaggedStatus;
- (void)setIsFlagged:(BOOL)arg1;
- (BOOL)isFlagged;
- (void)setIsDeleted:(BOOL)arg1;
- (BOOL)isDeleted;
- (void)setIsJunk:(BOOL)arg1;
- (BOOL)isJunk;
- (void)setWasRedirected:(BOOL)arg1;
- (BOOL)wasRedirected;
- (void)setWasForwarded:(BOOL)arg1;
- (BOOL)wasForwarded;
- (void)setWasRepliedTo:(BOOL)arg1;
- (BOOL)wasRepliedTo;
- (void)setIsRead:(BOOL)arg1;
- (BOOL)isRead;
- (void)_setAppleScriptFlag:(id)arg1 state:(BOOL)arg2;
- (id)objectSpecifier;
@end

@interface MCMessageBody (MFAttachmentViewController)
- (id)attachmentViewControllers;
@end

@interface MCMessage (MFBackupAdditions)
- (id)backupID;
@end

@interface NSPersistentStoreCoordinator (MailAdditions)
- (id)_addSQLPersistentStoreFromPath:(id)arg1 URL:(id)arg2 type:(long long)arg3 recoveringFromError:(id)arg4;
- (id)addSQLPersistentStoreFromPath:(id)arg1 type:(long long)arg2 error:(id *)arg3;
@end

@interface NSUserDefaults (MailAdditions)
- (void)_mf_setObject:(id)arg1 forKey:(id)arg2 version:(unsigned long long)arg3;
- (id)_mf_objectForKey:(id)arg1 version:(unsigned long long)arg2;
- (void)setDisplayName:(id)arg1 forFlagColor:(BOOL)arg2;
- (id)displayNameForFlagColor:(BOOL)arg1;
@property BOOL autosaveWindows;
@property(readonly) double autoSaveStoreDelay;
@property(readonly) double autoSaveDelay;
@property BOOL junkMailEvaluationAfterRules;
@property long long junkMailBehavior;
@property BOOL junkMailTrustHeaders;
@property(readonly) NSString *autoDownloadDirectoryPath;
@property(retain) NSURL *downloadDirectoryURL;
@end

@interface EWSPathToExtendedFieldType (MessageAdditions)
+ (id)newExtendedFieldTypeForPropertyId:(long long)arg1;
+ (id)newExtendedFieldTypeForPropertyTag:(id)arg1;
+ (id)_newExtendedFieldTypeForPropertyTag:(id)arg1 propertyType:(int)arg2;
@end

@interface NSDictionary (MailFoundationAdditions)
- (id)objectForIntegerKey:(long long)arg1;
- (struct CGSize)sizeForKey:(id)arg1;
- (double)cgfloatForKey:(id)arg1;
- (float)floatForKey:(id)arg1;
- (long long)integerForKey:(id)arg1;
- (BOOL)boolForKey:(id)arg1;
@end

@interface NSKeyedUnarchiver (MailFoundationAdditions)
+ (id)safeUnarchiveObjectWithData:(id)arg1;
@end

@interface NSMutableDictionary (MailFoundationAdditions)
- (void)removeObjectForIntegerKey:(long long)arg1;
- (void)setObject:(id)arg1 forIntegerKey:(long long)arg2;
- (void)setSize:(struct CGSize)arg1 forKey:(id)arg2;
- (void)setCGFloat:(double)arg1 forKey:(id)arg2;
- (void)setFloat:(float)arg1 forKey:(id)arg2;
- (void)setInteger:(long long)arg1 forKey:(id)arg2;
- (void)setBool:(BOOL)arg1 forKey:(id)arg2;
@end

@interface NSURL (MailFoundationAdditions)
- (id)URLByRemovingFragment;
- (BOOL)isReallyCaseSensitivelyEqual:(id)arg1;
- (id)completePath;
@end

@interface NSPortMessage (MailFoundationAdditions)
- (void)safeSendBeforeDate:(id)arg1;
- (void)safeSendNow;
@end

@interface DOMDocument (JunkAdditions)
- (id)junkStringNonWhiteSpaceCount:(long long *)arg1 URLs:(id)arg2 imageURLs:(id)arg3;
@end

@interface NSString (MFLibraryID)
+ (id)stringWithLibraryID:(long long)arg1;
- (id)initWithLibraryID:(long long)arg1;
@end

@interface NSObject (_mf_LibraryMessageEquality)
- (long long)_mf_LibraryMessageLibraryID;
@end

@interface MCMessage (MCMailAccountAdapter)
- (id)mailAccount;
@end

@interface MCMessage (MCMailboxAdapter)
- (id)mailMailbox;
@end

@interface IMAPMailbox (MCMailboxAdapter)
- (id)mailMailbox;
@end

@interface NSObject (MainThreadMessaging)
+ (void)mf_performBlockOnMainThread:(id)arg1 waitUntilDone:(void)arg2;
+ (void)_mf_mainThreadPerform:(id)arg1;
@end

@interface NSNotificationCenter (MainThreadPosting)
- (void)postNotificationInMainThread:(id)arg1;
@end

@interface MCMessage (Threads)
@property(readonly) NSIndexSet *appliedFlagColors;
@property(readonly) int conversationPosition;
@property(readonly) long long conversationID;
@end

@interface NSAppleScript (MessageRuleAdditions)
+ (id)appleScriptLock;
+ (id)appleEventDescriptionWithEventClass:(unsigned int)arg1 eventID:(unsigned int)arg2 andArguments:(id)arg3;
+ (id)appleEventDescriptionWithName:(id)arg1 andArguments:(id)arg2;
+ (id)_newScriptAtPath:(id)arg1 errorInfo:(id *)arg2;
@end

@interface NSAppleEventDescriptor (MessageRuleAdditions)
- (BOOL)isSendToSelfEvent;
@end

@interface NSArray (AppleScriptConveniences)
- (id)arrayByEvaluatingObjectSpecifiers;
@end

@interface NSDictionary (MailAdditions)
- (id)mutableSomewhatDeepCopy;
@end

@interface NSFileManager (MailAdditions)
- (id)mf_subpathsOfDirectoryAtPath:(id)arg1;
- (id)uniquePathInDirectory:(id)arg1 withName:(id)arg2 extension:(id)arg3;
- (id)pathByUniquingPath:(id)arg1;
- (id)localizedFullPath:(id)arg1;
- (id)pathByResolvingAliasesInPath:(id)arg1;
- (void)deleteFilesInSortedArray:(id)arg1 matchingPrefix:(id)arg2 fromDirectory:(id)arg3;
- (id)pathsAtDirectory:(id)arg1 beginningWithString:(id)arg2;
- (BOOL)canWriteToFileAtPath:(id)arg1;
- (BOOL)canWriteToDirectoryAtPath:(id)arg1;
@end

@interface NSFileWrapper (HFSExtensions)
+ (void)loadMessageExtensions;
- (BOOL)_Message_updateFromPath:(id)arg1 checkOnly:(BOOL)arg2 exists:(char *)arg3;
- (void)_Message_setPreferredFilename:(id)arg1;
- (id)_Message_initWithURL:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (BOOL)_Message_writeToURL:(id)arg1 options:(unsigned long long)arg2 originalContentsURL:(id)arg3 error:(id *)arg4;
@property(retain) NSString *savedPath;
- (id)remoteAccessMimeType;
@property BOOL shouldBeViewedInline;
- (BOOL)couldConfuseWindowsClients;
@end

@interface NSFileWrapper (UniquePaths)
+ (id)uniquedPathForFile:(id)arg1 inDirectory:(id)arg2;
@end

@interface NSSound (MailAdditions)
+ (id)soundsAtPaths:(id)arg1;
+ (id)appendSoundsToPaths:(id)arg1;
+ (id)containerLibrarySoundsDirs;
+ (id)tildeLibrarySoundsDirs;
+ (id)networkLibrarySoundsDirs;
+ (id)librarySoundsDirs;
+ (id)systemLibrarySoundsDirs;
+ (id)validPathToSound:(id)arg1;
+ (void)addSoundPathToPlayList:(id)arg1 playImmediately:(BOOL)arg2;
+ (void)addSoundToPlayList:(id)arg1 playImmediately:(BOOL)arg2;
+ (void)_addSoundOrPathToPlayList:(id)arg1 playImmediately:(BOOL)arg2;
+ (void)_setupPlayList;
+ (void)sound:(id)arg1 didFinishPlaying:(BOOL)arg2;
+ (void)_playSound;
+ (void)_playNextSound;
- (BOOL)_playAsMailSound;
@end

@interface NSString (MailFrameworkAdditions)
+ (id)stringWithAttachmentCharacter;
+ (id)stringWithData:(id)arg1 encoding:(unsigned long long)arg2;
- (BOOL)isEqualExceptForFinalSlash:(id)arg1;
- (id)percentEscapedURLString;
- (id)validURLString;
- (BOOL)hasPrefixIgnoreCaseAndDiacritics:(id)arg1;
- (id)secondToLastPathComponent;
- (id)firstLine;
- (id)uniqueFilenameWithRespectToFilenames:(id)arg1;
- (id)encodedMessageIDString;
- (long long)compareAsInts:(id)arg1;
- (id)foldedStringForSuggestionsOriginatedExactMatchSearches;
- (id)fileSystemString;
- (void)mf_effectiveSubject:(id *)arg1 prefix:(id *)arg2;
- (BOOL)containsOnlyBreakingWhitespace;
- (BOOL)containsOnlyWhitespace;
- (id)stringByReplacingSpecialSlashesWith:(id)arg1;
- (id)stringByReplacingSpecialSlashesWithSlashes;
- (id)stringByReplacingSlashesWithSpecialSlashes;
- (id)specialSlash;
- (id)stringByRemovingLineEndingsForHTML;
- (id)stringByChangingBodyTagToDiv;
- (id)stringByReplacingCharactersInSet:(id)arg1 withCharacter:(unsigned short)arg2;
- (id)smartCapitalizedString;
- (unsigned long long)hexLongLongValue;
- (unsigned int)hexIntValue;
@end

@interface MCMessage (ParentalControl)
- (void)setPermissionRequestState:(long long)arg1;
- (BOOL)isChildRequestMessage;
- (BOOL)isChildRequestMessage:(id)arg1 requestIsForSenders:(char *)arg2 childAddress:(id *)arg3 permissionRequestState:(long long *)arg4;
- (BOOL)isParentResponseMessage:(char *)arg1 isRejected:(char *)arg2 requestedAddresses:(id)arg3 requestIsForSenders:(char *)arg4;
@end

@interface NSString (MailPathUtils)
+ (void)resetBetterStringByResolvingSymlinksInPath;
+ (id)pathWithDirectory:(id)arg1 filename:(id)arg2 extension:(id)arg3;
- (id)betterStringByResolvingSymlinksInPath;
- (id)stringByReallyAbbreviatingWithTildeInPath;
- (BOOL)isSubdirectoryOfPath:(id)arg1;
- (BOOL)deletePath;
- (id)uniquePathWithMaximumLength:(unsigned long long)arg1;
@end

@interface NSError (MFPOPConnectionAdditions)
- (long long)MFPOPResponseCode;
@end

@interface MCMimePart (SpotlightSupport)
- (BOOL)writeAttachmentToSpotlightCacheIfNeededUnder:(id)arg1;
@end

@interface NSDate (toc_extension)
- (int)tocSillyDateInt;
@end

@interface WebArchive (Conversion)
- (id)attributedString;
@end


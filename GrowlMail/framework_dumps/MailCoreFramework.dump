/*
 *     Generated by class-dump 3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.
 */

#import "MailFramework.dump"

#pragma mark Named Structures

struct MCMimeEnrichedState {
    unsigned int excerptLevel:8;
    unsigned int alignment:4;
    unsigned int bold:1;
    unsigned int italic:1;
    unsigned int fixed:1;
    unsigned int underline:1;
    unsigned int fontDelta:16;
    NSString *fontFamily;
    NSColor *color;
};

struct _MCMimeEnrichedWriterCommandStackEntry {
    id _field1;
    unsigned long long _field2;
    id _field3;
    struct _MCMimeEnrichedWriterCommandStackEntry *_field4;
};

struct __va_list_tag {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
    void *_field4;
};

struct sasl_callback {
    unsigned long long _field1;
    void *_field2;
    void *_field3;
};

struct sasl_secret {
    unsigned long long _field1;
    unsigned char _field2[1];
};

#pragma mark Typedef'd Structures

typedef struct {
    id _field1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :2;
} CDStruct_3441fd00;

typedef struct {
    unsigned int colorHasBeenEvaluated:1;
    unsigned int colorWasSetManually:1;
    unsigned int redColor:8;
    unsigned int greenColor:8;
    unsigned int blueColor:8;
    unsigned int loadingBody:1;
    unsigned int firstUnused:2;
    unsigned int isMarkedForOverwrite:1;
    unsigned int unused:2;
} CDStruct_accefccd;

typedef struct {
    unsigned int reserved:27;
    unsigned int isPartial:1;
    unsigned int partsHaveBeenCached:1;
    unsigned int hasTemporaryUid:1;
    unsigned int isHTML:1;
    unsigned int isRich:1;
} CDStruct_07ba05d6;

typedef struct {
    long long count;
    unsigned long long size;
} CDStruct_d3e19d9e;

typedef struct {
    unsigned short buffer[64];
    struct __CFString *theString;
    unsigned short *directUniCharBuffer;
    char *directCStringBuffer;
    struct {
        long long location;
        long long length;
    } rangeToBuffer;
    long long bufferedRangeStart;
    long long bufferedRangeEnd;
} CDStruct_2ada2998;

#pragma mark -

/*
 * File: /System/Library/PrivateFrameworks/MailCore.framework/Versions/A/MailCore
 * UUID: 92EBCB0A-9974-3C6D-8466-F151E46C4472
 * Arch: x86_64
 *       Current version: 1812.0.0, Compatibility version: 1.0.0
 *       Source version: 1812.0.0.0.0
 *       Minimum Mac OS X version: 10.9.0
 *       SDK version: 10.9.0
 *
 *       Objective-C Garbage Collection: Unsupported
 */

@protocol EWSAutodiscoverBindingDelegate <NSObject>
- (void)autodiscoverBinding:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (void)autodiscoverBinding:(id)arg1 didCancelAuthenticationChallenge:(id)arg2;

@optional
- (void)autodiscoverBinding:(id)arg1 didReceiveCertificateError:(id)arg2;
- (void)autodiscoverBinding:(id)arg1 didFailWithError:(id)arg2;
- (void)autodiscoverBinding:(id)arg1 didFinishWithResponse:(id)arg2;
@end

@protocol IADataPluginDelegate <NSObject>
- (BOOL)plugin:(id)arg1 handleCertificateError:(id)arg2;
- (void)plugin:(id)arg1 didChangeAccountUID:(id)arg2;
- (void)plugin:(id)arg1 didDeleteAccountUID:(id)arg2;
- (void)plugin:(id)arg1 didCreateAccountUID:(id)arg2;
- (void)plugin:(id)arg1 accountSetupDidFinish:(id)arg2 withResult:(id)arg3;
- (void)plugin:(id)arg1 accountSetupDidFail:(id)arg2 withError:(id)arg3;
- (void)plugin:(id)arg1 accountSetupUpdate:(id)arg2 withStatus:(long long)arg3;

@optional
- (void)plugin:(id)arg1 aosAccountMigrationFinished:(id)arg2;
@end

@protocol MCAccountSetupValidatorDelegate
- (id)delegateApplicationName;
- (BOOL)validatorShouldPromptForInsecurePassword:(id)arg1;
- (void)validatorDidFinish:(id)arg1;
- (void)validatorDidFail:(id)arg1;
- (void)validator:(id)arg1 didChangeState:(long long)arg2;
@end

@protocol MCActivityTarget <NSObject>

@optional
- (BOOL)isSmartMailbox;
- (id)displayName;
@end

@protocol MCMessageDataSource <MCActivityTarget, NSCopying>
@property(readonly) BOOL isReadOnly;
- (id)uniquedString:(id)arg1;
- (void)flushAllCaches;
- (void)invalidateMessage:(id)arg1;
- (void)sendResponseType:(BOOL)arg1 forMeetingMessage:(id)arg2;
- (id)routeMessages:(id)arg1;
- (void)doCompact;
- (BOOL)canCompact;
- (id)undeleteMessages:(id)arg1 movedToStore:(id)arg2 newMessageIDs:(id)arg3;
- (void)undeleteMessages:(id)arg1;
- (void)deleteMessages:(id)arg1 moveToTrash:(BOOL)arg2;
- (void)saveSnippetsForMessages:(id)arg1;
- (id)snippetsForMessages:(id)arg1;
- (BOOL)supportsSnippets;
- (void)setNumberOfAttachments:(unsigned int)arg1 isSigned:(BOOL)arg2 isEncrypted:(BOOL)arg3 forMessage:(id)arg4;
- (id)attachmentsDirectoryForMessage:(id)arg1;
- (void)setColor:(id)arg1 highlightTextOnly:(BOOL)arg2 forMessages:(id)arg3;
- (id)async_setJunkMailLevel:(long long)arg1 forMessages:(id)arg2 trainJunkMailDatabase:(BOOL)arg3 userRecorded:(BOOL)arg4;
- (id)async_setJunkMailLevel:(long long)arg1 forMessages:(id)arg2 trainJunkMailDatabase:(BOOL)arg3;
- (id)async_setJunkMailLevel:(long long)arg1 forMessages:(id)arg2;
- (void)messageFlagsDidChange:(id)arg1 flags:(id)arg2;
- (id)async_setFlagWithKey:(id)arg1 state:(BOOL)arg2 forMessages:(id)arg3;
- (id)async_setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)dataForMimePart:(id)arg1;
- (BOOL)hasCachedDataForMimePart:(id)arg1;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2;
- (id)fullBodyDataForMessage:(id)arg1;
- (id)bodyDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 allowPartial:(BOOL)arg3;
- (id)bodyForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 updateFlags:(BOOL)arg3 allowPartial:(BOOL)arg4;
- (id)bodyForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 updateFlags:(BOOL)arg3;
- (id)bodyForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)headerDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 allowPartial:(BOOL)arg3;
- (id)headerDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)headerDataForMessage:(id)arg1;
- (id)headersForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)headersForMessage:(id)arg1;
- (id)messageForMessageID:(id)arg1;
- (id)mailbox;
- (id)account;

@optional
- (id)async_setGmailLabelsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)async_deleteMessages:(id)arg1 moveToTrash:(BOOL)arg2;
@end

@protocol MCMessageSortingInterface <NSObject>
- (unsigned int)uidForSort;
- (id)mailbox;
- (double)dateSentAsTimeIntervalSince1970;
- (double)dateReceivedAsTimeIntervalSince1970;
- (id)to;
- (id)subjectAndPrefixLength:(unsigned long long *)arg1;
- (id)subject;
- (unsigned long long)numberOfAttachments;
- (unsigned long long)messageSize;
- (id)senderDisplayName;
- (unsigned int)messageFlags;
- (double)dateLastViewedAsTimeIntervalSince1970;
- (int)colorForSort;
@end

@protocol MCPersistentIDFetching <NSObject>
+ (id)fetchedMessageWithRowID:(long long)arg1;
- (long long)libraryID;
@end

@interface MCAccountAutoconfigurator : NSObject <MCActivityTarget>
{
    long long _state;
    NSString *_userName;
    BOOL _authenticationFailed;
    BOOL _shouldDoEWSAutodiscovery;
    id <MCAccountAutoconfiguratorDelegate> _delegate;
    MCActivityMonitor *_autoconfigurationActivity;
    NSString *_emailAddress;
    NSString *_password;
    NSString *_domain;
    NSDictionary *_receivingAccountInfo;
    NSArray *_deliveryAccountInfos;
    NSError *_authenticationError;
}

+ (id)userNameForEmailAddress:(id)arg1 autoconfiguratorAccountInfo:(id)arg2;
+ (id)serverNameFromAutoconfiguratorAccountInfo:(id)arg1;
+ (id)urlFromAutoconfiguratorObject:(id)arg1;
@property BOOL shouldDoEWSAutodiscovery; // @synthesize shouldDoEWSAutodiscovery=_shouldDoEWSAutodiscovery;
@property(copy) NSError *authenticationError; // @synthesize authenticationError=_authenticationError;
@property(copy) NSArray *deliveryAccountInfos; // @synthesize deliveryAccountInfos=_deliveryAccountInfos;
@property(copy) NSDictionary *receivingAccountInfo; // @synthesize receivingAccountInfo=_receivingAccountInfo;
@property BOOL authenticationFailed; // @synthesize authenticationFailed=_authenticationFailed;
@property(copy, nonatomic) NSString *domain; // @synthesize domain=_domain;
@property(copy, nonatomic) NSString *password; // @synthesize password=_password;
@property(copy, nonatomic) NSString *emailAddress; // @synthesize emailAddress=_emailAddress;
@property(retain) MCActivityMonitor *autoconfigurationActivity; // @synthesize autoconfigurationActivity=_autoconfigurationActivity;
@property id <MCAccountAutoconfiguratorDelegate> delegate; // @synthesize delegate=_delegate;
- (void)_autoconfigure;
- (BOOL)_shouldCancel;
- (void)_setState:(long long)arg1;
- (void)_sendAutoconfiguratorDidFinish;
- (void)_sendAutoconfiguratorDidFail;
- (void)_sendAutoconfiguratorDidChangeState:(id)arg1;
@property(copy, nonatomic) NSString *userName;
- (void)cancel;
- (void)execute;
- (void)dealloc;
- (id)initWithEmailAddress:(id)arg1 userName:(id)arg2 password:(id)arg3 delegate:(id)arg4;
- (id)init;

@end

@interface MCAccountSetupValidator : NSObject <MCActivityTarget>
{
    MCConnection *_connection;
    id <MCAccount> _account;
    MCActivityMonitor *_validationActivity;
    MCAuthScheme *_preferredAuthScheme;
    id <MCAccountSetupValidatorDelegate> _delegate;
    NSString *_password;
}

+ (id)validatorWithAccount:(id)arg1 accountInfo:(id)arg2 delegate:(id)arg3;
@property(copy) NSString *password; // @synthesize password=_password;
@property id <MCAccountSetupValidatorDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain) MCAuthScheme *preferredAuthScheme; // @synthesize preferredAuthScheme=_preferredAuthScheme;
@property(retain) MCActivityMonitor *validationActivity; // @synthesize validationActivity=_validationActivity;
@property(retain) id <MCAccount> account; // @synthesize account=_account;
- (void)_validate;
- (BOOL)_attemptAuthentication;
- (BOOL)_attemptInitialConnection;
- (void)_disconnect;
- (BOOL)_connectIfNeeded;
- (void)_updateState:(long long)arg1;
- (void)_sendValidatorDidFinish;
- (void)_sendValidatorDidFail;
- (void)_sendValidatorDidChangeState:(id)arg1;
- (void)cancel;
@property(retain) MCConnection *connection;
- (id)description;
- (void)dealloc;
- (id)init;
- (id)_initWithAccount:(id)arg1 accountInfo:(id)arg2 delegate:(id)arg3;

@end

@interface _MCActivityAggregateArrayController : NSArrayController
{
}

- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;

@end

@interface MCActivityAggregate : NSObject
{
    NSArrayController *_monitorController;
    unsigned long long _baseItemsDone;
    unsigned long long _baseItemsTotal;
    double _baseUnifiedDone;
    BOOL _isResetting;
    double _startTime;
    BOOL _canCancel;
    BOOL _isProgressing;
    long long _activityType;
    NSString *_bkItemDescription;
    double _estimatedTimeRemaining;
    unsigned long long _itemsDone;
    unsigned long long _itemsTotal;
    NSDate *_lastUpdateTimestamp;
    NSString *_nameSingular;
    NSString *_namePlural;
    double _progress;
    NSString *_status;
    double _unifiedDone;
}

+ (id)keyPathsForValuesAffectingIsProgressIndeterminate;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
@property(readonly) double unifiedDone; // @synthesize unifiedDone=_unifiedDone;
@property(copy) NSString *status; // @synthesize status=_status;
@property(readonly) double progress; // @synthesize progress=_progress;
@property(copy) NSString *namePlural; // @synthesize namePlural=_namePlural;
@property(copy) NSString *nameSingular; // @synthesize nameSingular=_nameSingular;
@property(retain) NSDate *lastUpdateTimestamp; // @synthesize lastUpdateTimestamp=_lastUpdateTimestamp;
@property(readonly) unsigned long long itemsTotal; // @synthesize itemsTotal=_itemsTotal;
@property(readonly) unsigned long long itemsDone; // @synthesize itemsDone=_itemsDone;
@property(readonly) BOOL isProgressing; // @synthesize isProgressing=_isProgressing;
@property(readonly) double estimatedTimeRemaining; // @synthesize estimatedTimeRemaining=_estimatedTimeRemaining;
@property(readonly) BOOL canCancel; // @synthesize canCancel=_canCancel;
@property(copy) NSString *bkItemDescription; // @synthesize bkItemDescription=_bkItemDescription;
@property long long activityType; // @synthesize activityType=_activityType;
- (void)signalCancel:(id)arg1;
- (id)description;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_processMonitorUpdate;
- (void)_update;
- (void)_updateTimeBasedValues;
- (void)updateUnitBasedValues;
- (void)_updateAggregateValues;
- (void)_updateAggregateIsProgressing;
- (void)removeActivityMonitor:(id)arg1;
- (void)addActivityMonitor:(id)arg1;
- (void)reset;
- (void)_updateStatus;
@property(readonly) BOOL isProgressIndeterminate;
- (void)setEstimatedTimeRemaining:(double)arg1;
- (void)setProgress:(double)arg1;
- (void)setIsProgressing:(BOOL)arg1;
- (void)setCanCancel:(BOOL)arg1;
- (void)setUnifiedDone:(double)arg1;
- (void)setItemsTotal:(unsigned long long)arg1;
- (void)setItemsDone:(unsigned long long)arg1;
- (unsigned long long)currentItem;
@property(readonly) NSArrayController *monitorController;
- (void)dealloc;
- (id)init;

@end

@interface MCActivityAggregator : NSObject
{
    MCActivityAggregate *_in;
    MCActivityAggregate *_out;
    MCActivityAggregate *_save;
}

+ (id)sharedInstance;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (void)activityMonitor:(id)arg1 didChangeTypeFrom:(long long)arg2;
- (id)save;
- (id)out;
- (id)in;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface MCActivityMonitor : NSObject <NSMachPortDelegate>
{
    NSString *_taskName;
    NSString *_statusMessage;
    NSString *_descriptionString;
    NSMutableSet *_subMonitors;
    NSMachPort *_cancelPort;
    MCSafeValueCache *_targetDisplayNameCache;
    id _delegate;
    id <MCActivityTarget> _target;
    double _doneValue;
    double _previousDoneness;
    double _itemValue;
    double _itemMaxValue;
    double _startTime;
    double _itemLastNotifiedTime;
    double _percentDone;
    long long _shouldUnifyDoneness;
    long long _currentProgressStage;
    long long _numberOfProgressStages;
    long long _key;
    unsigned long long _itemsDone;
    unsigned long long _itemsTotal;
    unsigned long long _itemFudgeFactor;
    int _changeCount;
    long long _activityType;
    unsigned char _priority;
    BOOL _canCancel;
    BOOL _shouldCancel;
    BOOL _isActive;
    BOOL _isProgressing;
    BOOL _shouldPromptUserOnTermination;
    NSInvocation *_cancelInvocation;
    NSString *_itemDescription;
    double _itemMinValue;
    MCError *_error;
}

+ (id)currentMonitor;
+ (id)currentMonitorIfExists;
+ (void)setCurrentMonitor:(id)arg1;
+ (double)determinateProgress;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
@property(retain) MCError *error; // @synthesize error=_error;
@property(nonatomic) double itemMinValue; // @synthesize itemMinValue=_itemMinValue;
@property(copy) NSString *itemDescription; // @synthesize itemDescription=_itemDescription;
@property(retain) NSInvocation *cancelInvocation; // @synthesize cancelInvocation=_cancelInvocation;
- (void)setShouldPromptUserOnTermination;
- (BOOL)shouldPromptUserOnTermination;
- (void)resetActivityType;
- (void)markCompleted:(BOOL)arg1;
- (void)incrementItemsTotal:(unsigned long long)arg1;
- (void)incrementItemsDone:(unsigned long long)arg1;
- (void)incrementItemValue:(double)arg1;
@property(nonatomic) unsigned long long itemsTotal;
@property(nonatomic) unsigned long long itemsDone;
@property(nonatomic) double itemValue;
- (void)resetItemValue;
- (void)setItem:(id)arg1;
- (void)setItemIndeterminateValue;
@property(nonatomic) double itemMaxValue;
@property(nonatomic) BOOL isProgressing;
- (void)setItemFudgeFactor:(unsigned long long)arg1;
- (void)setActivityType:(long long)arg1;
- (long long)activityType;
@property(nonatomic) double doneValue;
- (void)updateDoneValue;
- (id)cancelPort;
- (void)_setCancelPort:(id)arg1;
- (void)setPercentDone:(double)arg1 withKey:(long long)arg2;
- (void)setStatusMessage:(id)arg1 withKey:(long long)arg2;
- (void)setStatusMessage:(id)arg1 percentDone:(double)arg2 withKey:(long long)arg3;
- (void)relinquishExclusiveAccessKey:(long long)arg1;
- (long long)acquireExclusiveAccessKey;
- (void)cancel;
- (void)removeSubMonitor:(id)arg1;
- (void)addSubMonitor:(id)arg1;
@property(nonatomic) BOOL shouldCancel;
@property(nonatomic) BOOL canBeCancelled;
- (id)activityTargets;
- (void)setPrimaryTarget:(id)arg1;
- (void)removeActivityTarget:(id)arg1;
- (void)addActivityTarget:(id)arg1;
- (void)setActivityTarget:(id)arg1;
- (id)activityTarget;
- (void)setTaskName:(id)arg1;
- (id)taskName;
- (id)description;
- (id)taskDescriptionString;
- (id)_updatedTargetDisplayName:(id)arg1;
- (id)activityDescription;
- (void)setPriority:(unsigned char)arg1;
- (unsigned char)priority;
- (void)beginProgressFor:(long long)arg1;
- (double)unifiedFractionDone;
- (double)percentDone;
- (void)setPercentDone:(double)arg1;
- (id)statusMessage;
- (void)setStatusMessage:(id)arg1 percentDone:(double)arg2;
- (void)setStatusMessage:(id)arg1;
- (int)changeCount;
- (void)_didChange;
- (void)postActivityFinished;
- (void)handlePortMessage:(id)arg1;
- (void)postActivityStarting;
- (void)setDelegate:(id)arg1;
- (BOOL)isActive;
- (void)dealloc;
- (id)init;

@end

@interface _MCActivityMonitorMultiTarget : NSObject <MCActivityTarget>
{
    id <MCActivityTarget> _primaryTarget;
    NSMutableSet *_allTargets;
}

- (id)displayName;
- (id)allTargets;
- (void)setPrimaryTarget:(id)arg1;
- (id)primaryTarget;
- (BOOL)removeActivityTarget:(id)arg1;
- (BOOL)addActivityTarget:(id)arg1;
- (void)dealloc;

@end

@interface MCAddressManager : NSObject
{
}

+ (id)myFullName;
+ (id)addAddressToAddressBook:(id)arg1;
+ (id)addEmailAddressToCardMatchingFirstAndLastNameFromFormattedAddress:(id)arg1;
+ (id)_addressBookRecordsForFirstName:(id)arg1 lastName:(id)arg2;
+ (id)emailAddressesFromGroup:(id)arg1;
+ (void)_addEmailsFromGroup:(id)arg1 toDictionary:(id)arg2;
+ (id)groupsMatchingString:(id)arg1;
+ (id)myEmailAddress;
+ (id)replaceGroupsWithUndisclosedRecipients:(id)arg1;
+ (id)expandGroups:(id)arg1;

@end

@interface MCApopAuthScheme : MCAuthScheme
{
}

+ (id)apopAuthScheme;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (id)saslClientForAccount:(id)arg1 connection:(id)arg2;
- (unsigned int)applescriptScheme;
- (id)humanReadableName;
- (id)name;
- (id)internetAccountsScheme;
- (long long)securityLevel;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;

@end

@interface MCAppleTokenAuthScheme : MCAuthScheme
{
}

+ (id)appleTokenAuthScheme;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (long long)securityLevel;
- (BOOL)requiresPassword;
- (BOOL)requiresUsername;
- (unsigned int)applescriptScheme;
- (id)humanReadableName;
- (id)name;
- (id)internetAccountsScheme;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;

@end

@interface MCArchiveFileWrapper : NSFileWrapper
{
    NSData *_archiveData;
    long long _archiveType;
    NSFileWrapper *_realFileWrapper;
}

- (void)getCompressedData:(id *)arg1 archiveType:(long long *)arg2;
- (id)preferredFilename;
- (id)addSymbolicLinkWithDestination:(id)arg1 preferredFilename:(id)arg2;
- (id)addRegularFileWithContents:(id)arg1 preferredFilename:(id)arg2;
- (id)addFileWithPath:(id)arg1;
- (id)keyForFileWrapper:(id)arg1;
- (id)fileWrappers;
- (void)removeFileWrapper:(id)arg1;
- (id)addFileWrapper:(id)arg1;
- (id)serializedRepresentation;
- (BOOL)isSymbolicLink;
- (BOOL)isDirectory;
- (BOOL)isRegularFile;
- (unsigned long long)approximateSize;
- (BOOL)writeToURL:(id)arg1 options:(unsigned long long)arg2 originalContentsURL:(id)arg3 error:(id *)arg4;
- (void)_archiveFileWrapperCommonInit;
- (id)initWithSerializedRepresentation:(id)arg1;
- (id)initSymbolicLinkWithDestinationURL:(id)arg1;
- (id)initRegularFileWithContents:(id)arg1;
- (id)initWithURL:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (id)initDirectoryWithFileWrappers:(id)arg1;
- (id)initWithData:(id)arg1 archiveType:(long long)arg2;
- (void)dealloc;
- (id)_realFileWrapper;

@end

@interface MCPlaceholderArchiveFileWrapper : MCArchiveFileWrapper
{
}

- (BOOL)isPlaceholder;

@end

@interface MCAssertionHandler : NSAssertionHandler
{
}

+ (void)setAssertionAction:(unsigned long long)arg1;
+ (id)_MailCore_currentHandler;
+ (void)installDefaultAssertionHandler;
- (void)_handleFailureWithPreamble:(id)arg1 description:(id)arg2 arguments:(struct __va_list_tag [1])arg3;
- (void)handleFailureInFunction:(id)arg1 file:(id)arg2 lineNumber:(long long)arg3 description:(id)arg4;
- (void)handleFailureInMethod:(SEL)arg1 object:(id)arg2 file:(id)arg3 lineNumber:(long long)arg4 description:(id)arg5;

@end

@interface MCAttachment : NSObject <NSURLDownloadDelegate>
{
    NSData *_currentData;
    NSFileWrapper *_fileWrapper;
    NSData *_originalData;
    BOOL _hasResourceForkData;
    struct CGSize _imageSizeFromHeaders;
    NSImage *_iconImage;
    long long _imageByteCountFromHeaders;
    unsigned short _finderFlags;
    MCMimeBody *_mimeBody;
    MCMimePart *_mimePart;
    NSString *_filenameForSaving;
    unsigned long long _approximateSize;
    BOOL _shouldHideExtension;
    BOOL _isCalendarInvitation;
    BOOL _isUnreferencedAttachment;
    unsigned int _type;
    unsigned int _creator;
    NSURL *_externalBodyURL;
    NSString *_filename;
    NSString *_originalFilename;
    NSNumber *_fileSize;
    NSString *_contentID;
    NSString *_extension;
    NSNumber *_filePermissions;
    NSString *_mimeType;
    NSString *_messageID;
    NSString *_mailSpecialHandlingType;
    id _stationeryCompositeImage;
    NSString *_savedPath;
    NSArray *_whereFroms;
    NSDictionary *_quarantineProperties;
    NSOperation *_fileReadingOperation;
    NSProgress *_downloadProgress;
}

+ (id)_backgroundFileReadingQueue;
+ (BOOL)automaticallyNotifiesObserversOfOriginalData;
@property(retain) NSProgress *downloadProgress; // @synthesize downloadProgress=_downloadProgress;
@property BOOL isUnreferencedAttachment; // @synthesize isUnreferencedAttachment=_isUnreferencedAttachment;
@property(retain) NSOperation *fileReadingOperation; // @synthesize fileReadingOperation=_fileReadingOperation;
@property(retain) NSDictionary *quarantineProperties; // @synthesize quarantineProperties=_quarantineProperties;
@property(retain) NSArray *whereFroms; // @synthesize whereFroms=_whereFroms;
@property(retain) NSString *savedPath; // @synthesize savedPath=_savedPath;
@property(readonly) id stationeryCompositeImage; // @synthesize stationeryCompositeImage=_stationeryCompositeImage;
@property(retain) NSString *mailSpecialHandlingType; // @synthesize mailSpecialHandlingType=_mailSpecialHandlingType;
@property BOOL isCalendarInvitation; // @synthesize isCalendarInvitation=_isCalendarInvitation;
@property(retain) NSString *messageID; // @synthesize messageID=_messageID;
@property(retain) NSString *mimeType; // @synthesize mimeType=_mimeType;
@property(retain) NSNumber *filePermissions; // @synthesize filePermissions=_filePermissions;
@property BOOL shouldHideExtension; // @synthesize shouldHideExtension=_shouldHideExtension;
@property(retain) NSString *extension; // @synthesize extension=_extension;
@property unsigned int creator; // @synthesize creator=_creator;
@property unsigned int type; // @synthesize type=_type;
@property(retain) NSString *contentID; // @synthesize contentID=_contentID;
@property(retain) NSNumber *fileSize; // @synthesize fileSize=_fileSize;
@property(retain) NSString *originalFilename; // @synthesize originalFilename=_originalFilename;
@property(retain) NSString *filename; // @synthesize filename=_filename;
@property(retain) NSURL *externalBodyURL; // @synthesize externalBodyURL=_externalBodyURL;
- (void)_finishedCoordinatedFileReadingWithURL:(id)arg1;
- (BOOL)hasPendingBackgroundRead;
- (void)beginBackgroundFileReading;
- (id)description;
- (id)symbolicLinkDestinationForFileWrapper;
- (id)createTemporaryFile;
- (BOOL)createEmptyAttachmentAtPath:(id)arg1;
- (void)setFilenameForSaving:(id)arg1;
- (id)fileWrapperIfAvailable;
@property(retain) NSFileWrapper *fileWrapper;
- (id)fileWrapperIncludeData:(BOOL)arg1 fetchLevel:(unsigned long long)arg2;
- (id)_fileWrapperIncludeData:(BOOL)arg1;
- (id)appleDoubleDataWithFilename:(const char *)arg1 length:(unsigned long long)arg2;
- (id)appleSingleDataWithFilename:(const char *)arg1 length:(unsigned long long)arg2;
- (BOOL)couldConfuseWindowsClients;
- (void)takeNewDataFromPath:(id)arg1;
@property BOOL isPartOfStationery;
- (BOOL)isDirectory;
- (id)remoteAccessMimeType;
- (BOOL)isRemotelyAccessed;
- (void)isImage:(char *)arg1 isPDF:(char *)arg2 bestMimeType:(id *)arg3;
- (void)isImage:(char *)arg1 isPDF:(char *)arg2;
- (BOOL)isPDF;
- (BOOL)isImage;
- (BOOL)isStationeryCompositeImage;
- (BOOL)isVideoOrAudio;
@property(readonly) NSString *typeIdentifier;
- (id)toolTip;
- (void)discardIconImage;
- (void)setIconImage:(id)arg1;
- (id)iconImage;
- (id)filenameWithoutHiddenExtension;
- (unsigned long long)approximateSize;
- (unsigned long long)approximateSizeOfWrapper;
- (BOOL)isDataDownloaded;
- (long long)imageByteCountFromHeaders;
- (struct CGSize)imageSizeFromHeaders;
- (void)setFromHeadersImageSize:(struct CGSize)arg1 byteCount:(long long)arg2;
- (void)downloadDidFinish:(id)arg1;
- (void)download:(id)arg1 didFailWithError:(id)arg2;
- (void)download:(id)arg1 didReceiveDataOfLength:(unsigned long long)arg2;
- (void)download:(id)arg1 didReceiveResponse:(id)arg2;
- (id)dataForFetchLevel:(unsigned long long)arg1;
- (void)takeInfoFromMessageAttachment:(id)arg1 saveOriginalData:(BOOL)arg2;
- (void)_configureWithMimePart;
@property(retain) MCMimePart *mimePart;
- (void)setFileNameForResizedImage:(id)arg1;
- (BOOL)isFullSize;
- (void)revertToOriginalData;
- (void)setDataForResizedImage:(id)arg1;
- (BOOL)isScalable;
@property(retain, nonatomic) NSData *currentData;
@property(retain, nonatomic) NSData *originalData;
- (id)attachmentWithCurrentData;
- (void)dealloc;
- (id)initWithFileURL:(id)arg1;
- (id)initWithStationeryCompositeImage:(id)arg1;
- (id)initWithExternalBodyURL:(id)arg1;
- (id)initWithFileWrapper:(id)arg1;
- (id)initWithMailInternalData:(id)arg1;
- (id)initWithData:(id)arg1;

@end

@interface MCAttachmentWrappingTextAttachment : NSTextAttachment
{
    MCAttachment *_messageAttachment;
}

- (id)messageAttachment;
- (void)dealloc;
- (id)initWithFileWrapper:(id)arg1;
- (id)initWithMessageAttachment:(id)arg1;

@end

@interface MCAuthScheme : NSObject
{
}

+ (id)schemeWithApplescriptScheme:(unsigned int)arg1;
+ (id)schemeWithInternetAccountsScheme:(id)arg1;
+ (id)schemeWithAccountInfo:(id)arg1;
+ (id)schemeWithName:(id)arg1;
+ (id)knownSchemes;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (long long)compareBySecurityLevel:(id)arg1;
- (BOOL)requiresDomain;
- (BOOL)requiresPassword;
- (BOOL)requiresUsername;
- (id)saslClientForAccount:(id)arg1 connection:(id)arg2;
- (long long)securityLevel;
- (BOOL)hasEncryption;

@end

@interface MCByteSet : NSObject <NSCopying, NSMutableCopying>
{
    char _mySet[32];
}

+ (id)suspiciousCodepage1252ByteSet;
+ (id)nonASCIIByteSet;
+ (id)ASCIIByteSet;
+ (id)asciiWhitespaceSet;
- (id)invertedSet;
- (BOOL)byteIsMember:(BOOL)arg1;
- (void)_setBytes:(char [32])arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCString:(const char *)arg1;
- (id)initWithBytes:(const void *)arg1 length:(unsigned long long)arg2;
- (id)initWithRange:(struct _NSRange)arg1;

@end

@interface MCMutableByteSet : MCByteSet
{
}

- (void)invert;
- (void)removeBytesInRange:(struct _NSRange)arg1;
- (void)addBytesInRange:(struct _NSRange)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface MCCIDURLProtocol : NSURLProtocol
{
}

+ (void)unregisterDataProvider:(id)arg1;
+ (void)registerDataProvider:(id)arg1;
+ (BOOL)requestIsCacheEquivalent:(id)arg1 toRequest:(id)arg2;
+ (id)canonicalRequestForRequest:(id)arg1;
+ (BOOL)canInitWithRequest:(id)arg1;
- (void)stopLoading;
- (void)startLoading;

@end

@interface MCConnection : NSObject
{
    MCSocket *_socket;
    void *_buffer;
    long long _bufferRemainingBytes;
    unsigned long long _bufferStart;
    unsigned long long _bufferLength;
    NSData *_logHeader;
    id <MCAccount> _account;
    id _accountLock;
    MCSaslClient *_saslClient;
    BOOL _isBackground;
    double _connectTimeout;
    double _readWriteTimeout;
}

+ (BOOL)shouldLogActivityForHost:(id)arg1 port:(long long)arg2;
+ (void)setLogActivityOnHosts:(id)arg1;
+ (id)logActivityOnHosts;
+ (void)setLogActivityOnPorts:(id)arg1;
+ (id)logActivityOnPorts;
+ (void)setLogAllSocketActivity:(BOOL)arg1;
+ (BOOL)logAllSocketActivity;
+ (void)setLogClasses:(id)arg1;
+ (id)logClasses;
+ (void)flushLog;
+ (void)logBytes:(const void *)arg1 length:(unsigned long long)arg2;
+ (BOOL)_defaultsToBackground;
+ (void)initialize;
@property BOOL isBackground; // @synthesize isBackground=_isBackground;
@property double readWriteTimeout; // @synthesize readWriteTimeout=_readWriteTimeout;
@property double connectTimeout; // @synthesize connectTimeout=_connectTimeout;
- (void)_resetLogHeaderWithPort:(long long)arg1;
- (void)_logEventWithPrefix:(const char *)arg1 bytes:(const void *)arg2 length:(unsigned long long)arg3 maskStartIndex:(unsigned long long)arg4 maskLength:(unsigned long long)arg5;
- (BOOL)_isSSLError:(id)arg1;
- (void)_setupWriteErrorForMonitor;
- (void)_setupReadErrorForMonitor;
- (void)_setupSSLErrorForMonitorWithHostname:(id)arg1;
- (void)_setupConnectionErrorForMonitorWithPort:(long long)arg1 usingSSL:(BOOL)arg2;
- (BOOL)_writeData:(id)arg1 dontLogBytesInRange:(struct _NSRange)arg2 error:(id *)arg3;
- (long long)_readBytesFromSocketIntoBuffer:(void *)arg1 amount:(unsigned long long)arg2 requireAllBytes:(BOOL)arg3 error:(id *)arg4;
- (BOOL)_fillBuffer:(id *)arg1;
- (BOOL)_readBytesIntoData:(id)arg1 desiredLength:(unsigned long long)arg2 error:(id *)arg3;
- (BOOL)_readLineIntoData:(id)arg1 error:(id *)arg2;
- (BOOL)_hasBytesAvailable;
- (void)disconnect;
- (void)quit;
- (BOOL)isValid;
- (BOOL)reconnect;
- (void)discoverAccountSettings;
- (BOOL)_authenticateWithAuthenticator:(id)arg1;
- (BOOL)authenticate;
- (BOOL)_completeConnectionWithResult:(BOOL)arg1;
- (void)_setupConnection;
- (BOOL)_startTLS;
- (void)_setupSocketWithSecurityLayer:(long long)arg1;
- (id)_newConnectionAttempts;
- (BOOL)connectDiscoveringBestSettings:(BOOL)arg1;
- (void *)_socket;
- (id)authenticationMechanisms;
- (id)capabilities;
- (unsigned int)cipherKeyLength;
@property id <MCAccount> account;
- (void)dealloc;
- (id)description;
- (id)init;

@end

@interface _MCConnectionAttempt : NSObject
{
    long long _securityLayer;
    long long _port;
}

@property(nonatomic) long long port; // @synthesize port=_port;
@property(nonatomic) long long securityLayer; // @synthesize securityLayer=_securityLayer;
- (id)description;

@end

@interface MCCramMD5AuthScheme : MCAuthScheme
{
}

+ (id)cramMd5AuthScheme;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (long long)securityLevel;
- (unsigned int)applescriptScheme;
- (id)humanReadableName;
- (id)name;
- (id)internetAccountsScheme;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;

@end

@interface MCDataScanner : NSObject
{
    NSData *_myData;
    unsigned long long _myLocation;
}

+ (id)scannerWithData:(id)arg1;
- (BOOL)scanUpToBytesFromSet:(id)arg1 intoData:(id *)arg2;
- (BOOL)_scanUpToBytes:(const void *)arg1 length:(unsigned long long)arg2 intoData:(id *)arg3;
- (BOOL)scanUpToCString:(const char *)arg1 intoData:(id *)arg2;
- (BOOL)scanUpToData:(id)arg1 intoData:(id *)arg2;
- (BOOL)scanBytesFromSet:(id)arg1 intoData:(id *)arg2;
- (BOOL)_scanBytes:(const void *)arg1 length:(unsigned long long)arg2 intoData:(id *)arg3;
- (BOOL)scanCString:(const char *)arg1 intoData:(id *)arg2;
- (BOOL)scanData:(id)arg1 intoData:(id *)arg2;
- (BOOL)scanInteger:(long long *)arg1;
- (BOOL)scanByte:(char *)arg1;
- (BOOL)isAtEnd;
- (void)setScanLocation:(unsigned long long)arg1;
- (unsigned long long)scanLocation;
- (id)data;
- (void)dealloc;
- (id)initWithData:(id)arg1;

@end

@interface MCDateFormatterFactory : NSObject
{
}

+ (id)newUncommonInternetMessageDateFormatters;
+ (id)newCommonInternetMessageDateFormatters;
+ (id)newInternetMessageDateFormatter;
+ (id)newIMAPDateFormatter;

@end

@interface _MCLogClient : NSObject
{
    int _fileDescriptor;
    struct __aslclient *_aslClient;
}

@property(readonly) int fileDescriptor; // @synthesize fileDescriptor=_fileDescriptor;
@property(readonly) struct __aslclient *aslClient; // @synthesize aslClient=_aslClient;
- (void)dealloc;
- (id)initWithCategory:(id)arg1;

@end

@interface MCEWSAutodiscovery : NSObject <EWSAutodiscoverBindingDelegate>
{
    NSString *_emailAddress;
    NSString *_password;
    NSString *_userName;
    NSURL *_preferredAutodiscoverURL;
    NSString *_internalHostname;
    NSString *_externalHostname;
    NSDictionary *_receivingAccountInfo;
    long long _status;
    NSError *_lastError;
}

+ (void)initialize;
@property(copy) NSError *lastError; // @synthesize lastError=_lastError;
@property long long status; // @synthesize status=_status;
@property(copy) NSDictionary *receivingAccountInfo; // @synthesize receivingAccountInfo=_receivingAccountInfo;
@property(copy, nonatomic) NSString *externalHostname; // @synthesize externalHostname=_externalHostname;
@property(copy, nonatomic) NSString *internalHostname; // @synthesize internalHostname=_internalHostname;
@property(copy, nonatomic) NSURL *preferredAutodiscoverURL; // @synthesize preferredAutodiscoverURL=_preferredAutodiscoverURL;
@property(copy) NSString *userName; // @synthesize userName=_userName;
@property(copy, nonatomic) NSString *password; // @synthesize password=_password;
@property(copy, nonatomic) NSString *emailAddress; // @synthesize emailAddress=_emailAddress;
- (void)autodiscoverBinding:(id)arg1 didReceiveCertificateError:(id)arg2;
- (void)autodiscoverBinding:(id)arg1 didFailWithError:(id)arg2;
- (void)autodiscoverBinding:(id)arg1 didFinishWithResponse:(id)arg2;
- (void)autodiscoverBinding:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (void)autodiscoverBinding:(id)arg1 didCancelAuthenticationChallenge:(id)arg2;
- (long long)executeSynchronouslyWithMonitor:(id)arg1;
- (void)dealloc;
- (id)initWithEmailAddress:(id)arg1 userName:(id)arg2 password:(id)arg3 preferredAutodiscoverURL:(id)arg4 internalHostname:(id)arg5 externalHostname:(id)arg6;
- (id)init;

@end

@interface MCExternalAuthScheme : MCAuthScheme
{
}

+ (id)externalAuthScheme;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (long long)securityLevel;
- (BOOL)requiresPassword;
- (BOOL)requiresUsername;
- (unsigned int)applescriptScheme;
- (id)humanReadableName;
- (id)name;
- (id)internetAccountsScheme;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;

@end

@interface MCFileTypeInfo : NSObject
{
    unsigned int _osType;
    NSString *_mimeType;
    NSString *_pathExtension;
}

@property(nonatomic) unsigned int osType; // @synthesize osType=_osType;
@property(copy, nonatomic) NSString *pathExtension; // @synthesize pathExtension=_pathExtension;
@property(copy, nonatomic) NSString *mimeType; // @synthesize mimeType=_mimeType;
- (id)getPedigree;
- (void)_getTypeInfoFromFallbackFields:(unsigned long long *)arg1;
- (void)_getTypeInfoBasedOnFields:(unsigned long long *)arg1 inputClass:(struct __CFString *)arg2 inputValue:(struct __CFString *)arg3;
- (BOOL)getTypeInfoForDesiredFields:(unsigned long long)arg1;
- (id)description;
- (void)dealloc;

@end

@interface _FormatFlowedWriter : NSObject
{
    NSAttributedString *_inputAttrString;
    NSString *_inputString;
    unsigned long long _encoding;
    NSMutableString *_outputString;
    NSMutableString *_quotedString;
    unsigned int _addedTrailingSpaces:1;
    unsigned int _quoteLevel:31;
    struct _NSRange _paraRange;
    NSMutableString *_lineString;
    NSMutableAttributedString *_attrString;
}

+ (id)newWithAttributedString:(id)arg1 encoding:(unsigned long long)arg2;
- (id)quotedString;
- (BOOL)addedTrailingSpaces;
- (id)outputString;
- (void)_outputQuotedParagraph;
- (unsigned long long)_findLineBreakInRange:(struct _NSRange)arg1 maxCharWidthCount:(unsigned long long)arg2 endIsURL:(BOOL)arg3;
- (void)dealloc;

@end

@interface MailCoreFramework : NSObject
{
}

+ (int)uniqueIDForMessageURL;
+ (id)logMessages;
+ (void)setUserAgent:(id)arg1;
+ (id)userAgent;
+ (void)setRunningInSpotlightImporter:(BOOL)arg1;
+ (BOOL)runningInSpotlightImporter;
+ (id)bundle;

@end

@interface MCGssapiAuthScheme : MCAuthScheme
{
}

+ (id)gssApiAuthScheme;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (long long)securityLevel;
- (BOOL)hasEncryption;
- (BOOL)requiresPassword;
- (unsigned int)applescriptScheme;
- (id)humanReadableName;
- (id)name;
- (id)internetAccountsScheme;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;

@end

@interface MCPortNumberFormatter : NSNumberFormatter
{
}

- (id)stringForObjectValue:(id)arg1;
- (BOOL)getObjectValue:(out id *)arg1 forString:(id)arg2 errorDescription:(out id *)arg3;

@end

@interface MCIASetupViewController : IASetupViewController <IADataPluginDelegate, MCAccountSetupValidatorDelegate>
{
    id _localEventMonitor;
    id _globalEventMonitor;
    BOOL _labelHeight;
    BOOL _textFieldHeight;
    BOOL _popUpButtonHeight;
    BOOL _textFieldToTextFieldVerticalSpace;
    BOOL _popUpButtonToPopUpButtonVerticalSpace;
    BOOL _showPathPrefix;
    BOOL _showIncomingTLSCertificate;
    BOOL _showOutgoingTLSCertificate;
    BOOL _manuallyConfigureIncoming;
    BOOL _manuallyConfigureOutgoing;
    BOOL _optionKeyPressed;
    NSView *_incomingAccountInfoView;
    NSView *_incomingAccountManualSetupView;
    NSView *_outgoingAccountInfoView;
    NSView *_outgoingAccountManualSetupView;
    NSTextField *_emailAddressTextField;
    NSTextField *_mailServerTextField;
    NSTextField *_incomingPortTextField;
    NSTextField *_smtpServerTextField;
    NSTextField *_outgoingPortTextField;
    NSPopUpButton *_incomingAuthenticationPopUp;
    NSPopUpButton *_incomingTLSCertificatePopUp;
    NSPopUpButton *_outgoingAuthenticationPopUp;
    NSPopUpButton *_outgoingTLSCertificatePopUp;
    NSLayoutConstraint *_accountTypeLabelHeightConstraint;
    NSLayoutConstraint *_accountTypeButtonHeightConstraint;
    NSLayoutConstraint *_accountTypeVerticalSpaceConstraint;
    NSLayoutConstraint *_pathPrefixLabelHeightConstraint;
    NSLayoutConstraint *_pathPrefixFieldHeightConstraint;
    NSLayoutConstraint *_pathPrefixVerticalSpaceConstraint;
    NSLayoutConstraint *_incomingTLSCertificateLabelHeightConstraint;
    NSLayoutConstraint *_incomingTLSCertificateButtonHeightConstraint;
    NSLayoutConstraint *_incomingTLSCertificateVerticalSpaceConstraint;
    NSLayoutConstraint *_outgoingTLSCertificateLabelHeightConstraint;
    NSLayoutConstraint *_outgoingTLSCertficiateButtonHeightConstraint;
    NSLayoutConstraint *_outgoingTLSCertificateVerticalSpaceConstraint;
    NSString *_progressText;
    id _completion;
    IADataPlugin *_iaDataPlugin;
    MCAccountSetupValidator *_validator;
    IAMailAccountSetupInput *_accountSetupInput;
    IAMailAccountSetupResult *_accountSetupResult;
}

+ (id)keyPathsForValuesAffectingAccountType;
+ (id)keyPathsForValuesAffectingValueForKey:(id)arg1;
@property(retain, nonatomic) IAMailAccountSetupResult *accountSetupResult; // @synthesize accountSetupResult=_accountSetupResult;
@property(retain, nonatomic) IAMailAccountSetupInput *accountSetupInput; // @synthesize accountSetupInput=_accountSetupInput;
@property(nonatomic) BOOL optionKeyPressed; // @synthesize optionKeyPressed=_optionKeyPressed;
@property(nonatomic) BOOL manuallyConfigureOutgoing; // @synthesize manuallyConfigureOutgoing=_manuallyConfigureOutgoing;
@property(nonatomic) BOOL manuallyConfigureIncoming; // @synthesize manuallyConfigureIncoming=_manuallyConfigureIncoming;
@property(retain, nonatomic) MCAccountSetupValidator *validator; // @synthesize validator=_validator;
@property(readonly, nonatomic) IADataPlugin *iaDataPlugin; // @synthesize iaDataPlugin=_iaDataPlugin;
@property(copy, nonatomic) id completion; // @synthesize completion=_completion;
@property(nonatomic) BOOL showOutgoingTLSCertificate; // @synthesize showOutgoingTLSCertificate=_showOutgoingTLSCertificate;
@property(nonatomic) BOOL showIncomingTLSCertificate; // @synthesize showIncomingTLSCertificate=_showIncomingTLSCertificate;
@property(nonatomic) BOOL showPathPrefix; // @synthesize showPathPrefix=_showPathPrefix;
@property(copy, nonatomic) NSString *progressText; // @synthesize progressText=_progressText;
@property(nonatomic) BOOL popUpButtonToPopUpButtonVerticalSpace; // @synthesize popUpButtonToPopUpButtonVerticalSpace=_popUpButtonToPopUpButtonVerticalSpace;
@property(nonatomic) BOOL textFieldToTextFieldVerticalSpace; // @synthesize textFieldToTextFieldVerticalSpace=_textFieldToTextFieldVerticalSpace;
@property(nonatomic) BOOL popUpButtonHeight; // @synthesize popUpButtonHeight=_popUpButtonHeight;
@property(nonatomic) BOOL textFieldHeight; // @synthesize textFieldHeight=_textFieldHeight;
@property(nonatomic) BOOL labelHeight; // @synthesize labelHeight=_labelHeight;
@property(nonatomic) NSLayoutConstraint *outgoingTLSCertificateVerticalSpaceConstraint; // @synthesize outgoingTLSCertificateVerticalSpaceConstraint=_outgoingTLSCertificateVerticalSpaceConstraint;
@property(nonatomic) NSLayoutConstraint *outgoingTLSCertficiateButtonHeightConstraint; // @synthesize outgoingTLSCertficiateButtonHeightConstraint=_outgoingTLSCertficiateButtonHeightConstraint;
@property(nonatomic) NSLayoutConstraint *outgoingTLSCertificateLabelHeightConstraint; // @synthesize outgoingTLSCertificateLabelHeightConstraint=_outgoingTLSCertificateLabelHeightConstraint;
@property(nonatomic) NSLayoutConstraint *incomingTLSCertificateVerticalSpaceConstraint; // @synthesize incomingTLSCertificateVerticalSpaceConstraint=_incomingTLSCertificateVerticalSpaceConstraint;
@property(nonatomic) NSLayoutConstraint *incomingTLSCertificateButtonHeightConstraint; // @synthesize incomingTLSCertificateButtonHeightConstraint=_incomingTLSCertificateButtonHeightConstraint;
@property(nonatomic) NSLayoutConstraint *incomingTLSCertificateLabelHeightConstraint; // @synthesize incomingTLSCertificateLabelHeightConstraint=_incomingTLSCertificateLabelHeightConstraint;
@property(nonatomic) NSLayoutConstraint *pathPrefixVerticalSpaceConstraint; // @synthesize pathPrefixVerticalSpaceConstraint=_pathPrefixVerticalSpaceConstraint;
@property(nonatomic) NSLayoutConstraint *pathPrefixFieldHeightConstraint; // @synthesize pathPrefixFieldHeightConstraint=_pathPrefixFieldHeightConstraint;
@property(nonatomic) NSLayoutConstraint *pathPrefixLabelHeightConstraint; // @synthesize pathPrefixLabelHeightConstraint=_pathPrefixLabelHeightConstraint;
@property(nonatomic) NSLayoutConstraint *accountTypeVerticalSpaceConstraint; // @synthesize accountTypeVerticalSpaceConstraint=_accountTypeVerticalSpaceConstraint;
@property(nonatomic) NSLayoutConstraint *accountTypeButtonHeightConstraint; // @synthesize accountTypeButtonHeightConstraint=_accountTypeButtonHeightConstraint;
@property(nonatomic) NSLayoutConstraint *accountTypeLabelHeightConstraint; // @synthesize accountTypeLabelHeightConstraint=_accountTypeLabelHeightConstraint;
@property(nonatomic) NSPopUpButton *outgoingTLSCertificatePopUp; // @synthesize outgoingTLSCertificatePopUp=_outgoingTLSCertificatePopUp;
@property(nonatomic) NSPopUpButton *outgoingAuthenticationPopUp; // @synthesize outgoingAuthenticationPopUp=_outgoingAuthenticationPopUp;
@property(nonatomic) NSPopUpButton *incomingTLSCertificatePopUp; // @synthesize incomingTLSCertificatePopUp=_incomingTLSCertificatePopUp;
@property(nonatomic) NSPopUpButton *incomingAuthenticationPopUp; // @synthesize incomingAuthenticationPopUp=_incomingAuthenticationPopUp;
@property(nonatomic) NSTextField *outgoingPortTextField; // @synthesize outgoingPortTextField=_outgoingPortTextField;
@property(nonatomic) NSTextField *smtpServerTextField; // @synthesize smtpServerTextField=_smtpServerTextField;
@property(nonatomic) NSTextField *incomingPortTextField; // @synthesize incomingPortTextField=_incomingPortTextField;
@property(nonatomic) NSTextField *mailServerTextField; // @synthesize mailServerTextField=_mailServerTextField;
@property(nonatomic) NSTextField *emailAddressTextField; // @synthesize emailAddressTextField=_emailAddressTextField;
@property(retain, nonatomic) NSView *outgoingAccountManualSetupView; // @synthesize outgoingAccountManualSetupView=_outgoingAccountManualSetupView;
@property(retain, nonatomic) NSView *outgoingAccountInfoView; // @synthesize outgoingAccountInfoView=_outgoingAccountInfoView;
@property(retain, nonatomic) NSView *incomingAccountManualSetupView; // @synthesize incomingAccountManualSetupView=_incomingAccountManualSetupView;
@property(retain, nonatomic) NSView *incomingAccountInfoView; // @synthesize incomingAccountInfoView=_incomingAccountInfoView;
- (id)_uniqueDisplayNameForAccount;
- (void)updateAccountSetupResultWithOutgoingAccount:(id)arg1;
- (void)updateAccountSetupResultWithIncomingAccount:(id)arg1;
- (void)updateAccountSetupInput;
@property(nonatomic) long long accountType;
@property(copy, nonatomic) NSString *emailAddress;
@property(readonly, nonatomic) BOOL popDisabled;
@property(readonly, nonatomic) BOOL outgoingAccountDisabled;
- (id)delegateApplicationName;
- (BOOL)validatorShouldPromptForInsecurePassword:(id)arg1;
- (void)validatorDidFinish:(id)arg1;
- (id)_configureAuthenticationPopUp:(id)arg1 withAuthSchemes:(id)arg2 currentAuthScheme:(id)arg3 allowNone:(BOOL)arg4;
- (void)validatorDidFail:(id)arg1;
- (void)validator:(id)arg1 didChangeState:(long long)arg2;
- (BOOL)plugin:(id)arg1 handleCertificateError:(id)arg2;
- (void)plugin:(id)arg1 didChangeAccountUID:(id)arg2;
- (void)plugin:(id)arg1 didDeleteAccountUID:(id)arg2;
- (void)plugin:(id)arg1 didCreateAccountUID:(id)arg2;
- (void)plugin:(id)arg1 accountSetupDidFinish:(id)arg2 withResult:(id)arg3;
- (void)plugin:(id)arg1 accountSetupDidFail:(id)arg2 withError:(id)arg3;
- (void)plugin:(id)arg1 accountSetupUpdate:(id)arg2 withStatus:(long long)arg3;
- (BOOL)showBackButton;
- (id)title;
- (BOOL)showCreateButton;
- (BOOL)inputValidForNext;
- (void)cancel;
- (BOOL)_sendIAAccountCreationNotificationForUID:(id)arg1 withError:(id)arg2;
- (void)_createAccountWithSetupResult:(id)arg1;
- (void)_updateAccountSetupResultWithReceivingAccountInfo:(id)arg1 deliveryAccountInfo:(id)arg2;
- (void)_cancelValidation;
- (void)_kickOffOutgoingAccountValidation;
- (void)_kickOffIncomingAccountValidation;
- (void)createWithCompletion:(id)arg1;
- (void)back;
- (void)next;
- (void)didUpdateCurrentView:(id)arg1;
- (id)viewForAccount:(id)arg1;
- (void)_updateOutgoingTLSCertificateConstraintsWithAuthMechanism:(id)arg1;
- (void)_updateIncomingTLSCertificateConstraintsWithAuthMechanism:(id)arg1;
- (void)_updatePathPrefixConstraintsWithAccountType:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)loadView;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)init;

@end

@interface _MCInvocationOperation : MCThrowingInvocationOperation
{
}

- (void)main;

@end

@interface MCInvocationQueue : NSOperationQueue
{
    NSPort *_runLoopCancelPort;
}

+ (BOOL)didCancelAllMonitoredItems;
+ (void)cancelAllMonitoredItems;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)_newOperationWithInvocation:(id)arg1;
- (void)runInvocationOnQueueSynchronously:(id)arg1;
- (void)addInvocation:(id)arg1;
- (void)dealloc;
- (id)initWithMaxConcurrentOperationCount:(long long)arg1;
- (id)init;

@end

@interface MCISPAccountSettingsManager : NSObject
{
    NSMutableDictionary *_ispAccountsSettings;
    NSMutableDictionary *_ispReceivingAccountsSettingsByDomain;
    NSMutableDictionary *_ispDeliveryAccountsSettingsByDomain;
    NSMutableDictionary *_ispDeliveryAccountsSettingsByIdentifier;
}

+ (id)_accountInformationStringForKey:(id)arg1 localizedKey:(id)arg2 domain:(id)arg3;
+ (id)ispSubscriptionURLLabelForDomain:(id)arg1;
+ (id)ispSubscriptionURLForDomain:(id)arg1;
+ (id)ispSupportURLLabelForDomain:(id)arg1;
+ (id)ispSupportURLForDomain:(id)arg1;
+ (id)ispBrandNameForDomain:(id)arg1;
+ (BOOL)ispAccountInformationAvailableForDomain:(id)arg1;
+ (id)_alwaysPersistedKeys;
+ (id)onlineDatabaseSettings;
+ (id)locallyInstalledSettings;
+ (void)initialize;
- (void)emptyCache;
- (id)deliveryAccountsSettingsForDomain:(id)arg1;
- (id)_deliveryAccountsSettingsForDomain:(id)arg1 fetchIfNecessary:(BOOL)arg2;
- (id)receivingAccountSettingsForDomain:(id)arg1;
- (id)_receivingAccountSettingsForDomain:(id)arg1 fetchIfNecessary:(BOOL)arg2;
- (BOOL)_getAccountIsReceivingAccount:(char *)arg1 isDeliveryAccount:(char *)arg2 fromAccountSettings:(id)arg3;
- (BOOL)_persistISPPlist:(id)arg1;
- (id)_persistantISPAccountSettings:(id)arg1;
- (id)_persistantAccountSettings:(id)arg1;
- (BOOL)_shouldVerifyLoadedISPPlist;
- (void)_loadISPPlist:(id)arg1 bundle:(id)arg2 path:(id)arg3;
- (void)_loadISPPlistsAtPath:(id)arg1;
- (void)_unloadISPAccounts;
- (void)_loadISPAccountsIfNecessary;
- (id)_persistanceFolderName;
- (void)dealloc;

@end

@interface _MCISPLocalAccountSettingsManager : MCISPAccountSettingsManager
{
}

- (id)_persistanceFolderName;

@end

@interface _MCISPOnlineAccountSettingsManager : MCISPAccountSettingsManager
{
    NSString *_ispAccountsXQuery;
    NSCache *_fetchedISPPlistsByDomain;
}

- (void)emptyCache;
- (id)_deliveryAccountsSettingsForDomain:(id)arg1 fetchIfNecessary:(BOOL)arg2;
- (id)_receivingAccountSettingsForDomain:(id)arg1 fetchIfNecessary:(BOOL)arg2;
- (void)_finalizeISPAccountsSettings:(id)arg1;
- (id)_ispPlistFromXMLDocument:(id)arg1;
- (id)_fetchISPDataForDomain:(id)arg1;
- (id)_ispPlistForDomain:(id)arg1;
- (BOOL)_shouldVerifyLoadedISPPlist;
- (id)_persistanceFolderName;
- (void)dealloc;
- (id)init;

@end

@interface MCImageJunkMetadata : NSObject
{
    unsigned long long _pixelCount;
    unsigned long long _byteCount;
    BOOL _isAnimated;
    long long _type;
    double _density;
    unsigned long long _frameCount;
    struct CGSize _size;
}

+ (id)lsmMarkerForImageDensityCategory:(long long)arg1;
+ (id)lsmMarkerForImageSizeCategory:(long long)arg1;
+ (id)stringForImageType:(long long)arg1;
@property unsigned long long frameCount; // @synthesize frameCount=_frameCount;
@property BOOL isAnimated; // @synthesize isAnimated=_isAnimated;
@property double density; // @synthesize density=_density;
@property struct CGSize size; // @synthesize size=_size;
@property long long type; // @synthesize type=_type;
- (id)description;
@property(readonly) long long densityCategory;
@property(readonly) long long sizeCategory;
@property unsigned long long pixelCount;
@property unsigned long long byteCount;
- (void)computeDensity;
- (id)initWithImage:(id)arg1 name:(id)arg2 type:(long long)arg3;

@end

@interface MCJunkRecorder : NSObject
{
    BOOL _isSigned;
    BOOL _isShort;
    long long _imageCount;
    long long _characterCount;
    double _imageToTextRatio;
    NSMutableDictionary *_imageInfos;
    double _lsmScore;
}

@property double lsmScore; // @synthesize lsmScore=_lsmScore;
@property BOOL isShort; // @synthesize isShort=_isShort;
@property BOOL isSigned; // @synthesize isSigned=_isSigned;
@property(retain) NSMutableDictionary *imageInfos; // @synthesize imageInfos=_imageInfos;
@property double imageToTextRatio; // @synthesize imageToTextRatio=_imageToTextRatio;
@property long long characterCount; // @synthesize characterCount=_characterCount;
@property long long imageCount; // @synthesize imageCount=_imageCount;
- (id)description;
- (void)dealloc;
- (id)init;

@end

@interface MCKeychainManager : NSObject
{
}

+ (struct OpaqueSecPolicyRef *)createSMIMEPolicyForAddress:(id)arg1 keyUsage:(void *)arg2;
+ (BOOL)canEncryptMessagesToAddresses:(id)arg1 sender:(id)arg2;
+ (BOOL)canEncryptMessagesToAddress:(id)arg1;
+ (BOOL)canSignMessagesFromAddress:(id)arg1;
+ (struct OpaqueSecCertificateRef *)copyEncryptionCertificateForAddress:(id)arg1;
+ (struct OpaqueSecIdentityRef *)copySigningIdentityForAddress:(id)arg1;
+ (BOOL)configureTLSCertificatesPopUp:(id)arg1 usingPersistentReference:(BOOL)arg2 withOldIdentity:(id)arg3 newIdentity:(id *)arg4;
+ (id)_copyTlsClientIdentities;
+ (id)sessionTrustedCertificatesForHost:(id)arg1;
+ (void)setSessionTrustedCertificates:(id)arg1 forHost:(id)arg2;
+ (void)removePasswordForServiceName:(id)arg1 accountName:(id)arg2;
+ (void)setPassword:(id)arg1 forServiceName:(id)arg2 accountName:(id)arg3;
+ (id)passwordForServiceName:(id)arg1 accountName:(id)arg2;
+ (void)removePasswordForHost:(id)arg1 username:(id)arg2 port:(unsigned short)arg3 protocol:(void *)arg4;
+ (void)setPassword:(id)arg1 forHost:(id)arg2 username:(id)arg3 port:(unsigned short)arg4 protocol:(void *)arg5;
+ (id)passwordForHost:(id)arg1 username:(id)arg2 port:(unsigned short)arg3 protocol:(void *)arg4;
+ (void)initialize;

@end

@interface MCLargeAttachmentFileWrapper : NSFileWrapper
{
    unsigned long long _attachmentSize;
    NSURL *_fileToCopy;
}

+ (id)localAttachmentFilesDirectory;
+ (id)fileWrapperWithURL:(id)arg1 andContentID:(id)arg2;
@property(retain) NSURL *fileToCopy; // @synthesize fileToCopy=_fileToCopy;
@property unsigned long long approximateSize; // @synthesize approximateSize=_attachmentSize;
- (BOOL)isALargeAttachment;
- (id)symbolicLinkDestinationURL;
- (id)archivedDataWithPartNumber:(id)arg1;
- (void)dealloc;
- (id)initWithDictionaryRepresentation:(id)arg1;

@end

@interface MCMainThreadInvocationOperation : MCThrowingInvocationOperation
{
    BOOL _isExecuting;
    BOOL _isFinished;
}

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
- (void)_finish;
- (BOOL)isFinished;
- (void)_setIsExecuting:(BOOL)arg1;
- (BOOL)isExecuting;
- (BOOL)isConcurrent;
- (void)main;
- (void)start;

@end

@interface MCMemoryDataSource : NSObject <MCMessageDataSource>
{
    NSMutableSet *_uniqueStrings;
    NSData *_separator;
    NSData *_data;
}

@property(readonly) NSData *data; // @synthesize data=_data;
- (id)uniquedString:(id)arg1;
- (void)flushAllCaches;
- (void)invalidateMessage:(id)arg1;
- (void)sendResponseType:(BOOL)arg1 forMeetingMessage:(id)arg2;
- (id)routeMessages:(id)arg1;
- (void)doCompact;
- (BOOL)canCompact;
- (id)undeleteMessages:(id)arg1 movedToStore:(id)arg2 newMessageIDs:(id)arg3;
- (void)undeleteMessages:(id)arg1;
- (void)deleteMessages:(id)arg1 moveToTrash:(BOOL)arg2;
- (void)saveSnippetsForMessages:(id)arg1;
- (id)snippetsForMessages:(id)arg1;
- (BOOL)supportsSnippets;
- (void)setNumberOfAttachments:(unsigned int)arg1 isSigned:(BOOL)arg2 isEncrypted:(BOOL)arg3 forMessage:(id)arg4;
- (id)attachmentsDirectoryForMessage:(id)arg1;
- (void)setColor:(id)arg1 highlightTextOnly:(BOOL)arg2 forMessages:(id)arg3;
- (id)async_setJunkMailLevel:(long long)arg1 forMessages:(id)arg2 trainJunkMailDatabase:(BOOL)arg3 userRecorded:(BOOL)arg4;
- (id)async_setJunkMailLevel:(long long)arg1 forMessages:(id)arg2 trainJunkMailDatabase:(BOOL)arg3;
- (id)async_setJunkMailLevel:(long long)arg1 forMessages:(id)arg2;
- (void)messageFlagsDidChange:(id)arg1 flags:(id)arg2;
- (id)async_setFlagWithKey:(id)arg1 state:(BOOL)arg2 forMessages:(id)arg3;
- (id)async_setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;
- (id)dataForMimePart:(id)arg1;
- (BOOL)hasCachedDataForMimePart:(id)arg1;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2;
- (id)fullBodyDataForMessage:(id)arg1;
- (id)bodyDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 allowPartial:(BOOL)arg3;
- (id)bodyForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 updateFlags:(BOOL)arg3 allowPartial:(BOOL)arg4;
- (id)bodyForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 updateFlags:(BOOL)arg3;
- (id)bodyForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)headerDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 allowPartial:(BOOL)arg3;
- (id)headerDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)headerDataForMessage:(id)arg1;
- (id)headersForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;
- (id)headersForMessage:(id)arg1;
- (id)messageForMessageID:(id)arg1;
- (id)mailbox;
- (id)account;
@property(readonly) BOOL isReadOnly;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)message;
- (void)dealloc;
- (id)init;
- (id)initWithData:(id)arg1;

@end

@interface _MCMemoryMessage : MCMessage
{
}

- (BOOL)isCompacted;
- (id)messageDataIncludingFromSpace:(BOOL)arg1 newDocumentID:(id)arg2;
- (void)setDataSource:(id)arg1;
- (id)dataSource;
- (void)dealloc;
- (id)init;
- (id)initWithStore:(id)arg1;

@end

@interface MCMessage : NSObject <MCMessageSortingInterface, NSCopying>
{
    id <MCMessageDataSource> _dataSource;
    NSString *_senderDisplayName;
    NSString *_subject;
    NSArray *_toRecipients;
    NSString *_sender;
    NSData *_messageIDHeaderDigest;
    NSData *_inReplyToHeaderDigest;
    NSUUID *_documentID;
    unsigned int _messageFlags;
    CDStruct_accefccd _flags;
    BOOL _type;
    double _dateSentInterval;
    double _dateReceivedInterval;
    double _dateLastViewedInterval;
    unsigned char _subjectPrefixLength;
    NSMutableSet *_gmailLabels;
    BOOL _recipientType;
}

+ (BOOL)isMessageURLString:(id)arg1;
+ (unsigned long long)displayablePriorityForPriority:(unsigned int)arg1;
+ (unsigned int)validatePriority:(unsigned int)arg1;
+ (BOOL)colorIsSetInMoreFlags:(CDStruct_accefccd)arg1;
+ (BOOL)allMessages:(id)arg1 areSameType:(BOOL)arg2;
+ (unsigned char)subjectPrefixLengthUnknown;
+ (id)unreadMessagesFromMessages:(id)arg1;
+ (BOOL)_messageTypeForMessageTypeKey:(id)arg1;
+ (id)messageTypeKeyForMessageType:(BOOL)arg1;
+ (id)descriptionForType:(BOOL)arg1 plural:(BOOL)arg2;
+ (id)replyPrefixWithSpacer:(BOOL)arg1;
+ (id)forwardedMessagePrefixWithSpacer:(BOOL)arg1;
+ (id)messageWithRFC822Data:(id)arg1 sanitizeData:(BOOL)arg2;
+ (id)messageWithRFC822Data:(id)arg1;
+ (void)initialize;
@property BOOL recipientType; // @synthesize recipientType=_recipientType;
@property double primitiveDateLastViewedInterval; // @synthesize primitiveDateLastViewedInterval=_dateLastViewedInterval;
@property double primitiveDateReceivedInterval; // @synthesize primitiveDateReceivedInterval=_dateReceivedInterval;
@property double primitiveDateSentInterval; // @synthesize primitiveDateSentInterval=_dateSentInterval;
@property BOOL primitiveMessageType; // @synthesize primitiveMessageType=_type;
- (void)setNumberOfAttachments:(unsigned int)arg1 isSigned:(BOOL)arg2 isEncrypted:(BOOL)arg3;
- (BOOL)calculateAttachmentInfoFromBody:(id)arg1 numberOfAttachments:(unsigned int *)arg2 isSigned:(char *)arg3 isEncrypted:(char *)arg4 force:(BOOL)arg5;
- (BOOL)calculateAttachmentInfoFromBody:(id)arg1 numberOfAttachments:(unsigned int *)arg2 isSigned:(char *)arg3 isEncrypted:(char *)arg4;
- (void)setAttachmentInfoFromBody:(id)arg1 forced:(BOOL)arg2;
- (void)setAttachmentInfoFromBody:(id)arg1;
- (void)forceSetAttachmentInfoFromBody:(id)arg1;
- (void)_calculateAttachmentInfoFromBody:(id)arg1;
- (BOOL)hasCachedDataForMimePart:(id)arg1;
- (id)dataForMimePart:(id)arg1;
- (id)headerData;
- (id)headerDataFetchIfNotAvailable:(BOOL)arg1 allowPartial:(BOOL)arg2;
- (id)bodyData;
- (id)bodyDataFetchIfNotAvailable:(BOOL)arg1 allowPartial:(BOOL)arg2;
- (id)persistentID;
@property(readonly) BOOL isThread;
- (id)URLStringIfAvailable;
- (id)URLString;
- (id)_URLFetchIfNotAvailable:(BOOL)arg1;
- (id)originalMailboxURLString;
- (id)remoteMailboxURLString;
- (id)account;
- (id)path;
- (CDStruct_accefccd)moreMessageFlags;
- (unsigned int)uidForSort;
- (unsigned int)uid;
- (id)remoteID;
- (id)references;
- (void)setMessageInfoFromMessage:(id)arg1;
- (void)setMessageInfo:(id)arg1 subjectPrefixLength:(unsigned char)arg2 to:(id)arg3 sender:(id)arg4 type:(BOOL)arg5 dateReceivedTimeIntervalSince1970:(double)arg6 dateSentTimeIntervalSince1970:(double)arg7 messageIDHeaderDigest:(id)arg8 inReplyToHeaderDigest:(id)arg9 dateLastViewedTimeIntervalSince1970:(double)arg10;
- (void)setTo:(id)arg1;
- (id)to;
- (id)senderDisplayName;
- (id)senderIfAvailable;
- (void)setSender:(id)arg1;
- (id)sender;
- (void)setDateLastViewedTimeIntervalSince1970:(double)arg1;
- (double)dateLastViewedAsTimeIntervalSince1970;
- (id)dateLastViewed;
- (void)setDateSentTimeIntervalSince1970:(double)arg1;
- (double)dateSentAsTimeIntervalSince1970;
- (double)dateReceivedAsTimeIntervalSince1970;
- (void)setDateReceivedTimeIntervalSince1970:(double)arg1;
- (id)dateSent;
- (id)dateReceived;
- (BOOL)supportsSnippets;
- (void)setSubjectPrefixLength:(unsigned char)arg1;
- (void)setSubject:(id)arg1;
- (id)subjectIfAvailable;
- (id)subject;
- (id)subjectNotIncludingReAndFwdPrefix;
- (id)subjectAndPrefixLength:(unsigned long long *)arg1;
- (void)loadCachedHeaderValuesFromHeaders:(id)arg1 type:(BOOL)arg2;
- (void)_setDateSentFromHeaders:(id)arg1;
- (void)_setDateReceivedFromHeaders:(id)arg1;
- (id)_newDateFromDateHeaderInHeaders:(id)arg1;
- (id)_newDateFromHeader:(id)arg1 inHeaders:(id)arg2;
- (id)_newDateFromReceivedHeadersInHeaders:(id)arg1;
- (BOOL)_doesDateAppearToBeSane:(id)arg1;
- (id)rawSourceFromHeaders:(id)arg1 body:(id)arg2;
- (long long)priority;
- (void)setPriorityFromHeaders:(id)arg1;
- (long long)junkMailLevel;
- (unsigned long long)numberOfAttachments;
- (BOOL)hasCalculatedNumberOfAttachments;
- (id)stringForJunk:(id)arg1;
- (id)stringForJunk;
- (id)stringForIndexingUpdatingBodyFlags:(BOOL)arg1;
- (id)stringForBodyContent;
- (id)stringForIndexing;
- (id)stringValueRenderMode:(long long)arg1 updateBodyFlags:(BOOL)arg2 junkRecorder:(id)arg3 bodyOnly:(BOOL)arg4;
- (BOOL)isPartialMessageBodyAvailable;
- (BOOL)isMessageContentsLocallyAvailable;
- (id)_inReplyToHeaderDigestIvar;
- (void)setInReplyToHeaderDigest:(id)arg1;
- (void)unlockedSetInReplyToHeaderDigest:(id)arg1;
- (BOOL)isReply;
- (id)inReplyToHeaderDigest;
- (id)_messageIDHeaderDigestIvar;
- (void)setMessageIDHeaderDigest:(id)arg1;
- (void)unlockedSetMessageIDHeaderDigest:(id)arg1;
- (id)messageIDHeaderDigest;
- (id)messageID;
- (id)attributedString;
- (unsigned long long)messageSize;
- (void)dealloc;
- (void)setColor:(id)arg1 hasBeenEvaluated:(BOOL)arg2 flags:(unsigned int)arg3 mask:(unsigned int)arg4;
- (void)setPrimitiveColor:(id)arg1 hasBeenEvaluated:(BOOL)arg2 flags:(unsigned int)arg3 mask:(unsigned int)arg4;
- (void)setColorHasBeenEvaluated:(BOOL)arg1;
- (void)setPrimitiveColorHasBeenEvaluated:(BOOL)arg1;
- (void)setColor:(id)arg1;
- (void)setPrimitiveColor:(id)arg1;
- (void)setMarkedForOverwrite:(BOOL)arg1;
- (BOOL)isMarkedForOverwrite;
- (int)colorForSort;
- (int)colorIntValue;
- (id)color;
- (BOOL)colorHasBeenEvaluated;
- (id)messageDataIncludingFromSpace:(BOOL)arg1 newDocumentID:(id)arg2;
- (id)messageDataIncludingFromSpace:(BOOL)arg1;
- (id)messageBodyIfAvailableUpdatingFlags:(BOOL)arg1;
- (id)messageBodyForIndexingAttachments;
- (id)messageBodyUpdatingFlags:(BOOL)arg1;
- (id)messageBodyFetchIfNotAvailable:(BOOL)arg1 allowPartial:(BOOL)arg2;
- (id)messageBodyIfAvailable;
- (id)messageBody;
- (id)attachmentNamesIfAvailable;
- (void)removeGmailLabels:(id)arg1;
- (void)addGmailLabels:(id)arg1;
@property(retain) NSSet *gmailLabels;
- (void)setMessageFlags:(unsigned int)arg1 mask:(unsigned int)arg2;
- (void)setPrimitiveMessageFlags:(unsigned int)arg1 mask:(unsigned int)arg2;
- (unsigned int)messageFlags;
- (void)setDocumentID:(id)arg1;
- (id)documentID;
- (BOOL)isMessageMeeting;
- (BOOL)isEditable;
- (void)setType:(BOOL)arg1;
- (BOOL)type;
- (id)headersIfAvailable;
- (id)headers;
- (void)_cacheMessageBodyDataIfPossible:(id)arg1;
- (id)_cachedMessageBodyData;
- (void)_cacheMessageBodyIfPossible:(id)arg1;
- (id)_cachedMessageBody;
- (void)_cacheHeaderDataIfPossible:(id)arg1;
- (id)_cachedHeaderData;
- (void)_cacheHeadersIfPossible:(id)arg1;
- (id)_cachedHeaders;
- (void)uncacheBodyAndHeader;
- (void)cacheBodyAndHeader;
- (id)mailbox;
- (BOOL)dataSourceShouldBeSet;
- (void)setDataSource:(id)arg1;
- (id)dataSource;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (void)renderString:(id)arg1;
- (void)renderBody:(id)arg1;
- (void)renderHeaders:(id)arg1;

@end

@interface MCMessageBody : NSObject
{
    union {
        MCMessage *message;
        Class messageClass;
    } _messageOrClass;
    BOOL _hideCalendarMimePart;
    long long _messageID;
}

@property BOOL hideCalendarMimePart; // @synthesize hideCalendarMimePart=_hideCalendarMimePart;
@property long long messageID; // @synthesize messageID=_messageID;
- (id)webArchive;
- (id)textHtmlPart;
- (id)attachmentFilenames;
- (id)attachments;
- (id)attachmentsWithContext:(id)arg1;
- (unsigned int)numberOfAttachmentsSigned:(char *)arg1 encrypted:(char *)arg2 numberOfTNEFAttachments:(unsigned int *)arg3;
- (void)calculateNumberOfAttachmentsDecodeIfNeeded;
- (void)calculateNumberOfAttachmentsIfNeeded;
@property(readonly) BOOL isSignedByMe;
- (BOOL)isRich;
- (BOOL)isHTML;
- (id)attributedString;
@property MCMessage *message;
- (id)init;
- (void)renderString:(id)arg1;

@end

@interface MCMessageGenerator : NSObject
{
    BOOL _shouldConvertCompositeImages;
    BOOL _shouldMarkNonresizableAttachmentData;
    BOOL _createsMimeAlternatives;
    BOOL _createsPlainTextOnly;
    BOOL _createsRichText;
    BOOL _allows8BitMimeParts;
    BOOL _allowsBinaryMimeParts;
    BOOL _allowsAppleDoubleAttachments;
    BOOL _signsOutput;
    BOOL _encryptsOutput;
    unsigned long long _preferredEncoding;
    unsigned long long _encodingHint;
}

+ (id)domainHintForResentIDFromHeaders:(id)arg1 hasResentFromHeaders:(char *)arg2;
@property(nonatomic) BOOL encryptsOutput; // @synthesize encryptsOutput=_encryptsOutput;
@property(nonatomic) BOOL signsOutput; // @synthesize signsOutput=_signsOutput;
@property(nonatomic) BOOL allowsAppleDoubleAttachments; // @synthesize allowsAppleDoubleAttachments=_allowsAppleDoubleAttachments;
@property(nonatomic) BOOL allowsBinaryMimeParts; // @synthesize allowsBinaryMimeParts=_allowsBinaryMimeParts;
@property(nonatomic) BOOL allows8BitMimeParts; // @synthesize allows8BitMimeParts=_allows8BitMimeParts;
@property(nonatomic) BOOL alwaysCreatesRichText; // @synthesize alwaysCreatesRichText=_createsRichText;
@property(nonatomic) BOOL createsPlainTextOnly; // @synthesize createsPlainTextOnly=_createsPlainTextOnly;
@property(nonatomic) BOOL createsMimeAlternatives; // @synthesize createsMimeAlternatives=_createsMimeAlternatives;
@property(nonatomic) unsigned long long encodingHint; // @synthesize encodingHint=_encodingHint;
@property(nonatomic) unsigned long long preferredEncoding; // @synthesize preferredEncoding=_preferredEncoding;
- (id)_newRFC2047NameParameterDataForMimePart:(id)arg1;
- (id)_hfsFilenameDataWithFilename:(id)arg1 partData:(id)arg2;
- (void)_setMimeTypeFromAttachment:(id)arg1 onMimePart:(id)arg2 filename:(id *)arg3;
- (BOOL)_encodeDataForMimePart:(id)arg1 withPartData:(id)arg2;
- (id)_newDataForMimePart:(id)arg1 withPartData:(id)arg2;
- (BOOL)appendDataForMimePart:(id)arg1 toData:(id)arg2 withPartData:(id)arg3;
- (void)_appendHeadersForMimePart:(id)arg1 toHeaders:(id)arg2;
- (id)_newPartForStationeryCompositeImage:(id)arg1 partData:(id)arg2;
- (id)_newPartForDirectoryAttachment:(id)arg1 partData:(id)arg2;
- (id)_newPartForAttachment:(id)arg1 partData:(id)arg2;
- (id)_newMimePartWithWebResource:(id)arg1 partData:(id)arg2 seenURLStrings:(id)arg3;
- (id)_newPartAndDataForString:(id)arg1 charset:(id)arg2 subtype:(id)arg3 partData:(id)arg4;
- (id)_newPlainTextPartWithAttributedString:(id)arg1 partData:(id)arg2;
- (id)_newMimePartWithAttributedString:(id)arg1 partData:(id)arg2 outputRich:(BOOL)arg3;
- (id)_newOutgoingMessage;
- (id)_newOutgoingMessageFromTopLevelMimePart:(id)arg1 topLevelHeaders:(id)arg2 withPartData:(id)arg3;
- (id)newMessageFromMessage:(id)arg1 reencodedWithCharset:(id)arg2;
- (id)newMessageByRemovingAttachmentsFromMessage:(id)arg1;
- (id)newMessageWithBodyData:(id)arg1 headers:(id)arg2;
- (id)newDataForAttributedString:(id)arg1;
- (id)newMessageWithAttributedString:(id)arg1 headers:(id)arg2;
- (id)newMessageWithHtmlString:(id)arg1 attachments:(id)arg2 headers:(id)arg3;
- (void)_recursivelyAddSubresourcesFromArchive:(id)arg1 toArray:(id)arg2;
- (id)newMessageWithHtmlString:(id)arg1 plainTextAlternative:(id)arg2 otherHtmlStringsAndAttachments:(id)arg3 headers:(id)arg4;
- (unsigned long long)_preferredEncodingUsingHintIfNecessary;
- (void)setShouldMarkNonresizableAttachmentData:(BOOL)arg1;
- (void)setShouldConvertCompositeImages:(BOOL)arg1;
- (id)init;

@end

@interface _MCOutgoingMessageBody : MCMessageBody
{
    NSMutableData *_rawData;
}

@property(retain, nonatomic) NSMutableData *rawData; // @synthesize rawData=_rawData;
- (void)setMessage:(id)arg1;
- (id)message;
- (void)dealloc;
- (id)init;

@end

@interface MCOutgoingMessage : MCMessage
{
    NSString *_remoteID;
    NSData *_rawData;
    _MCOutgoingMessageBody *_messageBody;
    unsigned long long _localAttachmentsSize;
    MCMutableMessageHeaders *_messageHeaders;
    NSString *_existingRemoteID;
}

@property(retain, nonatomic) NSString *existingRemoteID; // @synthesize existingRemoteID=_existingRemoteID;
@property(retain, nonatomic) MCMutableMessageHeaders *mutableHeaders; // @synthesize mutableHeaders=_messageHeaders;
- (void)setRemoteID:(id)arg1;
- (id)remoteID;
- (void)setLocalAttachmentsSize:(unsigned long long)arg1;
- (void)_setRawData:(id)arg1;
- (unsigned long long)messageSize;
- (id)headersIfAvailable;
- (id)headers;
- (id)messageDataIncludingFromSpace:(BOOL)arg1;
- (id)messageDataIncludingFromSpace:(BOOL)arg1 newDocumentID:(id)arg2;
- (id)messageBodyIfAvailable;
- (void)_setMessageBody:(id)arg1;
- (id)messageBody;
- (id)dataSource;
- (id)bodyDataFetchIfNotAvailable:(BOOL)arg1 allowPartial:(BOOL)arg2;
- (id)bodyData;
- (void)dealloc;
- (id)init;

@end

@interface MCMessageHeaders : NSObject <NSCopying, NSMutableCopying>
{
    NSData *_data;
    id _sender;
    unsigned long long _encodingHint;
}

+ (id)englishHeadersFromLocalizedHeaders:(id)arg1;
+ (id)localizedHeadersFromEnglishHeaders:(id)arg1;
+ (id)localizedHeaderForKey:(id)arg1;
+ (id)localizedHeaders;
+ (void)setCustomDisplayedHeaders:(id)arg1;
+ (id)customDisplayedHeaders;
+ (id)basicHeaderKeys;
+ (const char *)cstringForKey:(id)arg1;
+ (BOOL)isAddressHeaderKey:(id)arg1;
+ (void)initialize;
- (void)_appendAddressList:(id)arg1 toData:(id)arg2;
- (void)appendHeaderData:(id)arg1 recipients:(id)arg2 recipientsByHeaderKey:(id)arg3 expandABGroups:(BOOL)arg4 includeComment:(BOOL)arg5;
- (void)appendHeaderData:(id)arg1 recipients:(id)arg2;
- (id)encodedHeadersIncludingFromSpace:(BOOL)arg1;
- (BOOL)messageIsFromMicrosoft;
- (id)mailVersion;
- (id)isoLatin1CharsetHint;
- (id)_newDecodedAddressFromDataInRange:(struct _NSRange)arg1 sender:(id)arg2 consumedLength:(unsigned long long *)arg3;
- (id)_firstAddressForKey:(id)arg1 sender:(id)arg2;
- (id)firstAddressForKey:(id)arg1;
- (id)addressListForKey:(id)arg1;
- (id)_newHeaderValueForKey:(id)arg1 offset:(unsigned long long *)arg2;
- (id)firstHeaderForKey:(id)arg1;
- (id)_headersForKey:(id)arg1;
- (id)headersForKey:(id)arg1;
- (BOOL)hasHeaderForKey:(id)arg1;
- (void)_setCapitalizedKey:(id)arg1 forKey:(id)arg2;
- (id)_capitalizedKeyForKey:(id)arg1;
- (id)allHeaderKeys;
- (void)_resetSender;
- (id)_sender;
- (unsigned long long)encodingHint;
- (id)headerData;
- (id)headersDictionaryWithHeaderDetailLevel:(long long)arg1 forMessageType:(BOOL)arg2;
- (id)attributedStringShowingHeaderDetailLevel:(long long)arg1;
- (id)_htmlValueWithKey:(id)arg1 value:(id)arg2 useBold:(BOOL)arg3;
- (id)_htmlHeaderKey:(id)arg1 useBold:(BOOL)arg2 useGray:(BOOL)arg3;
- (id)htmlStringShowingHeaderDetailLevel:(long long)arg1 useBold:(BOOL)arg2 useGray:(BOOL)arg3;
- (id)_headersToDisplayFromHeaderKeys:(id)arg1 headerDetailLevel:(long long)arg2;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;
- (id)initWithHeaderData:(id)arg1 encodingHint:(unsigned long long)arg2;

@end

@interface MCStringRenderContext : NSObject
{
    BOOL _updateBodyFlags;
    MCJunkRecorder *_junkRecorder;
    long long _imageCount;
    long long _characterCount;
    NSSet *_URLs;
    NSSet *_imageURLs;
    long long _mode;
    NSMutableString *_buffer;
}

@property(retain) NSMutableString *buffer; // @synthesize buffer=_buffer;
@property BOOL updateBodyFlags; // @synthesize updateBodyFlags=_updateBodyFlags;
@property long long mode; // @synthesize mode=_mode;
@property(retain) NSSet *imageURLs; // @synthesize imageURLs=_imageURLs;
@property(retain) NSSet *URLs; // @synthesize URLs=_URLs;
@property long long characterCount; // @synthesize characterCount=_characterCount;
@property long long imageCount; // @synthesize imageCount=_imageCount;
@property(retain) MCJunkRecorder *junkRecorder; // @synthesize junkRecorder=_junkRecorder;
- (id)renderString;
- (void)dealloc;
- (id)init;
- (id)initForMode:(long long)arg1;

@end

@interface MCMessageTracer : NSObject
{
}

+ (id)bucketSignatureForValue:(long long)arg1;
+ (void)messageTraceDomain:(id)arg1 withCustomKeysAndValues:(id)arg2;
+ (void)messageTraceResult:(const char *)arg1 domain:(id)arg2 signature:(id)arg3;
+ (void)messageTraceResult:(const char *)arg1 domain:(id)arg2 signature:(id)arg3 extraStatus:(id)arg4;
+ (void)messageTraceResult:(const char *)arg1 domain:(id)arg2 uuid:(id)arg3 signature:(id)arg4 extraStatus:(id)arg5;
+ (void)messageTraceResult:(const char *)arg1 count:(unsigned long long)arg2 domainPrefix:(id)arg3 domainSuffix:(id)arg4 signature:(id)arg5 extraStatus:(id)arg6;
+ (void)messageTraceDomainPrefix:(id)arg1 domainSuffix:(id)arg2 signature:(id)arg3 signature2:(id)arg4 extraStatus:(id)arg5;
+ (void)messageTraceOperationError:(id)arg1 domainPrefix:(id)arg2 domainSuffix:(id)arg3 uuid:(id)arg4 duration:(double)arg5 count:(unsigned long long)arg6 size:(unsigned long long)arg7;

@end

@interface MCMessageURLProtocol : NSURLProtocol
{
}

+ (BOOL)requestIsCacheEquivalent:(id)arg1 toRequest:(id)arg2;
+ (id)canonicalRequestForRequest:(id)arg1;
+ (BOOL)canInitWithRequest:(id)arg1;
- (void)stopLoading;
- (void)startLoading;

@end

@interface MCMimeBody : MCMessageBody
{
    MCMimePart *_topLevelPart;
    NSData *_bodyData;
}

+ (id)newMimeBoundary;
+ (id)versionString;
+ (void)initialize;
- (void)flushCachedData;
- (void)setBodyData:(id)arg1;
- (id)bodyData;
- (id)dataForMimePart:(id)arg1;
- (id)parsedMessageWithContext:(id)arg1;
- (id)parsedMessage;
- (id)webArchive;
- (id)textHtmlPart;
- (id)preferredBodyPart;
- (BOOL)isTextPlain;
- (BOOL)isMultipartRelated;
- (BOOL)isRich;
- (BOOL)isHTML;
- (id)attachmentFilenames;
- (id)attachmentsWithContext:(id)arg1;
- (id)attachments;
- (unsigned int)numberOfAttachmentsSigned:(char *)arg1 encrypted:(char *)arg2 numberOfTNEFAttachments:(unsigned int *)arg3;
- (BOOL)hasAttachments;
- (void)decodeIfNecessary;
- (void)decodeIfNecessaryWithContext:(id)arg1;
- (BOOL)_isPossiblySignedOrEncrypted;
- (void)calculateNumberOfAttachmentsIfNeeded;
- (id)partWithNumber:(id)arg1;
- (id)mimeSubtype;
- (id)mimeType;
- (BOOL)isSignedByMe;
- (id)attachmentPartsEnumerator;
- (id)allPartsEnumerator;
- (void)setTopLevelPart:(id)arg1;
- (id)topLevelPart;
- (void)dealloc;
- (id)attributedString;
- (void)renderString:(id)arg1;
- (void)renderStringForJunk:(id)arg1;

@end

@interface _MCMimePartEnumerator : NSEnumerator
{
    BOOL _onlyAttachments;
    BOOL _isFirstIteration;
    MCMimePart *_currentPart;
}

- (id)nextObject;
- (void)dealloc;
- (id)initWithMimeBody:(id)arg1 onlyAttachments:(BOOL)arg2;
- (void)_setCurrentPart:(id)arg1;

@end

@interface MCMimeCharset : NSObject
{
    NSString *_primaryLanguage;
    NSString *_charsetName;
    unsigned int _coversLargeUnicodeSubset:1;
    unsigned int _useBase64InHeaders:1;
    unsigned int _canBeUsedForOutgoingMessages:1;
    unsigned long long _encoding;
}

+ (id)encodingVariantsForRecipients:(id)arg1;
+ (unsigned long long)encodingVariantForEncoding:(unsigned long long)arg1 address:(id)arg2;
+ (id)preferredMimeCharset;
+ (id)charsetForEncoding:(unsigned long long)arg1;
+ (id)allMimeCharsets;
@property(readonly) unsigned long long encoding; // @synthesize encoding=_encoding;
- (id)description;
- (id)primaryLanguage;
- (id)displayName;
- (BOOL)useBase64InHeaders;
- (BOOL)coversLargeUnicodeSubset;
- (BOOL)canBeUsedForOutgoingMessages;
- (id)charsetName;
- (void)dealloc;
- (id)_initWithCFEncoding:(unsigned int)arg1 primaryLanguage:(id)arg2;

@end

@interface MCMimeDecodeContext : NSObject
{
    BOOL _decodeTextPartsOnly;
    BOOL _shouldSkipUpdatingMessageFlags;
}

@property(nonatomic) BOOL shouldSkipUpdatingMessageFlags; // @synthesize shouldSkipUpdatingMessageFlags=_shouldSkipUpdatingMessageFlags;
@property(nonatomic) BOOL decodeTextPartsOnly; // @synthesize decodeTextPartsOnly=_decodeTextPartsOnly;

@end

@interface _MCMimeEnrichedReaderCommandStackEntry : NSObject
{
    const CDStruct_3441fd00 *_commandTableEntry;
    id _parameter;
}

@property(retain, nonatomic) id parameter; // @synthesize parameter=_parameter;
@property(nonatomic) const CDStruct_3441fd00 *commandTableEntry; // @synthesize commandTableEntry=_commandTableEntry;
- (void)dealloc;

@end

@interface _MCMimeEnrichedReader : NSObject
{
    CDStruct_2ada2998 _inputBuffer;
    long long _currentIndex;
    long long _inputLength;
    unsigned int _noFillLevel:30;
    unsigned int _eatOneNewline:1;
    unsigned int _insideComment:1;
    long long _lastQuoteLevel;
    NSMutableArray *_commandStack;
    id _outputString;
    NSMutableString *_outputBuffer;
    BOOL outputShouldBeHTML;
}

- (id)description;
- (void)convertEnrichedString:(id)arg1 intoPlainOutputString:(id)arg2;
- (void)convertEnrichedString:(id)arg1 intoOutputString:(id)arg2;
- (void)convertRichTextString:(id)arg1 intoOutputString:(id)arg2;
- (long long)readTokenInto:(id *)arg1;
- (id)copyCommand;
- (id)copyNextTokenWithDelimiters:(id)arg1;
- (id)currentFont;
- (void)parseParameterString:(id)arg1;
- (void)endCommand:(id)arg1;
- (void)beginCommand:(id)arg1;
- (void)setupFontStackEntry:(id)arg1;
- (void)handleNoParameterCommand:(const CDStruct_3441fd00 *)arg1;
- (void)closeUpQuoting;
- (void)fixConsecutiveSpaces:(id)arg1;
- (void)nowWouldBeAGoodTimeToAppendToTheAttributedString;
- (void)resetStateWithString:(id)arg1 outputString:(id)arg2;
- (void)appendStringToBuffer:(id)arg1;
- (void)dealloc;
- (id)init;
- (id)parenthesesSet;
- (id)punctuationSet;

@end

@interface _MCMimeEnrichedWriter : NSObject
{
    NSAttributedString *_attributedString;
    NSString *_string;
    CDStruct_2ada2998 _stringBuffer;
    NSFont *_defaultFont;
    NSFont *_defaultFixedPitchFont;
    double _defaultPointSize;
    struct _MCMimeEnrichedWriterCommandStackEntry *_commandStack;
    struct _MCMimeEnrichedWriterCommandStackEntry *_topOfStack;
    struct MCMimeEnrichedState _currentState;
    unsigned long long _currentLineStart;
    unsigned long long _lastSpace;
}

- (id)debugDescription;
- (void)appendTextFromRange:(struct _NSRange)arg1 toString:(id)arg2;
- (void)updateOutput:(id)arg1 forAttributes:(id)arg2 range:(struct _NSRange)arg3;
- (id)convertAttributedString:(id)arg1;
- (void)dealloc;
- (void)setState:(struct MCMimeEnrichedState *)arg1 fromStackEntry:(struct _MCMimeEnrichedWriterCommandStackEntry *)arg2;
- (void)setState:(struct MCMimeEnrichedState *)arg1 fromAttributes:(id)arg2;

@end

@interface _MCMimeHeaderScanContext : NSObject
{
    const char *_current;
    const char *_end;
    unsigned long long _encodingHint;
    NSMutableData *_dataBuf;
    MCMimePart *_mimePart;
}

@property(retain, nonatomic) MCMimePart *mimePart; // @synthesize mimePart=_mimePart;
@property(retain, nonatomic) NSMutableData *dataBuf; // @synthesize dataBuf=_dataBuf;
@property(nonatomic) unsigned long long encodingHint; // @synthesize encodingHint=_encodingHint;
@property(nonatomic) const char *end; // @synthesize end=_end;
@property(nonatomic) const char *current; // @synthesize current=_current;
- (id)description;
- (void)dealloc;

@end

@interface MCMimePart : NSObject <NSURLDownloadDelegate>
{
    id _encryptSignLock;
    NSArray *_messageSigners;
    MCError *_smimeError;
    struct _NSRange _range;
    id _parentOrBody;
    MCMimePart *_nextPart;
    long long _typeCode;
    long long _subtypeCode;
    NSString *_type;
    NSString *_subtype;
    NSMutableDictionary *_bodyParameters;
    NSString *_contentTransferEncoding;
    NSMutableDictionary *_otherIvars;
    BOOL _isMimeEncrypted;
    BOOL _isMimeSigned;
    MCMessageBody *_decryptedMessageBody;
    MCMessage *_decryptedMessage;
    id <MCMessageDataSource> _decryptedMessageDataSource;
}

@property(retain, nonatomic) id <MCMessageDataSource> decryptedMessageDataSource; // @synthesize decryptedMessageDataSource=_decryptedMessageDataSource;
@property(retain, nonatomic) MCMessage *decryptedMessage; // @synthesize decryptedMessage=_decryptedMessage;
@property(retain, nonatomic) MCMessageBody *decryptedMessageBody; // @synthesize decryptedMessageBody=_decryptedMessageBody;
@property(nonatomic) BOOL isMimeSigned; // @synthesize isMimeSigned=_isMimeSigned;
@property(nonatomic) BOOL isMimeEncrypted; // @synthesize isMimeEncrypted=_isMimeEncrypted;
@property(copy) NSString *contentTransferEncoding; // @synthesize contentTransferEncoding=_contentTransferEncoding;
- (void)setDecryptedMessageBody:(id)arg1 isEncrypted:(BOOL)arg2 isSigned:(BOOL)arg3 error:(id)arg4;
- (void)clearCachedDecryptedMessageBody;
- (id)decryptedMessageBodyIsEncrypted:(char *)arg1 isSigned:(char *)arg2 error:(id *)arg3;
- (id)_archiveForMultipartRelated;
- (id)webArchive;
- (id)parsedMessageWithContext:(id)arg1;
- (id)parsedMessage;
- (id)_createArchiveWithConvertedPlainTextBodyClassFromArchive:(id)arg1;
- (id)_archiveForFileWrapper:(id)arg1 URL:(id)arg2;
- (id)_archiveForString:(id)arg1 URL:(id)arg2 needsPlainTextBodyClass:(BOOL)arg3;
- (id)_archiveForData:(id)arg1 URL:(id)arg2 MIMEType:(id)arg3 textEncodingName:(id)arg4 frameName:(id)arg5;
- (id)_archiveForData:(id)arg1 URL:(id)arg2 MIMEType:(id)arg3 textEncodingName:(id)arg4 frameName:(id)arg5 subresources:(id)arg6 subframeArchives:(id)arg7;
- (id)decodedContent;
- (id)decodedContentWithContext:(id)arg1;
- (id)htmlStringForMimePart:(id)arg1 attachment:(id)arg2;
- (void)htmlString:(id *)arg1 createWebResource:(id *)arg2 forFileWrapper:(id)arg3 partNumber:(id)arg4;
- (id)textHtmlPart;
- (id)textPart;
- (id)signedData;
- (id)bestAlternative;
- (id)startPart;
- (void)configureFileWrapper:(id)arg1;
- (void)downloadDidFinish:(id)arg1;
- (void)download:(id)arg1 didFailWithError:(id)arg2;
- (void)download:(id)arg1 didReceiveDataOfLength:(unsigned long long)arg2;
- (void)download:(id)arg1 didReceiveResponse:(id)arg2;
- (id)_remoteFileWrapper;
- (id)fileWrapper;
- (id)attributedString;
- (id)_getMessageAttachment:(unsigned long long)arg1;
- (id)_getMessageAttachment:(unsigned long long)arg1 context:(id)arg2;
- (id)_createFileWrapper;
- (id)_newAttachment;
@property(readonly) BOOL isAutoArchivePart;
- (BOOL)usesKnownSignatureProtocol;
- (BOOL)isHTML;
- (BOOL)isRich;
- (BOOL)isAttachment;
- (BOOL)shouldConsiderInlineOverridingExchangeServer;
- (BOOL)isMessageExternalBodyWithURL;
- (id)_partThatIsAttachment;
- (void)markAsStationeryImage;
- (BOOL)isStationeryImage;
- (BOOL)isCalendar;
@property(readonly) BOOL isImage;
- (BOOL)isReadableText;
- (unsigned long long)approximateDecodedSize;
- (unsigned long long)approximateRawSize;
- (unsigned long long)textEncoding;
- (id)attachmentFilenames;
- (id)attachments;
- (void)getNumberOfAttachments:(unsigned int *)arg1 numberOfTNEFAttachments:(unsigned int *)arg2 isSigned:(char *)arg3 isEncrypted:(char *)arg4;
- (unsigned int)numberOfAttachments;
- (BOOL)hasCachedDataInStore;
@property(readonly) BOOL isEncrypted;
@property(readonly) BOOL isSigned;
- (id)attachmentFilename;
- (id)attachmentFilenameWithHiddenExtension:(char *)arg1;
- (id)description;
- (void)setMimeBody:(id)arg1;
- (id)mimeBody;
- (id)bodyConvertedFromFlowedText;
- (id)bodyData;
- (void)setRange:(struct _NSRange)arg1;
- (struct _NSRange)range;
- (void)addSubpart:(id)arg1;
- (void)setSubparts:(id)arg1;
- (id)subpartAtIndex:(long long)arg1;
- (id)subparts;
- (id)nextSiblingPart;
- (id)firstChildPart;
- (id)parentPart;
- (void)setLanguages:(id)arg1;
- (id)languages;
- (void)setContentLocation:(id)arg1;
- (id)contentLocation;
@property(readonly) NSString *contentIDURLString;
- (void)setContentID:(id)arg1;
- (id)contentID;
- (void)setContentDescription:(id)arg1;
- (id)contentDescription;
- (id)dispositionParameterKeys;
- (void)setDispositionParameter:(id)arg1 forKey:(id)arg2;
- (id)dispositionParameterForKey:(id)arg1;
- (void)setDisposition:(id)arg1;
- (id)disposition;
- (id)bodyParameterKeys;
- (void)setBodyParameter:(id)arg1 forKey:(id)arg2;
- (id)bodyParameterForKey:(id)arg1;
- (BOOL)isTypeCode:(long long)arg1 subtypeCode:(long long)arg2;
- (BOOL)isType:(id)arg1 subtype:(id)arg2;
- (void)setSubtype:(id)arg1;
- (id)subtype;
- (long long)subtypeCode;
- (void)setType:(id)arg1;
- (id)type;
- (long long)typeCode;
- (id)init;
- (void)dealloc;
- (void)renderString:(id)arg1;
- (BOOL)parseMimeBody;
- (BOOL)parseMimeBodyFetchIfNotAvailable:(BOOL)arg1 allowPartial:(BOOL)arg2;
- (id)partNumber;
- (void)_setupDictionary:(id *)arg1 fromArray:(id)arg2;
- (BOOL)parseIMAPPropertyList:(id)arg1;
- (id)decodeMultipartAppledoubleWithContext:(id)arg1;
- (id)decodeApplicationApplefileWithContext:(id)arg1;
- (id)decodeApplicationMac_binhex40WithContext:(id)arg1;
- (id)decodeMessageExternal_bodyWithContext:(id)arg1;
- (id)decodeMessagePartialWithContext:(id)arg1;
- (id)decodeMessageRfc822WithContext:(id)arg1;
- (id)decodeMessageDelivery_statusWithContext:(id)arg1;
- (id)decodeApplicationSmilWithContext:(id)arg1;
- (id)decodeApplicationZipWithContext:(id)arg1;
- (id)decodeApplicationOctet_streamWithContext:(id)arg1;
- (id)decodeApplicationApple_msg_composite_imageWithContext:(id)arg1;
- (id)decodeMultipartFolderWithContext:(id)arg1;
- (id)decodeMultipartRelatedWithContext:(id)arg1;
- (id)decodeMultipartAlternativeWithContext:(id)arg1;
- (id)decodeMultipartWithContext:(id)arg1;
- (id)decodeTextCalendarWithContext:(id)arg1;
- (id)decodeTextHtmlWithContext:(id)arg1;
- (id)decodeTextEnrichedWithContext:(id)arg1;
- (id)decodeTextRtfWithContext:(id)arg1;
- (id)decodeTextRichtextWithContext:(id)arg1;
- (id)decodeTextWithContext:(id)arg1;
- (id)decodeTextPlainWithContext:(id)arg1;
- (id)decode;
- (id)decodeWithContext:(id)arg1;
- (id)_fullMimeTypeEvenInsideAppleDouble;
- (id)copySignerLabels;
- (id)copyMessageSigners;
- (void)verifySignature;
- (BOOL)needsSignatureVerification:(id *)arg1;
- (id)decodeApplicationPkcs7_mimeWithContext:(id)arg1;
- (id)decodeMultipartSignedWithContext:(id)arg1;
- (id)_verifySignatureWithCMSDecoder:(struct _CMSDecoder *)arg1 againstSender:(id)arg2 signingError:(id *)arg3;
- (struct _CMSDecoder *)_newCMSDecoderWithMimePart:(id)arg1 error:(id *)arg2;
- (id)newEncryptedPartWithData:(id)arg1 recipients:(id)arg2 encryptedData:(id *)arg3;
- (id)newSignedPartWithData:(id)arg1 sender:(id)arg2 signatureData:(id *)arg3;
- (int)_addDataConvertingLineEndingsFromUnixToNetwork:(id)arg1 toCMSEncoder:(struct _CMSEncoder *)arg2;

@end

@interface MCMimeTextAttachment : NSTextAttachment
{
    MCMimePart *_mimePart;
}

+ (id)attachmentWithInternalAppleAttachmentData:(id)arg1 mimeBody:(id)arg2;
- (BOOL)shouldDownloadAttachmentOnDisplay;
- (BOOL)hasBeenDownloaded;
- (BOOL)isPlaceholder;
- (unsigned long long)approximateSize;
- (void)setMimePart:(id)arg1;
- (id)mimePart;
- (id)fileWrapperForcingDownloadEvenIfExternalBody:(BOOL)arg1;
- (id)fileWrapperForcingDownload;
- (void)_forceDownloadOfFileWrapperInBackground:(id)arg1;
- (id)initWithMimePart:(id)arg1;
- (id)initWithFileWrapper:(id)arg1;
- (id)initWithMimePart:(id)arg1 andFileWrapper:(id)arg2;
- (void)dealloc;

@end

@interface MCPriorityInvocation : NSInvocation
{
    unsigned char _priority;
}

+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4 object3:(id)arg5 object4:(id)arg6 priority:(unsigned char)arg7;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4 object3:(id)arg5 priority:(unsigned char)arg6;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4 priority:(unsigned char)arg5;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object:(id)arg3 priority:(unsigned char)arg4;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 priority:(unsigned char)arg3;
@property unsigned char priority; // @synthesize priority=_priority;

@end

@interface MCMonitoredInvocation : NSInvocation
{
    MCActivityMonitor *_monitor;
}

+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4 object3:(id)arg5 taskName:(id)arg6 priority:(unsigned char)arg7 canBeCancelled:(BOOL)arg8;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4 taskName:(id)arg5 priority:(unsigned char)arg6 canBeCancelled:(BOOL)arg7;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object:(id)arg3 taskName:(id)arg4 priority:(unsigned char)arg5 canBeCancelled:(BOOL)arg6;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 taskName:(id)arg3 priority:(unsigned char)arg4 canBeCancelled:(BOOL)arg5;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4 object3:(id)arg5 object4:(id)arg6;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4 object3:(id)arg5;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object:(id)arg3;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2;
- (unsigned char)priority;
- (void)invokeWithTarget:(id)arg1;
- (void)invoke;
- (void)setShouldPromptUserOnTermination;
- (void)setMonitor:(id)arg1;
- (id)monitor;
- (void)setTarget:(id)arg1;
- (id)target;
- (void)dealloc;

@end

@interface MCMonitoredOperation : NSOperation
{
    MCActivityMonitor *_parentMonitor;
    MCActivityMonitor *_monitor;
}

@property(retain, nonatomic) MCActivityMonitor *monitor; // @synthesize monitor=_monitor;
@property(retain, nonatomic) MCActivityMonitor *parentMonitor; // @synthesize parentMonitor=_parentMonitor;
- (void)executeOperation;
@property(readonly) NSString *activityString;
- (void)main;
- (void)dealloc;
- (id)init;

@end

@interface MCMutableMessageHeaders : MCMessageHeaders
{
    NSMutableDictionary *_headersAdded;
    NSMutableArray *_headersRemoved;
}

- (void)addFromSpaceIfMissing;
- (void)removeHeaderForKey:(id)arg1;
- (void)setAddressList:(id)arg1 forKey:(id)arg2;
- (void)setHeader:(id)arg1 forKey:(id)arg2;
- (void)_appendHeaderKey:(id)arg1 value:(id)arg2 toData:(id)arg3;
- (void)_appendAddedHeaderKey:(id)arg1 value:(id)arg2 toData:(id)arg3;
- (id)encodedHeadersIncludingFromSpace:(BOOL)arg1;
- (id)_firstAddressForKey:(id)arg1 sender:(id)arg2;
- (id)addressListForKey:(id)arg1;
- (id)firstHeaderForKey:(id)arg1;
- (id)_headersForKey:(id)arg1;
- (BOOL)hasHeaderForKey:(id)arg1;
- (id)allHeaderKeys;
- (id)description;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;

@end

@interface MCNetworkController : NSObject
{
    struct __SCDynamicStore *_store;
    struct __CFString *_dnsKey;
    NSString *_domainName;
    NSTimer *_notificationTimer;
    NSMapTable *_reachabilityReferencesForWatchedAccounts;
    BOOL _shouldLogNetworkEvents;
    BOOL _shouldLogAllNetworkEvents;
}

+ (id)encodeAddressForIDNA:(id)arg1 encodingHint:(unsigned long long)arg2;
+ (id)applyIDNAToHostname:(id)arg1 encode:(BOOL)arg2;
+ (BOOL)domain:(id)arg1 isSubdomainOfDomain:(id)arg2;
+ (BOOL)hostnameIsFullyQualified:(id)arg1;
+ (id)baseDomainsForDomains:(id)arg1;
+ (id)subnetForIPAddress:(id)arg1;
+ (id)getHostUUIDString;
+ (id)filteredDomainNamesFromHost:(id)arg1;
+ (id)filteredIPAddressesFromHost:(id)arg1;
+ (long long)networkStatus;
+ (id)sharedInstance;
+ (id)allocWithZone:(struct _NSZone *)arg1;
@property(readonly, nonatomic) BOOL shouldLogAllNetworkEvents; // @synthesize shouldLogAllNetworkEvents=_shouldLogAllNetworkEvents;
- (void)stopWatchingReachabilityForAllAccounts;
- (void)stopWatchingReachabilityForAccount:(id)arg1;
- (void)startWatchingReachabilityForAccount:(id)arg1;
- (struct __SCNetworkReachability *)_newNetworkReachabilityReferenceForHostname:(id)arg1;
- (BOOL)isHostReachable:(id)arg1 needToEstablishInternetConnection:(char *)arg2;
- (id)_watchedAccounts;
- (void)_postNetworkChangeNotification:(id)arg1;
- (id)domainName;
- (BOOL)_shouldLogForHostname:(id)arg1 port:(long long)arg2;
@property BOOL shouldLogNetworkEvents;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface MCPlaceholderFileWrapper : NSFileWrapper
{
}

- (BOOL)isRemotelyAccessed;
- (BOOL)isPlaceholder;

@end

@interface MCRemotePlaceholderFileWrapper : MCPlaceholderFileWrapper
{
    NSURL *_url;
}

- (unsigned long long)approximateSize;
- (id)URL;
- (id)symbolicLinkDestination;
- (id)symbolicLinkDestinationURL;
- (BOOL)isRemotelyAccessed;
- (id)initWithSerializedRepresentation:(id)arg1;
- (id)initSymbolicLinkWithDestinationURL:(id)arg1;
- (id)initRegularFileWithContents:(id)arg1;
- (id)initDirectoryWithFileWrappers:(id)arg1;
- (id)initWithURL:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (id)initWithURL:(id)arg1;
- (id)remoteAccessMimeType;
- (void)dealloc;

@end

@interface _MCCompositeImageRep : NSImageRep
{
    NSArray *_arrayOfImageDictionaries;
}

- (BOOL)draw;
- (void)dealloc;
- (id)initWithArrayOfImageDictionaries:(id)arg1;

@end

@interface MCNtlmAuthScheme : MCAuthScheme
{
}

+ (id)ntlmAuthScheme;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (long long)securityLevel;
- (BOOL)hasEncryption;
- (unsigned int)applescriptScheme;
- (id)humanReadableName;
- (id)name;
- (id)internetAccountsScheme;
- (BOOL)requiresDomain;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;

@end

@interface MCParsedMessage : NSObject <NSXMLParserDelegate>
{
    NSString *_html;
    BOOL _isPlainText;
    NSString *_mimeType;
    NSURL *_baseURL;
    NSDictionary *_attachmentsByURL;
    NSArray *_stationeryBackgroundImageURLs;
}

+ (id)parsedMessageWithWebArchive:(id)arg1 archiveIsMailInternal:(BOOL)arg2;
@property BOOL isPlainText; // @synthesize isPlainText=_isPlainText;
@property(retain) NSArray *stationeryBackgroundImageURLs; // @synthesize stationeryBackgroundImageURLs=_stationeryBackgroundImageURLs;
@property(retain) NSDictionary *attachmentsByURL; // @synthesize attachmentsByURL=_attachmentsByURL;
@property(retain) NSURL *baseURL; // @synthesize baseURL=_baseURL;
@property(retain) NSString *mimeType; // @synthesize mimeType=_mimeType;
- (void)setBaseURLFromHtml;
- (id)attributedString;
- (void)_addWebArchiveDataToArray:(id)arg1;
@property(retain) NSString *html;
- (id)description;
- (void)addAttachment:(id)arg1 forURL:(id)arg2;
- (void)dealloc;
- (void)_mcParsedMessageCommonInit;
- (id)init;
- (id)initWithWebArchive:(id)arg1 archiveIsMailInternal:(BOOL)arg2;
- (id)initWithWebArchive:(id)arg1;

@end

@interface MCPlainAuthScheme : MCAuthScheme
{
}

+ (id)plainAuthScheme;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (id)saslClientForAccount:(id)arg1 connection:(id)arg2;
- (unsigned int)applescriptScheme;
- (id)humanReadableName;
- (id)name;
- (id)internetAccountsScheme;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;

@end

@interface MCQuotaUsage : NSObject
{
    CDStruct_d3e19d9e _current;
    CDStruct_d3e19d9e _maximum;
}

@property(nonatomic) CDStruct_d3e19d9e maximum; // @synthesize maximum=_maximum;
@property(nonatomic) CDStruct_d3e19d9e current; // @synthesize current=_current;
- (id)description;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)incrementCurrentBy:(CDStruct_d3e19d9e)arg1;
- (void)decrementCurrentBy:(CDStruct_d3e19d9e)arg1;

@end

@interface MCRemoteMessage : MCMessage
{
    CDStruct_07ba05d6 _remoteFlags;
    unsigned long long _size;
}

- (void)setMessageSize:(unsigned long long)arg1;
- (unsigned long long)messageSize;
@property(readonly) CDStruct_07ba05d6 remoteFlags;
@property(nonatomic) BOOL partsHaveBeenCached;
@property(nonatomic) BOOL isPartial;

@end

@interface MCSafeBoolCache : NSObject
{
    NSConditionLock *_stateLock;
    NSInvocation *_updateInvocation;
}

- (void)invalidate;
@property BOOL value;
- (void)clearTarget;
- (void)dealloc;
- (id)initWithUpdateTarget:(id)arg1 selector:(SEL)arg2;

@end

@interface MCSafeValueCache : NSObject
{
    id _value;
    long long _state;
    id _target;
    SEL _selector;
}

- (void)invalidate;
- (id)retainedValue;
@property(retain) id value;
- (void)clearTarget;
- (void)dealloc;
- (id)initWithUpdateTarget:(id)arg1 selector:(SEL)arg2;

@end

@interface MCSaslClient : NSObject
{
    BOOL _justSentPlainTextPassword;
    BOOL _excludeAuthorizationName;
    unsigned int _encryptionBufferSize;
    NSString *_mechanismName;
    id <MCAccount> _account;
    long long _authenticationState;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
+ (id)newSASLClientWithMechanismName:(id)arg1 account:(id)arg2 externalSecurityLayer:(unsigned int)arg3;
+ (void)initializeSASLClient;
@property(nonatomic) BOOL excludeAuthorizationName; // @synthesize excludeAuthorizationName=_excludeAuthorizationName;
@property(nonatomic) unsigned int encryptionBufferSize; // @synthesize encryptionBufferSize=_encryptionBufferSize;
@property(nonatomic) BOOL justSentPlainTextPassword; // @synthesize justSentPlainTextPassword=_justSentPlainTextPassword;
@property(nonatomic) long long authenticationState; // @synthesize authenticationState=_authenticationState;
@property(nonatomic) id <MCAccount> account; // @synthesize account=_account;
@property(copy, nonatomic) NSString *mechanismName; // @synthesize mechanismName=_mechanismName;
- (BOOL)resetWithExternalSecurityLayer:(unsigned int)arg1;
- (void)dealloc;

@end

@interface _MCLibSasl2SaslClient : MCSaslClient
{
    char *_userLanguageCode;
    char *_authenticationName;
    char *_authorizationName;
    struct sasl_secret *_password;
    BOOL _mechanismUsesPlainText;
    BOOL _started;
    struct sasl_callback *_callbacks;
    struct sasl_conn *_saslConnection;
}

@property(nonatomic) BOOL started; // @synthesize started=_started;
@property(nonatomic) BOOL mechanismUsesPlainText; // @synthesize mechanismUsesPlainText=_mechanismUsesPlainText;
@property(nonatomic) struct sasl_conn *saslConnection; // @synthesize saslConnection=_saslConnection;
@property(nonatomic) struct sasl_callback *callbacks; // @synthesize callbacks=_callbacks;
- (void)logSASLErrorWithGenericDescription:(id)arg1;
- (void)clearAuthenticationCallbackBuffers;
- (BOOL)resetWithExternalSecurityLayer:(unsigned int)arg1;
- (id)newDecryptedDataForBytes:(const char *)arg1 length:(unsigned int)arg2;
- (id)newEncryptedDataForBytes:(const char *)arg1 length:(unsigned int)arg2;
- (void)checkPlainTextPasswordInResponse:(id)arg1;
- (id)responseForServerData:(id)arg1;
- (id)initialResponse;
- (id)startSASLConnectionReturnInitialResponse:(BOOL)arg1;
- (void)setAuthenticationState:(long long)arg1;
- (void)setUpSASLConnectionWithExternalSecurityLayer:(unsigned int)arg1;
- (id)description;
- (void)dealloc;
- (id)init;
- (id)initWithMechanismName:(id)arg1 account:(id)arg2 externalSecurityLayer:(unsigned int)arg3;

@end

@interface _MCExternalSaslClient : MCSaslClient
{
}

- (id)newDecryptedDataForBytes:(const char *)arg1 length:(unsigned int)arg2;
- (id)newEncryptedDataForBytes:(const char *)arg1 length:(unsigned int)arg2;
- (id)responseForServerData:(id)arg1;
- (id)initialResponse;
- (id)init;
- (id)initWithMechanismName:(id)arg1 account:(id)arg2;

@end

@interface _MCAppleTokenSaslClient : MCSaslClient
{
}

- (id)newDecryptedDataForBytes:(const char *)arg1 length:(unsigned int)arg2;
- (id)newEncryptedDataForBytes:(const char *)arg1 length:(unsigned int)arg2;
- (id)responseForServerData:(id)arg1;
- (id)initialResponse;
- (id)init;
- (id)initWithMechanismName:(id)arg1 account:(id)arg2;

@end

@interface _MCPlainClientTokenSaslClient : MCSaslClient
{
}

- (id)newDecryptedDataForBytes:(const char *)arg1 length:(unsigned int)arg2;
- (id)newEncryptedDataForBytes:(const char *)arg1 length:(unsigned int)arg2;
- (id)responseForServerData:(id)arg1;
- (id)initialResponse;
- (id)init;
- (id)initWithMechanismName:(id)arg1 account:(id)arg2;

@end

@interface MCSAXHTMLParsing : NSObject
{
    NSMutableString *string;
    NSMutableDictionary *attributes;
    NSString *metaName;
    NSString *metaHttpEquiv;
    NSString *metaContent;
    unsigned long long encoding;
    unsigned int indexingLimit;
    const char *titleStart;
    unsigned int titleLength;
    BOOL inHead;
    BOOL inTitle;
    BOOL inScript;
    BOOL inStyle;
}

- (void)dealloc;
- (id)initWithEncoding:(unsigned long long)arg1;

@end

@interface MCSharedPreferencesController : NSObject
{
    NSUserDefaults *_sharedMailUserDefaults;
}

+ (id)sharedInstance;
+ (id)allocWithZone:(struct _NSZone *)arg1;
@property(retain, nonatomic) NSUserDefaults *sharedMailUserDefaults; // @synthesize sharedMailUserDefaults=_sharedMailUserDefaults;
- (void)_preferencesChangedExternally:(id)arg1;
- (void)_postPreferencesDidChangeNotifications;
@property BOOL shouldCheckIntranetDomains;
@property(retain) NSArray *intranetDomains;
@property long long addressDisplayMode;
@property BOOL shouldExpandGroups;
@property(retain) NSString *defaultFromAddress;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface MCSocket : NSObject <NSStreamDelegate>
{
    NSArray *_clientCertificates;
    BOOL _useSSL;
    BOOL _logsErrors;
    BOOL _logsStreamEvents;
    BOOL _scheduledForBytesToArrive;
    unsigned long long _identifier;
    long long _activityType;
    double _connectTimeout;
    double _readWriteTimeout;
    NSArray *_trustedCertificates;
    NSPort *_wakeupPort;
    NSInputStream *_inputStream;
    NSOutputStream *_outputStream;
    NSString *_hostname;
    id _bytesAvailableHandler;
}

@property BOOL scheduledForBytesToArrive; // @synthesize scheduledForBytesToArrive=_scheduledForBytesToArrive;
@property(copy) id bytesAvailableHandler; // @synthesize bytesAvailableHandler=_bytesAvailableHandler;
@property(copy) NSString *hostname; // @synthesize hostname=_hostname;
@property(retain) NSOutputStream *outputStream; // @synthesize outputStream=_outputStream;
@property(retain) NSInputStream *inputStream; // @synthesize inputStream=_inputStream;
@property(readonly, nonatomic) NSPort *wakeupPort; // @synthesize wakeupPort=_wakeupPort;
@property(copy) NSArray *trustedCertificates; // @synthesize trustedCertificates=_trustedCertificates;
@property(nonatomic) BOOL logsStreamEvents; // @synthesize logsStreamEvents=_logsStreamEvents;
@property(nonatomic) BOOL logsErrors; // @synthesize logsErrors=_logsErrors;
@property(nonatomic) double readWriteTimeout; // @synthesize readWriteTimeout=_readWriteTimeout;
@property(nonatomic) double connectTimeout; // @synthesize connectTimeout=_connectTimeout;
@property long long activityType; // @synthesize activityType=_activityType;
@property(readonly) unsigned long long identifier; // @synthesize identifier=_identifier;
- (void)stream:(id)arg1 handleEvent:(unsigned long long)arg2;
- (void)_cancelLookupForHost:(struct __CFHost *)arg1 infoType:(int)arg2;
- (id)sourceHostname;
- (id)sourceIPAddress;
- (long long)remotePortNumber;
- (id)remoteHostname;
- (BOOL)isValid;
- (BOOL)isWritable;
- (BOOL)isReadable;
- (unsigned int)cipherKeyLength;
- (struct __SecTrust *)serverTrust;
- (id)securityLevel;
- (void)_unscheduleInputStreamFromMainRunLoopIfNecessary;
- (void)_scheduleInputStreamInMainRunLoopIfNecessary;
- (void)unregisterForBytesToArrive;
- (void)registerForBytesToArriveWithHandler:(id)arg1;
- (void)close;
- (void)_handleReadWriteErrorOnStream:(id)arg1 timedOut:(BOOL)arg2 logDetails:(id)arg3 error:(id *)arg4;
- (long long)writeBytes:(const void *)arg1 maxLength:(unsigned long long)arg2 error:(id *)arg3;
- (long long)readBytes:(void *)arg1 maxLength:(unsigned long long)arg2 error:(id *)arg3;
- (id)_waitForSecurityLayerNegotiationStreamsAreScheduled:(BOOL)arg1;
- (BOOL)_setSSLStreamProperties:(BOOL)arg1;
- (BOOL)_setupStreamsWithHostname:(id)arg1 port:(long long)arg2 needToEstablishInternetConnection:(char *)arg3 useSSL:(char *)arg4 isBackground:(BOOL)arg5 error:(id *)arg6;
- (BOOL)connectToHost:(id)arg1 withPort:(long long)arg2 isBackground:(BOOL)arg3;
- (void)setClientIdentity:(struct OpaqueSecIdentityRef *)arg1;
- (BOOL)setUsesSSL:(BOOL)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MCSSLCertificateTrustPanelManager : NSObject
{
}

+ (BOOL)showCertificateTrustPanelForError:(id)arg1 host:(id)arg2;

@end

@interface MCSubdata : NSData
{
    struct _NSRange _subrange;
    NSData *_parentData;
}

- (const void *)bytes;
- (unsigned long long)length;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)initWithContentsOfMappedFile:(id)arg1;
- (id)initWithData:(id)arg1;
- (id)initWithContentsOfURL:(id)arg1;
- (id)initWithContentsOfFile:(id)arg1;
- (id)initWithContentsOfURL:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (id)initWithContentsOfFile:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (id)initWithBytesNoCopy:(void *)arg1 length:(unsigned long long)arg2 freeWhenDone:(BOOL)arg3;
- (id)initWithBytesNoCopy:(void *)arg1 length:(unsigned long long)arg2;
- (id)initWithBytes:(const void *)arg1 length:(unsigned long long)arg2;
- (id)init;
- (id)initWithParent:(id)arg1 range:(struct _NSRange)arg2;

@end

@interface MCTaskOperation : NSBlockOperation
{
    MCActivityMonitor *_parentMonitor;
    MCActivityMonitor *_monitor;
}

+ (void)setTaskDescription:(const char *)arg1;
@property(retain) MCActivityMonitor *monitor; // @synthesize monitor=_monitor;
@property(retain) MCActivityMonitor *parentMonitor; // @synthesize parentMonitor=_parentMonitor;
- (void)cancel;
- (void)dealloc;
- (void)main;
- (id)setTaskName:(id)arg1 priority:(unsigned char)arg2 canCancel:(BOOL)arg3;
- (void)setParentMonitor:(id)arg1 taskName:(id)arg2;

@end

@interface MCResultTaskOperation : MCTaskOperation
{
    id _result;
}

@property(retain, nonatomic) id result; // @synthesize result=_result;
- (void)dealloc;

@end

@interface MCThrowingInvocationOperation : NSInvocationOperation
{
}

- (void)main;

@end

@interface MCURLifier : NSObject
{
}

+ (id)urlMatchesForString:(id)arg1;
+ (id)urlMatchesForStringsInDictionary:(id)arg1;

@end

@interface MCURLMatch : NSObject
{
    struct _NSRange _range;
    NSString *_url;
}

@property(copy) NSString *url; // @synthesize url=_url;
@property struct _NSRange range; // @synthesize range=_range;
- (id)description;
- (void)dealloc;
- (id)init;
- (id)initWithRange:(struct _NSRange)arg1 url:(id)arg2;

@end

@interface MCWebAuthenticationManager : NSObject
{
    NSMutableArray *_requests;
}

+ (id)sharedInstance;
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (void)_displayWebAuthentication;
- (void)queueDisplayWebAuthenticationURL:(id)arg1 onWindow:(id)arg2 completionHandler:(void)arg3;
- (id)description;
- (id)autorelease;
- (oneway void)release;
- (unsigned long long)retainCount;
- (id)retain;
- (void)dealloc;
- (id)init;

@end

@interface _MCWebAuthenticationRequest : NSObject
{
    NSMutableArray *_completionHandlers;
    NSURL *_webAuthenticationURL;
    id _windowProvider;
}

@property(copy) id windowProvider; // @synthesize windowProvider=_windowProvider;
@property(retain) NSURL *webAuthenticationURL; // @synthesize webAuthenticationURL=_webAuthenticationURL;
- (void)insertObject:(id)arg1 inCompletionHandlersAtIndex:(void)arg2;
- (unsigned long long)countOfCompletionHandlers;
@property(readonly) NSArray *completionHandlers;
- (id)description;
- (void)dealloc;
- (id)init;

@end

@interface MCWorkerThread : NSObject
{
}

+ (void)runInvocationOnQueueSynchronously:(id)arg1;
+ (void)addInvocationToQueue:(id)arg1;
+ (void)initialize;

@end

@interface ABRecord (MailCoreAdditions)
- (BOOL)isGroup;
- (id)compoundNameAndEmailForEmail:(id)arg1;
- (id)compoundNameAndEmail;
- (id)compoundName;
- (id)allEmailAddresses;
- (id)email;
- (long long)fullNameCompare:(id)arg1;
- (id)_fullName;
- (id)extension;
- (id)nickname;
- (id)middleName;
- (id)lastName;
- (id)firstName;
@end

@interface ABPerson (MailCoreAdditions)
+ (id)diacriticInsensitiveSearchElementForProperty:(id)arg1 label:(id)arg2 key:(id)arg3 value:(id)arg4 comparison:(long long)arg5;
- (BOOL)isGroup;
- (id)compoundNameAndEmailForGroupMembership:(id)arg1;
- (BOOL)isMe;
- (BOOL)hasEmailAddress:(id)arg1;
@end

@interface ABGroup (MailCoreAdditions)
+ (id)diacriticInsensitiveSearchElementForProperty:(id)arg1 label:(id)arg2 key:(id)arg3 value:(id)arg4 comparison:(long long)arg5;
- (BOOL)hasEmailAddress:(id)arg1;
- (id)_fullName;
- (BOOL)isGroup;
@end

@interface ABMailRecent (MailCoreAdditions)
- (id)_fullName;
- (BOOL)isGroup;
- (BOOL)hasRelatedAddressBookRecord;
- (id)mostRecentDate;
- (id)extension;
- (id)nickname;
- (id)middleName;
@end

@interface ABAddressBook (MailCoreAdditions)
- (id)bestRecordMatchingFormattedAddress:(id)arg1;
@end

@interface ABAddressBook (MailCoreAdditionsInternal)
+ (BOOL)_firstNameShouldBeFirstForRecord:(id)arg1;
@end

@interface NSApplication (MCAssert)
+ (BOOL)isMail;
@end

@interface NSError (MailCoreAdditions)
- (id)shortDescription;
- (id)moreInfo;
- (BOOL)isSSLCertificateError;
- (BOOL)isAuthenticationError;
- (BOOL)shouldBeReportedToUser;
@end

@interface NSString (MCFormatFlowedSupport)
- (id)convertFromFlowedText:(unsigned long long)arg1;
@end

@interface NSAttributedString (MCFormatFlowedSupport)
- (void)getQuotedString:(id *)arg1 encoding:(unsigned long long)arg2;
- (void)getFormatFlowedString:(id *)arg1 insertedTrailingSpaces:(char *)arg2 encoding:(unsigned long long)arg3;
@end

@interface NSData (HFSDataConversion)
- (id)wrapperForBinHex40DataWithFileEncodingHint:(unsigned long long)arg1;
- (id)wrapperForAppleFileDataWithFileEncodingHint:(unsigned long long)arg1;
@end

@interface NSFileWrapper (HFSDataConversion)
- (id)appleDoubleDataWithFilename:(const char *)arg1 length:(unsigned long long)arg2;
- (id)appleSingleDataWithFilename:(const char *)arg1 length:(unsigned long long)arg2;
@end

@interface NSString (MCMimeCharsetSupport)
- (id)bestMimeCharsetUsingHint:(unsigned long long)arg1;
@end

@interface NSData (MCMimeDataEncoding)
+ (unsigned long long)quotedPrintableLengthOfHeaderBytes:(const char *)arg1 length:(unsigned long long)arg2;
- (id)encodeBase64HeaderData;
- (id)encodeBase64AllowCancel:(BOOL)arg1;
- (id)encodeBase64WithoutLineBreaks;
- (BOOL)isValidBase64Data;
- (id)decodeBase64;
- (id)encodeQuotedPrintableForText:(BOOL)arg1 allowCancel:(BOOL)arg2;
- (id)decodeQuotedPrintableForText:(BOOL)arg1;
@end

@interface NSMutableData (MCMimeDataEncoding)
- (void)appendQuotedPrintableDataForHeaderBytes:(const char *)arg1 length:(unsigned long long)arg2;
@end

@interface NSString (MCMimeEnrichedReader)
+ (id)stringFromMimeEnrichedString:(id)arg1;
+ (id)htmlStringFromMimeEnrichedString:(id)arg1;
+ (id)htmlStringFromMimeRichTextString:(id)arg1;
@end

@interface NSAttributedString (MCMimeEnrichedWriter)
- (id)enrichedString;
@end

@interface NSString (RFC2047Support)
- (id)decodeMimeAddressList;
- (id)decodeMimeHeaderValueWithCharsetHint:(id)arg1;
- (id)decodeMimeHeaderValue;
- (id)encodedHeaderDataWithEncodingHint:(unsigned long long)arg1 encodingUsed:(unsigned long long *)arg2;
- (id)encodedHeaderDataWithEncodingHint:(unsigned long long)arg1;
- (id)encodedHeaderData;
@end

@interface NSMutableDictionary (RFC2231Support)
- (void)fixupRFC2231ValuesWithSender:(id)arg1;
@end

@interface NSMutableData (RFC2231Support)
- (void)appendRFC2231CompliantValue:(id)arg1 forKey:(id)arg2 withEncodingHint:(unsigned long long)arg3;
@end

@interface NSTextAttachment (MCMimeSupport)
- (id)internalAppleAttachmentData;
- (BOOL)shouldDownloadAttachmentOnDisplay;
- (BOOL)isPlaceholder;
- (BOOL)hasBeenDownloaded;
- (id)mimePart;
- (unsigned long long)approximateSize;
@end

@interface NSInvocation (MailCoreAdditions)
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4 object3:(id)arg5 object4:(id)arg6;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4 object3:(id)arg5;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object1:(id)arg3 object2:(id)arg4;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2 object:(id)arg3;
+ (id)invocationWithSelector:(SEL)arg1 target:(id)arg2;
@property(readonly) unsigned char priority;
- (void)invokeWithObject:(id)arg1;
@end

@interface NSArray (removeSelf)
- (id)attributedComponentsJoinedByString:(id)arg1;
@end

@interface NSArray (DerivedArray)
- (id)indicesOfStringsWithPrefix:(id)arg1;
- (id)arrayByAddingAbsentObjectsFromArray:(id)arg1 accordingToEquals:(BOOL)arg2;
@end

@interface NSMutableArray (Convenience)
- (void)removeObjectsFromSet:(id)arg1;
- (void)addObjectsFromSet:(id)arg1;
- (BOOL)addObjectIfAbsentAccordingToEquals:(id)arg1;
- (BOOL)addObjectIfAbsent:(id)arg1;
- (void)addAbsentObjectsFromArrayAccordingToEquals:(id)arg1;
- (void)addAbsentObjectsFromArray:(id)arg1;
- (unsigned long long)insertObjectIfAbsent:(id)arg1 usingComparator:(id)arg2;
- (unsigned long long)highestIndexOfObject:(id)arg1 inRange:(struct _NSRange)arg2;
@end

@interface NSMutableArray (SortedArrayExtensions)
- (unsigned long long)removeObject:(id)arg1 usingComparator:(id)arg2;
- (unsigned long long)insertObject:(id)arg1 usingComparator:(id)arg2;
@end

@interface NSArray (MessagesFromMixedStoresConvenience)
@property(readonly) NSDictionary *dictionaryWithMessagesSortedByMailbox;
@property(readonly) NSDictionary *dictionaryWithMessagesSortedByStore;
@end

@interface NSArray (DateComparisonForRecents)
- (id)thirdDate;
- (unsigned long long)indexOfThirdDate;
- (unsigned long long)indexOfOldestDate;
@end

@interface NSArray (DeepCopying)
- (id)twiceMutableCopy;
@end

@interface NSAttributedString (MailCoreAdditions)
- (BOOL)containsRichText;
- (BOOL)containsRichTextInRange:(struct _NSRange)arg1;
- (struct _NSRange)rangeOfAttachment:(id)arg1;
- (id)attachmentsInRange:(struct _NSRange)arg1;
- (id)attachments;
@end

@interface NSAttributedString (MessagePasteboardSupport)
- (id)messageDataForRange:(struct _NSRange)arg1;
@end

@interface NSAttributedString (FontAdditions)
+ (double)headerFontSize;
+ (id)messageNumberAttributes;
+ (id)selectionBlueHeaderAttributes;
+ (id)lightGrayHeaderAttributes;
+ (id)fixedPitchAttributes;
+ (id)headerAttributes;
+ (id)linkHeaderAttributes;
+ (id)blueHeaderAttributes;
+ (id)mediumWhiteHeaderAttributes;
+ (id)bigBoldWhiteHeaderAttributes;
+ (id)boldGrayHeaderAttributes;
+ (id)boldHeaderAttributes;
+ (void)resetMimeHeaderAttributes;
@end

@interface NSMutableAttributedString (MailCoreAdditions)
- (void)changeQuoteLevelInRange:(struct _NSRange)arg1 by:(long long)arg2 undoManager:(id)arg3;
- (void)fixQuotingDisplayAttributesInRange:(struct _NSRange)arg1;
- (void)removeQuotingDisplayAttributesInRange:(struct _NSRange)arg1;
- (void)removeAllFormattingExceptAttachments;
- (void)removeAllAttachments;
- (void)_removeAttachmentsAndReplaceWithCustomAttribute:(BOOL)arg1;
@end

@interface NSCharacterSet (MailCoreAdditions)
+ (id)replacementCharacterSet;
+ (id)unsafeDomainNameCharacterSet;
@end

@interface NSColor (MailCoreAdditions)
+ (id)scriptingRGBColorWithDescriptor:(id)arg1;
+ (id)inactiveAlternateBackgroundColor;
+ (id)activeAlternateBackgroundColor;
+ (id)aquaBlueColor;
+ (id)subjectAdditionColor;
+ (id)splitterColor;
+ (id)activeLinkColor;
+ (id)visitedLinkColor;
+ (id)linkColor;
+ (id)junkMailColor;
+ (id)threadQuasiSelectedColor;
+ (id)lighterThreadChildBackgroundColor;
+ (id)threadChildBackgroundColor;
+ (id)threadBackgroundColor;
+ (void)clearThreadBackgroundColors;
+ (id)lighterThreadBackgroundColor;
+ (void)setThreadBackgroundColor:(id)arg1;
+ (id)colorWithHexString:(id)arg1;
+ (id)colorWithIntValue:(int)arg1;
+ (id)newSwatchForColor:(id)arg1;
+ (void)configureColorMenu:(id)arg1;
+ (id)colorForEnrichedValue:(id)arg1;
+ (id)colorForIdentifier:(id)arg1;
+ (id)identifierForColor:(id)arg1;
+ (int)intWithIdentifierColor:(id)arg1;
+ (id)colorPlist;
+ (id)colorForHighlightColorValue:(unsigned int)arg1;
+ (unsigned int)highlightColorValueForColor:(id)arg1;
+ (id)allHighlightColors;
+ (id)colorForQuoteLevel:(long long)arg1;
+ (void)setQuotingColorList:(id)arg1;
+ (id)quotingColorList;
+ (id)defaultQuotingColors;
+ (id)allQuotingColors;
- (id)cssColorString;
- (id)scriptingRGBColorDescriptor;
- (id)hexString;
- (int)intValue;
@end

@interface NSData (MailCoreAdditions)
- (id)hexString;
- (id)MD5Digest;
- (struct _NSRange)rangeOfCString:(const char *)arg1 options:(unsigned long long)arg2 range:(struct _NSRange)arg3;
- (struct _NSRange)rangeOfCString:(const char *)arg1 options:(unsigned long long)arg2;
- (struct _NSRange)rangeOfCString:(const char *)arg1;
- (struct _NSRange)rangeOfByteFromSet:(id)arg1;
- (struct _NSRange)rangeOfRFC822HeaderData;
- (id)quotedFromSpaceDataForMessage;
- (id)unquotedFromSpaceDataWithRange:(struct _NSRange)arg1;
- (id)initWithDataConvertingLineEndingsFromNetworkToUnix:(id)arg1;
- (id)initWithDataConvertingLineEndingsFromUnixToNetwork:(id)arg1;
@end

@interface NSMutableData (MailCoreAdditions)
- (void)convertNetworkLineEndingsToUnix;
- (void)appendCString:(const char *)arg1;
@end

@interface NSDate (MailCoreAdditions)
+ (id)startOfDayWithDaysSinceToday:(long long)arg1;
+ (id)_dateStringByStrippingCommentsFromString:(id)arg1;
+ (id)newDateInCommonFormatsWithString:(id)arg1;
- (id)replyPrefixForSender:(id)arg1 withSpacer:(BOOL)arg2;
- (id)descriptionInBSDMailboxFormat;
@end

@interface NSFileHandle (MailCoreAdditions)
+ (id)fileHandleForTempFile:(id *)arg1 atPath:(id)arg2 mode:(unsigned short)arg3;
+ (id)fileHandleForUniqueFile:(id *)arg1 atPath:(id)arg2 mode:(unsigned short)arg3;
+ (id)fileHandleForUniqueFile:(id *)arg1 atPath:(id)arg2 mode:(unsigned short)arg3 extension:(id)arg4;
+ (id)createFileAtPath:(id)arg1 flags:(int)arg2 mode:(unsigned short)arg3;
- (BOOL)writeBytes:(const char *)arg1 length:(unsigned long long)arg2;
- (BOOL)writeLossyString:(id)arg1;
@end

@interface NSFileManager (MailCoreAdditions)
- (id)fileModificationDateAtPath:(id)arg1 traverseLink:(BOOL)arg2;
- (long long)fileSizeAtPath:(id)arg1 traverseLink:(BOOL)arg2;
- (id)URLForNonContainerizedHomeDirectory;
- (id)createUniqueDirectoryAtPath:(id)arg1 withIntermediateDirectories:(BOOL)arg2 attributes:(id)arg3 error:(id *)arg4;
@end

@interface NSFileWrapper (MailCoreAdditions)
- (void)addGatekeeperQuarantineToPath:(id)arg1;
- (id)stringForIndexing;
- (unsigned long long)approximateSize;
- (BOOL)isALargeAttachment;
- (BOOL)isPlaceholder;
- (id)tmpFullPath;
- (id)preferredFilenameWithoutHiddenExtension;
- (void)_isImageFile:(char *)arg1 isPDF:(char *)arg2 bestMimeType:(id *)arg3;
- (void)isImageFile:(char *)arg1 isPDF:(char *)arg2;
- (BOOL)isImageFile;
@property(readonly) NSString *bestMimeType;
- (BOOL)isRemotelyAccessed;
- (unsigned long long)imageBytes;
- (struct CGSize)imageSize;
- (void)setImageSize:(struct CGSize)arg1 imageBytes:(unsigned long long)arg2;
@property(retain) NSString *messageID;
@property(retain) NSArray *whereFroms;
@property(retain) NSDictionary *quarantineProperties;
@property(retain) NSString *mimeType;
@property(retain) NSString *mailSpecialHandlingType;
@property(retain) NSString *contentID;
@property(retain) NSNumber *filePermissions;
@property BOOL shouldHideExtension;
@property unsigned short finderFlags;
@property unsigned int creator;
@property unsigned int type;
@property(retain) NSData *resourceForkData;
- (void)removeEmptyAttachment;
- (id)emptyAttachmentPath;
- (BOOL)emptyAttachmentExists;
- (BOOL)createEmptyAttachmentAtPath:(id)arg1;
- (BOOL)_writeFinderInfoToPath:(id)arg1 includeDirectoryContents:(BOOL)arg2;
@end

@interface NSFileWrapper (iCalInvitationSupport)
- (void)setIsCalendarInvitation:(BOOL)arg1;
- (BOOL)isCalendarInvitation;
@end

@interface NSFileWrapper (ArchivedData)
- (id)archivedData;
- (id)archivedDataWithPartNumber:(id)arg1;
@end

@interface NSFileWrapper (PersistenceWithoutLosingMetadata)
- (id)initWithDictionaryRepresentation:(id)arg1;
- (id)dictionaryRepresentation;
@end

@interface NSImage (MailCoreAdditions)
+ (id)rotateImage:(id)arg1 byDegrees:(double)arg2;
+ (id)imageDataForType:(id *)arg1 fromPasteboard:(id)arg2;
+ (id)imagePasteboardTypesWithPreferenceToPNG;
- (double)pixelsHigh;
- (double)pixelsWide;
- (void)drawTransformedInRect:(struct CGRect)arg1 fromRect:(struct CGRect)arg2 operation:(unsigned long long)arg3 fraction:(double)arg4 flip:(BOOL)arg5;
@property(readonly) BOOL isAnimated;
@property(readonly) unsigned long long frameCount;
- (id)PNGData;
- (id)bitmapImageRep;
- (id)opaqueImage;
@end

@interface NSImage (CompositeImageAdditions)
+ (id)compositeImageWithImageDictionaries:(id)arg1 size:(struct CGSize)arg2;
+ (id)drawingDictionaryWithBlock:(id)arg1;
- (id)tintedImageWithColor:(id)arg1 size:(struct CGSize)arg2;
- (id)tintedImageWithColor:(id)arg1;
@end

@interface NSLock (MailCoreAdditions)
- (void)waitForLock;
@end

@interface NSConditionLock (MailCoreAdditions)
- (BOOL)lockIfCondition:(long long)arg1;
@end

@interface NSMutableDictionary (MailCoreAdditions)
- (void)addObject:(id)arg1 forKey:(id)arg2;
@end

@interface NSRunLoop (MailCoreAdditions)
+ (void)flushQueuedEvents;
@end

@interface NSRunLoop (InternalMailCoreAdditions)
+ (BOOL)_flushQueuedEventsAddingSource:(BOOL)arg1;
@end

@interface NSScanner (MailCoreAdditions)
- (BOOL)scanUpAndOverString:(id)arg1;
- (id)nextTokenWithPunctuation:(id)arg1;
- (BOOL)scanEndIntoString:(id *)arg1;
- (BOOL)betterScanUpToCharactersFromSet:(id)arg1 intoString:(id *)arg2;
- (BOOL)scanStringOfLength:(unsigned long long)arg1 intoString:(id *)arg2;
@end

@interface NSMutableSet (MailCoreAdditions)
- (void)removeObjectsInArray:(id)arg1;
- (id)uniquedObject:(id)arg1;
@end

@interface NSSet (MailCoreAdditions)
- (BOOL)containsArray:(id)arg1;
@end

@interface NSString (MailCoreAdditions)
+ (id)contentIDStringFromCidUrl:(id)arg1;
+ (id)messageIDStringWithDomainHint:(id)arg1;
+ (id)newURLForContentID:(id)arg1;
- (id)stringByRemovingCharactersInSet:(id)arg1;
- (id)stringByReplacingNonBreakingSpacesWithString:(id)arg1;
- (unsigned long long)mf_effectivePrefixLengthOnlyRe:(BOOL)arg1;
- (BOOL)hasReplyPrefix;
- (unsigned long long)effectivePrefixLength;
- (id)MD5Digest;
- (id)messageIDSubstring;
- (id)encodedMessageID;
- (BOOL)isCalendarInvitation;
- (id)newStringByApplyingBodyClassName:(id)arg1;
- (id)stringByApplyingBodyClassName:(id)arg1;
- (id)stringByReplacingString:(id)arg1 withString:(id)arg2;
- (long long)caseInsensitiveCompareExcludingXDash:(id)arg1;
- (BOOL)isEqualToStringIgnoringCase:(id)arg1;
- (BOOL)isEqualToStringIgnoreCaseAndDiacritics:(id)arg1;
- (id)stringWithNoExtraSpaces;
- (id)stringSuitableForHTML;
- (id)stringByLocalizingReOrFwdPrefix;
@end

@interface NSString (StationeryUtilities)
- (id)urlStringByInsertingCompositeVersionNumber;
- (id)urlStringByIncrementingCompositeVersionNumber;
@end

@interface NSNumber (MailCoreAdditions)
- (id)localizedString;
@end

@interface NSOperationQueue (MCTaskOperation)
- (void)addTaskOperation:(id)arg1 taskName:(id)arg2 priority:(unsigned char)arg3 canCancel:(BOOL)arg4;
@end

@interface NSData (MCUUEnDecode)
- (id)uuencodedDataWithFile:(id)arg1 mode:(unsigned int)arg2;
- (id)uudecodedDataIntoFile:(id *)arg1 mode:(unsigned int *)arg2;
@end

